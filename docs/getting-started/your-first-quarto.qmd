---
title: "Your First Quarto Document"
---

## Overview

Now that you're familiar with the structure of a Quarto document, we're going to create our first Quarto document. We'll start with a plain Markdown document so that we can get the hang of Quarto, but we'll build up in complexity from there.

## Setting Up

Before we start, you should spend some time to set up a Quarto development environment by referring to the Code Editors section. There are guides for setting up [Jupyter Lab](../tools/jupyter-lab.qmd), [RStudio](../tools/rstudio.qmd), [VS Code](../tools/vscode.qmd), and [plain-text editors](../tools/text-editors.qmd) such as Vim or Sublime.

You may also be interested in using the [Visual Editor](../visual-editor/index.qmd) in RStudio, which provides a [WYSIWYM](https://en.wikipedia.org/wiki/WYSIWYM) for all of Pandoc Markdown.

## Creating and Previewing Your First Document

Once you have your editing environment set up, create a document called `first_quarto.qmd` and add the following text to it:

``` markdown
---
title: My first Quarto doc
---

## Introduction

This is some plain text.
```

Let's set up a live preview of the document. If you're using the [preview release](https://www.rstudio.com/products/rstudio/download/preview/) version of RStudio, you can click the **Render on Save** button to render a live preview of this document. Otherwise, enter `quarto render first_quarto.qmd` in a command prompt and Quarto will serve a rendered version of the document in a new browser window. In either case, the result will look something like this:

![](images/first_render_1.png){.borderless-screenshot fig-alt="A screenshot of the above Markdown chunk rendered by Quarto."}

::: {.callout-warning collapse="true"}
## Note for Jupyter Users

If you are using JupyterLab, the document should be called `first_quarto.ipynb` and the `yaml` front matter at the top of the document should go into its own **Raw** cell. See the docs on [YAML Front Matter in Jupyter Lab](../tools/jupyter-lab.qmd#yaml-front-matter) for more info.
:::

Congratulations! You created and served your first Quarto document. Let's add some more text to this document:

``` markdown
---
title: My first Quarto doc
---

## Introduction

This is some plain text.

## Surus

From [Wikipedia](https://en.wikipedia.org/wiki/Surus):

> **Surus** ("the Syrian") was believed to be the last war elephant of Carthaginian general Hannibal's army in Italy.
```

Save the document and watch as Quarto updates the page preview. Your output should look like this:

![](images/first_render_2.png){.borderless-screenshot fig-alt="A screenshot of the above Markdown chunk rendered by Quarto."}

::: {.callout-note}
If the Markdown used in these previous examples is new to you, we suggest referencing the [Markdown Basics](../authoring/markdown-basics.html) section to familiarize yourself with the syntax.
:::

## The Quarto Workflow

What we've just done is an example of the basic Quarto workflow for single documents *without code*:

1. Start a live preview of the document with either `quarto preview <file_name>` (on the command line) or **Render on Save** (in the preview version of R Studio)
1. Make changes to the document 
1. Check the preview
1. Repeat the previous two steps until you're ready to render the document.

Seeing the rendered document early and often helps you catch formatting mistakes early on and cuts down on debugging time. 
For example, let's add an image of Surus to our document.
Save [this image](images/surus.png) to the same directory as `first_quarto.qmd` and add the following link to your document and save it:

``` markdown
---
title: My first Quarto doc
---

## Introduction

This is some plain text.

## Surus

From [Wikipedia](https://en.wikipedia.org/wiki/Surus):

> **Surus** ("the Syrian") was believed to be the last war elephant of Carthaginian general Hannibal's army in Italy.

![](sursu.png){fig-alt="A painting of Surus."}

```

The output will look something like:

![](images/first_render_3.png){.borderless-screenshot fig-alt="A screenshot of the above Markdown chunk rendered by Quarto."}

Uh oh! Our image didn't render because we mispelled the file name. 
Since we have our live preview running, we were able to catch this error early on in our writing process rather than at the end when debugging might be more difficult.
In fact, you'll have caught it even sooner if you're using the [Visual Editor](../tools/visual-editor) or the preview version of [RStudio](../tools/rstudio.qmd) as those two writing environments will let you know that the image path doesn't exist when you finish typing on the line.

Correcting the type in the image path and saving will get the document to render correctly:

``` markdown
---
title: My first Quarto doc
---

## Introduction

This is some plain text.

## Surus

From [Wikipedia](https://en.wikipedia.org/wiki/Surus):

> **Surus** ("the Syrian") was believed to be the last war elephant of Carthaginian general Hannibal's army in Italy.

![](surus.png){fig-alt="A painting of Surus."}

```

![](images/first_render_4.png){.borderless-screenshot fig-alt="A screenshot of the above Markdown chunk rendered by Quarto."}


::: {.callout-note}
## `quarto preview` vs. `quarto serve`

So far, we've been using `quarto preview` on a single document. Later on, you'll learn about [Quarto projects](../projects/quarto-projects.qmd), collections of documents within a directory, such as a site or a book. `quarto preview` won't render a document that is part of a project. However, you can get the same behavior as `quarto preview` for a project by calling `quarto serve`, which will create a preview for the entire project.
:::


## Up Next

Now that we have some experience working with a Quarto document, we'll learn how to render a Quarto document to different output formats.
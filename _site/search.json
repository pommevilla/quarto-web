[
  {
    "href": "about.html#goals",
    "title": "About Quarto",
    "section": "Goals",
    "text": "The overarching goal of Quarto is to make the process of creating and collaborating on scientific and technical documents dramatically better. We hope to do this in several dimensions:\n\nCreate a writing and publishing environment with great integreated tools for technical content. We want to make authoring with embedded code, equations, figures, complex diagrams, interactive widgets, citations, cross references, and the myriad other special requirements of scientific discourse straightforward and productive for everyone.\nHelp authors take full advantage of the web as a connected, interactive platform for communications, while still providing the ability to create excellent printed output from the same document source. Researchers shouldn’t need to choose between LaTeX, MS Word, and HTML but rather be able to author documents that target all of them at the same time.\nMake reproducible research and publications the norm rather than the exception. Reproducibility requires that the code and data required to create a manuscript are an integrated part of it. However, this isn’t often straightforward in practice—Quarto aims to make it easier to adopt a reproducible workflow than not.\n\nQuarto is open source software licensed under the GNU GPL v2. We believe that it’s better for everyone if the tools used for research and science are free and open. Reproducibility, widespread sharing of knowledge and techniques, and the leveling of the playing field by eliminating cost barriers are but a few of the shared benefits of free software in science."
  },
  {
    "href": "about.html#project",
    "title": "About Quarto",
    "section": "Project",
    "text": "At the core of Quarto is Pandoc, a powerful and flexible document processing tool. Quarto adds a number of facilities to Pandoc aimed at scientific and technical publishing, including:\n\nEmbedding code and output from Python, R, and JavaScript via integration with Jupyter, Knitr, and Observable.\nA variety of extensions to Pandoc markdown useful for technical writing including cross-references, sub-figures, layout panels, hoverable citations and footnotes, callouts, and more.\nA project system for rendering groups of documents at once, sharing options across documents, and producing aggregate output like websites and books.\n\nDevelopment of Quarto is sponsored by RStudio, where we previously created a similar system (R Markdown) that shared the same goals, but was targeted principally at users of the R language. With Quarto, we are hoping to bring these tools to a much wider audience."
  },
  {
    "href": "about.html#contribute",
    "title": "About Quarto",
    "section": "Contribute",
    "text": "You can contribute to Quarto in many ways:\n\nBy opening issues to provide feedback and share ideas.\nBy submitting Pull Request (PR) to fix opened issues\nBy submitting Pull Request (PR) to suggest new features (it is considered good practice to open an issue for discussion before working on a pull request for a new feature).\n\nPlease be mindful of our code of conduct as you interact with other community members.\n\nPull Requests\nPull requests are very welcome! Here’s how to contribute via PR:\n\nFork the repository, clone it locally, and make your changes in a new branch specific to the PR. For example:\n# clone your fork\n$ git clone https://github.com/<username>/quarto-cli\n\n# configure for your platform (./configure-macos.sh, ./configure-linux.sh, or ./configure-windows.cmd)\n$ cd quarto-cli\n$ ./configure-macos.sh\n\n# checkout a new branch\n$ git checkout -b feature/newthing\nFor significant changes (e.g more than small bug fixes), ensure that you have signed the individual or corporate contributor agreement as appropriate. You can send the signed copy to jj@rstudio.com.\nSubmit the pull request. It is ok to submit as draft in your are still working on it but would like some feedback from us. It always good to share in the open that you are working on it.\n\nWe’ll try to be as responsive as possible in reviewing and accepting pull requests."
  },
  {
    "href": "docs\\authoring\\callouts.html#callout-types",
    "title": "Callout Blocks",
    "section": "Callout Types",
    "text": "There are five different types of callouts available.\n\nnote\ntip\nimportant\ncaution\nwarning\n\nThe color and icon will be different depending upon the type that you select. Here are what the various types look like in HTML output:\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: note, tip, warning, caution, and important.\n\n\n\n\n\n\n\n\nTip With Caption\n\n\n\nThis is an example of a callout with a caption.\n\n\n\n\n\n\n\n\nThis is Important\n\n\n\nDanger, callouts will really improve your writing.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nCallouts provide a simple way to attract attention, for example, to this warning.\n\n\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘collapsed’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default."
  },
  {
    "href": "docs\\authoring\\callouts.html#markdown-syntax",
    "title": "Callout Blocks",
    "section": "Markdown Syntax",
    "text": "Create callouts in markdown using the following syntax (note that the first markdown heading used within the callout is used as the callout heading):\n:::{.callout-note}\nNote that there are five types of callouts, including:\n`note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n:::{.callout-tip}\n## Tip With Caption\n\nThis is an example of a callout with a caption.\n:::\n\n:::{.callout-caution collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n:::"
  },
  {
    "href": "docs\\authoring\\callouts.html#customizing-appearance",
    "title": "Callout Blocks",
    "section": "Customizing Appearance",
    "text": "Collapse\nYou can create ‘folded’ callouts that can be expanded by the user by settings the collapse attribute on the callout. If you set collapse=true, the callout will be expandable, but will be collapsed by default. If you set collapse=false, the callout will be expanded, but will be expanded by default.\n\n\nAppearance\nCallouts have 3 different looks you can use.\n\n\n\n\n\n\n\ndefault\nThe default appearance with colored header and an icon.\n\n\nsimple\nA lighter weight appearance that doesn’t include a colored header background.\n\n\nminimal\nA minimal treatment that applies borders to the callout, but doesn’t include a header background color or icon.\n\n\n\nYou can set the callout appearance either globally in the document (or project yaml):\ncallout-appearance: simple\nor by setting the type attribute on the callout. For example\n::: {.callout-note appearance=\"simple\"}\n\n## Pay Attention\n\nUsing callouts is an effective way to highlight content that your reader give special consideration or attention.\n\n:::\nwhich appears as:\n\n\n\n\n\n\nPay Attention\n\n\n\nUsing callouts is an effect way to highlight content that your reader give special consideration or attention.\n\n\n\n\nIcons\nIn addition to controlling the appearance of the callout, you can also choose to directly suppress the icon but either setting the global option in your document (or project) yaml:\ncallout-icon: false;\nor by setting an attribute directly on the callout:\n::: {.callout-note icon=false}\n\n## Pay Attention\n\nUsing callouts is an effective way to highlight content that your reader give special consideration or attention.\n\n:::\nWhich will appear as:\n\n\n\n\n\n\nPay Attention\n\n\n\nUsing callouts is an effective way to highlight content that your reader give special consideration or attention."
  },
  {
    "href": "docs\\authoring\\callouts.html#format-support",
    "title": "Callout Blocks",
    "section": "Format Support",
    "text": "The following formats render callouts as illustrated above:\n\nHTML\nPDF\nMS Word\nEPUB\n\nIn other formats, callouts are placed in a simple blockquote."
  },
  {
    "href": "docs\\authoring\\cross-references.html#overview",
    "title": "Cross References",
    "section": "Overview",
    "text": "Cross-references make it easier for readers to navigate your document by providing numbered references and hyperlinks to various entities like figures and tables. Every cross-referenceable entity requires a label (unique identifier) and caption (description). For example, this is a cross-referenceable figure:\n![Elephant](elephant.png){#fig-elephant}\nThe presence of the caption (Elephant) and label (#fig-elephant) make this figure referenceable. This enables you to use the following syntax to refer to it elsewhere in the document:\nSee @fig-elephant for an illustration.\nHere is what this would look like rendered to HTML:\n\nQuarto enables you to create cross-references to figures, tables, equations, sections, code listings, theorems, proofs, and more. Cross references can also be applied to dynamic output from knitr and Jupyter. The inline reference text (“fig. 1” in the above example) can also be customized (e.g. “figure 1” rather than the abbreviation).\n\n\n\n\n\n\nNote\n\n\n\nQuarto’s syntax for cross-references is based on pandoc-crossref (which is in turn based on this discussion: https://github.com/jgm/pandoc/issues/813). There are however several differences (mostly related to handling computational output) to note:\n\nQuarto uses the prefix #fig- rather than #fig: (which is more compatible with Jupyter notebook cell ids).\nQuarto is able to reference raw HTML and LaTeX figures and tables (which are often produced by executable code blocks).\nQuarto has support for referencing theorems and proofs (and related types)."
  },
  {
    "href": "docs\\authoring\\cross-references.html#figures",
    "title": "Cross References",
    "section": "Figures",
    "text": "As described above, this is the markdown used to create a cross-referenceable figure and then refer to it:\n![Elephant](elephant.png){#fig-elephant}\n\nSee @fig-elephant for an illustration.\n\nSubfigures\nYou may want to create a figure composed of multiple subfigures. To do this, enclose the figures in a div (with its own label and caption) and give each subfigure its own label and caption. You can then refer to either the entire figure in a reference or a single subfigure:\n::: {#fig-elephants layout-ncol=2}\n\n![Surus](surus.png){#fig-surus}\n\n![Hanno](hanno.png){#fig-hanno}\n\nFamous Elephants\n:::\n\nSee @fig-elephants for examples. In particular, @fig-hanno.\nHere is what this looks like when rendered as HTML:\n\nNote that we also used the layout-ncol attribute to specify a two-column layout. See the article on Figures and Layout for more details on laying out panels of figures.\n\n\nComputations\nFigures produced by Jupyter and Knitr can also be cross-referenced. To do this, add a label and fig-cap option at the top of the code block. For example:\n\nJupyterKnitr\n\n\n```{python}\n#| label: fig-plot\n#| fig-cap: \"Plot\"\n\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n```\n\nFor example, see @fig-plot.\n\n\n\n```{r}\n#| label: fig-plot\n#| fig-cap: \"Plot\"\n\nplot(cars)\n```\n\nFor example, see @fig-plot.\n\n\n\n\nYou can also create multiple figures within a Jupyter code cell and reference them as subfigures. To do this use fig-cap for the main caption, and fig-subcap to provide an array of subcaptions. For example:\n```{python}\n#| label: fig-plots\n#| fig-cap: \"Plots\" \n#| fig-subcap:\n#|   - \"Plot 1\"\n#|   - \"Plot 2\" \n#| layout-ncol: 2\n\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n```\n\nSee @fig-plots for examples. In particular, @fig-plots-2.\n\nNote that subfigure reference labels are created automatically based on the main chunk label (e.g. @fig-plots-1, @fig-plots-2, etc.)."
  },
  {
    "href": "docs\\authoring\\cross-references.html#tables",
    "title": "Cross References",
    "section": "Tables",
    "text": "To create a cross-referenceable table, add a caption to the table then include a #tbl- label in braces at the end of the caption. For example:\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: My Caption {#tbl-letters}\n\nSee @tbl-letters.\n\nYou may want to create a composition of several sub-tables. To do this, create a div with a main identifier, then apply sub-identifiers within the caption of contained tables. For example:\n::: {#tbl-panel layout-ncol=2}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table {#tbl-first}\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table {#tbl-second}\n\nMain Caption\n:::\n\nSee @tbl-panel for details, especially @tbl-second.\n\nNote that the “Main Caption” for the table is provided as the last block within the containing div.\n\nComputations\nYou can also cross-reference tables created from code executed via Knitr or Jupyter. To do this, add a tbl-cap attribute and include #tbl- labels within the captions of the sub-tables. For example:\n```{r}\n#| label: tbl-tables\n#| tbl-cap: \"Tables\"\n#| layout-ncol: 2\n\nlibrary(knitr)\nkable(head(cars), caption = \"Cars {#tbl-cars}\")\nkable(head(pressure), caption = \"Pressure {#tbl-pressure}\")\n```"
  },
  {
    "href": "docs\\authoring\\cross-references.html#equations",
    "title": "Cross References",
    "section": "Equations",
    "text": "Provide an #eq- label immediately after an equation to make it referenceable. For example:\nBlack-Scholes (@eq-black-scholes) is a mathematical model that seeks to explain the behavior of financial derivatives, most commonly options:\n\n$$\n\\frac{\\partial \\mathrm C}{ \\partial \\mathrm t } + \\frac{1}{2}\\sigma^{2} \\mathrm S^{2}\n\\frac{\\partial^{2} \\mathrm C}{\\partial \\mathrm C^2}\n  + \\mathrm r \\mathrm S \\frac{\\partial \\mathrm C}{\\partial \\mathrm S}\\ =\n  \\mathrm r \\mathrm C \n$$ {#eq-black-scholes}\n\nNote that the equation number is included (via \\qquad) in the right margin of the equation."
  },
  {
    "href": "docs\\authoring\\cross-references.html#sections",
    "title": "Cross References",
    "section": "Sections",
    "text": "To reference a section, add a #sec- identifier to any heading. For example:\n## Introduction {#sec-introduction}\n\nSee @sec-introduction for additional context.\nNote that when using section cross-references, you will also need to enable the number-sections option (so that section numbering is visible to readers). For example:\n---\ntitle: \"My Document\"\nnumber-sections: true\n---"
  },
  {
    "href": "docs\\authoring\\cross-references.html#code-listings",
    "title": "Cross References",
    "section": "Code Listings",
    "text": "To create a reference-able code block, add a #lst- identifier along with a lst-cap attribute. For example:\n```{#lst-customers .sql lst-cap=\"Customers Query\"}\nSELECT * FROM Customers\n```\n\nThen we query the customers database (@lst-customers)."
  },
  {
    "href": "docs\\authoring\\cross-references.html#theorems-and-proofs",
    "title": "Cross References",
    "section": "Theorems and Proofs",
    "text": "Theorems are commonly used in articles and books in mathematics. To include a reference-able theorem, create a div with a #thm- label (or one of other theorem-type labels described below). You also need to specify a theorem name either via the first heading in the block. You can include any content you like within the div. For example:\n::: {#thm-line}\n## Line\n\nThe equation of any straight line, called a linear equation, can be written as:\n\n$$\ny = mx + b\n$$\n:::\n\nSee @thm-line.\n\nFor LaTeX output, the amsthm package is used for typesetting theorems. For other formats an appropriate treatment is used (the above is an example of HTML output).\nThere are a number of theorem variations supported, each with their own label prefix:\n\n\n\nLabel Prefix\nPrinted Name\nLaTeX Environment\n\n\n\n\n#thm-\nTheorem\ntheorem\n\n\n#lem-\nLemma\nlemma\n\n\n#cor-\nCorollary\ncorollary\n\n\n#prp-\nProposition\nproposition\n\n\n#cnj-\nConjecture\nconjecture\n\n\n#def-\nDefinition\ndefinition\n\n\n#exm-\nExample\nexample\n\n\n#exr-\nExercise\nexercise\n\n\n\nThe proof, remark, and solution environments generally receive similar typesetting as theorems, however they are not numbered (and therefore cannot be cross-referenced). To create these environments just use them as the class name of a div:\n::: {.solution}\nThe solution.\n:::\nAs with theorems you can optionally include a heading as the first element of the div (or a name attribute) to give the environment a caption for typesetting (this typically appears in parentheses after the environment title).\nFor LaTeX output the amsthm package is used to typeset these environments. For other formats a similar treatment is used, but you can further customizing this using CSS."
  },
  {
    "href": "docs\\authoring\\cross-references.html#references",
    "title": "Cross References",
    "section": "References",
    "text": "The examples above have all used the default syntax for inline references (e.g. @fig-elephant), which results in the use a short abbreviation for each object type (e.g. “fig. 1,” “tbl. 1,” etc.).\nYou can customize the appearance of inline references by either changing the syntax of the inline reference or by setting options. Here are the various ways to compose a cross-reference and their resulting output:\n\n\n\nType\nSyntax\nOutput\n\n\n\n\nDefault\n@fig-elephant\nfig. 1\n\n\nCapitalized\n@Fig-elephant\nFig. 1\n\n\nCustom Prefix\n[Figure @fig-elephant]\nFigure 1\n\n\nNo Prefix\n[-@fig-elephant]\n1\n\n\n\nYou can also group cross references using the following syntax:\nAs illustrated in [@fig-elephant; @fig-panther; @fig-rabbit].\nThere are a number of options that can be used to further customize the treatment of cross-references. See the section below on References Options for additional details."
  },
  {
    "href": "docs\\authoring\\cross-references.html#chapter-numbering",
    "title": "Cross References",
    "section": "Chapter Numbering",
    "text": "You can use the crossref: chapters option to indicate that top-level headings (H1) in your document correspond to chapters, and that cross-references should be sub-numbered by chapter. For example:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\ncrossref:\n  chapters: true\n---\n\n# Introduction\n\n![Elephant](elephant.png){#fig-elephant}\n\nSee @fig-elephant for an illustration."
  },
  {
    "href": "docs\\authoring\\cross-references.html#lists",
    "title": "Cross References",
    "section": "Lists",
    "text": "For LaTeX / PDF output, you can use the raw LaTeX commands \\listoffigures, \\listoftables and \\listoflistings to produce listings of all figures, tables, etc. within a document. You can use the lof-title, lot-title, and lol-title crossref options to customize the title of the listing.\nFor example:\n---\ntitle: \"My Document\"\ncrossref:\n  lof-title: \"List of Figures\"\nformat: pdf\n---\n\n\\listoffigures\nNote that the default titles for the lists use the form displayed above (i.e. “List of…<Type>”)."
  },
  {
    "href": "docs\\authoring\\cross-references.html#options",
    "title": "Cross References",
    "section": "Options",
    "text": "There are a wide variety of options available for customizing caption labels and references. These options are all specified within the crossref key of document metadata.\n\nTitles\nYou can specify the title prefix used for captions using *-title options. You can also specify the delimiter used between the prefix and the caption using the title-delim option. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  fig-title: Fig     # (default is \"Figure\")\n  tbl-title: Tbl     # (default is \"Table\")\n  title-delim: —     # (default is \":\")\n---\n\n\nReferences\nYou can specify the prefix used for inline reference type using *-prefix options. You can also specify whether references should be hyper-linked using the ref-hyperlink option. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  fig-prefix: figure   # (default is \"fig.\")\n  tbl-prefix: table    # (default is \"tbl.\")\n  ref-hyperlink: false # (default is true)\n---\n\n\nNumbering\nThere are a variety of numbering schemes available for cross-references, including:\n\narabic (1, 2, 3)\nroman (I, II, III, IV)\nroman i (i, ii, iii, iv)\nalpha x (start from letter ‘x’)\nalpha X (start from letter ‘X’)\n\nYou can specify the number scheme used for all types (other than sub-references) using the labels option. For sub-references (e.g. subfigures), you can specify the number scheme using the subref-labels option. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  labels: alpha a        # (default is arabic)\n  subref-labels: roman i # (default is alpha a)\n---\nIf you would like, you can specify the number scheme for a specific type using the *-labels options. For example:\n---\ntitle: \"My Document\"\ncrossref:\n  fig-labels: alpha a    # (default is arabic)\n  tbl-labels: alpha a    # (default is arabic)\n  subref-labels: roman i # (default is alpha a)\n---\nIf both labels and a type specific label option is provided, the type specific option will override the labels option."
  },
  {
    "href": "docs\\authoring\\figures-and-layout.html#figure-basics",
    "title": "Figures & Layout",
    "section": "Figure Basics",
    "text": "In Pandoc markdown, a figure is created whenever a captioned image appears by-itself in a paragraph. For example:\n![Elephant](elephant.png)\nThis results in the following treatment for various output types:\n\n\n\nHTML\nPDF\nWord\n\n\n\n\n\n\n\n\n\n\nNote that for LaTeX / PDF output figures are automatically numbered (you can arrange for figures to be numbered in other formats using Cross References).\n\nLinked Figures\nWhen rendering with Quarto, you can enclose a figure within a link and it will still be treated within output as a captioned figure. For example:\n[![Elephant](elephant.png)](https://en.wikipedia.org/wiki/Elephant)\n\n\nFigure Alignment\nFigures and their captions are center aligned by default. Add the fig-align attribute to the image to use a different alignment. For example:\n![Elephant](elephant.png){fig-align=\"left\"}\n\n\nAlt Text\nYou can add alternative text to a figure by adding the fig-alt attribute to the image. For example, the following Markdown…\n![](elephant.png){fig-alt=\"A drawing of an elephant.\"}\n… will create the following HTML with the corresponding alt tag:\n<img src=\"elephant.png\" alt=\"A drawing of an elephant.\">\nNote that the figure caption, title, and alt text can all be different. For example, the following code…\n![Elephant](elephant.png \"Title: An elephant\"){fig-alt=\"A drawing of an elephant.\"}\n…produces this HTML:\n<img src=\"elephant.png\" title=\"Title: An elephant\" alt=\"A drawing of an elephant.\">\n\n\nLaTeX Environments\nThere are a number of LaTeX packages that provide custom figure environments. For example, the mdframed package includes an mdframed environment used to enclose figures in a special border style. By default, Quarto uses the standard figure environment, but you can use the fig-env attribute to specify a custom one. For example:\n---\ntitle: \"Sidenotes\"\nformat:\n  pdf:\n    header-includes: |\n      \\usepackage{sidenotes}\n---\n\n![Elephant](elephant.png){fig-env=\"marginfigure\"}"
  },
  {
    "href": "docs\\authoring\\figures-and-layout.html#figure-divs",
    "title": "Figures & Layout",
    "section": "Figure Divs",
    "text": "You can treat any markdown content you want as a figure by enclosing it in Pandoc div block with an identifier prefaced with #fig-. For example, here we create a figure that includes an embedded iframe:\n::: {#fig-elephant}\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SNggmeilXDQ\"></iframe>\n\nElephant\n:::\nNote that the last paragraph in the div block is used as the figure caption."
  },
  {
    "href": "docs\\authoring\\figures-and-layout.html#subfigures",
    "title": "Figures & Layout",
    "section": "Subfigures",
    "text": "If you have several figures that appear as a group, you can create a figure div to enclose them. For example:\n::: {#fig-elephants layout-ncol=2}\n\n![Surus](surus.png){#fig-surus}\n\n![Hanno](hanno.png){#fig-hanno}\n\nFamous Elephants\n:::\nAgain, the last paragraph provides the main caption, and the individual figures carry the sub-captions. Here is what this looks like when rendered as HTML:\n\nNote that we also used a layout-ncol attribute to specify a two-column layout. The next section delves more into customizing figure layouts."
  },
  {
    "href": "docs\\authoring\\figures-and-layout.html#figure-panels",
    "title": "Figures & Layout",
    "section": "Figure Panels",
    "text": "Above we demonstrate laying out two side-by-side figures with subcaptions and a main caption. You may or may not want the caption / sub-caption treatment, and you might also want to use multiple rows of figures. All of these variations are possible.\nTo layout two figures with their own standalone captions (and no main caption), just eliminate the #fig identifiers and main caption at the bottom:\n::: {layout-ncol=2}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n:::\n\nYou can also eliminate the captions entirely:\n::: {layout-ncol=2}\n![](surus.png)\n\n![](hanno.png)\n:::\n\nMultiple Rows\nIf you have more than 2 images, you might want to lay them out across multiple rows. You can do this using the layout-nrow attribute. For example:\n::: {layout-nrow=2}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Abdul Abbas](abdul-abbas.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\nMore complex figure arrangements (e.g. rows with varying column layouts) are possible. See the Complex Layouts section below for more details."
  },
  {
    "href": "docs\\authoring\\figures-and-layout.html#table-panels",
    "title": "Figures & Layout",
    "section": "Table Panels",
    "text": "You can also use a div with layout attributes to display tables side-by-side. For example:\n::: {layout-ncol=2}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table\n:::\n\nAs with figures, you can also present tables using numbered subcaptions by adding a main caption and #tbl- identifiers:\n::: {#tbl-panel layout-ncol=2}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table {#tbl-first}\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table {#tbl-second}\n\nMain Caption\n:::\n\nSee the article on Cross References for additional details on table captions, subcaptions, and numbering."
  },
  {
    "href": "docs\\authoring\\figures-and-layout.html#complex-layouts",
    "title": "Figures & Layout",
    "section": "Custom Layouts",
    "text": "The examples above used the layout-ncol or layout-nrow attributes to create straightforward layouts where all columns are of equal sizes. The layout attribute enables the creation of much more complex layouts.\nFor example, this defines a layout with two equally sized figures in the first row, then another image that spans the entire second row:\n::: {layout=\"[[1,1], [1]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\nThe layout attribute is a 2-dimensional array where the first dimension defines rows and the second columns. In this case \"layout=\"[[1,1], [1]]\" translates to: create two rows, the first of which has two columns of equal size and the second of which has a single column.\nNote that the numbers in a row are arbitrary and don’t need to add up to a particular total. You can therefore use whatever scheme is most natural. For example, here we define columns that occupy varying percentage widths of the row:\n::: {layout=\"[[70,30], [100]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\nYou can also use negative values to create space between elements. For example:\n::: {layout=\"[[40,-20,40], [100]]\"}\n![Surus](surus.png)\n\n![Hanno](hanno.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\n\nVertical Alignment\nIf you have a layout with a row of images of differing heights, you can control their vertical alignment using the layout-valign attribute. A simple example:\n::: {layout=\"[25,-2,10]\" layout-valign=\"bottom\"}\n![Surus](surus.png)\n\n![Lin Wang](lin-wang.png)\n:::\n\nNote that vertical alignment isn’t limited to images, you can also vertically align any other elements that are included in a panel."
  },
  {
    "href": "docs\\authoring\\figures-and-layout.html#computations",
    "title": "Figures & Layout",
    "section": "Computations",
    "text": "Figures\nNote that figure layout attributes also work for figures produced by executable code blocks. Here are examples for both Jupyter and Knitr:\n\nJupyterKnitr\n\n\n```{python}\n#| layout-ncol: 2\n\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n```\n\n\n\n```{r}\n#| layout-ncol: 2\n\nplot(cars)\nplot(pressure)\n```\n\n\n\n\n\n\nTables\nYou can also use layout attributes for tables produced by Knitr or Jupyter. For example, this Rmd code chunk creates side-by-side tables:\n```{r}\n#| layout-ncol: 2\n\nlibrary(knitr)\nkable(head(cars), caption = \"Cars\")\nkable(head(pressure), caption = \"Pressure\")\n```\n\n\n\nCustom Layout\nThe layout works the same way for figures or tables produced by knitr or Jupyter. For example, here’s an Rmd code chunk that produces 3 plots and defines a custom layout for them:\n```{r}\n#| layout: [[45,-10, 45], [100]]\n\nplot(cars)\nplot(pressure)\nplot(mtcars)\n```"
  },
  {
    "href": "docs\\authoring\\figures-and-layout.html#block-layout",
    "title": "Figures & Layout",
    "section": "Block Layout",
    "text": "While the examples above illustrate laying out figures and tables, it’s important to note that layout attributes can be used to layout any sort of block content. For example, here we layout 2 lists side-by-side:\n::: {layout-ncol=2}\n### List One\n\n- Item A\n- Item B\n- Item C\n\n### List Two\n\n- Item X\n- Item Y\n- Item Z\n:::\nNote that headings are automatically combined with the block that follows them, so this markdown has a total of 2 columns to lay out. Here’s an example of a paragraph next to a bullet list (without headings):\n::: {layout-ncol=2}\n- Item X\n- Item Y\n- Item Z\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu erat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor sagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu blandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna. Mauris sed massa ornare, interdum ipsum a, semper massa. \n:::"
  },
  {
    "href": "docs\\authoring\\footnotes-and-citations.html#citations",
    "title": "Citations & Footnotes",
    "section": "Citations",
    "text": "Quarto will use Pandoc to automatically generate citations and a bibliography in a number of styles. To use this capability, you will need:\n\nA quarto document formatted with citations (see Citation Markdown).\nA bibliographic data source, for example a BibTeX (.bib) file.\nOptionally, a CSL file which specifies the formatting to use when generating the citations and bibliography.\n\n\nBibliography Files\nQuarto supports bibliography files in a wide variety of formats including BibTeX and CSL. Add a bibliography to your document using the bibliography YAML metadata field. For example:\n---\ntitle: \"My Document\"\nbibliography: references.bib\n---\n\n\n\n\n\n\nTip\n\n\n\nYou can provide more than one bibliography file if you would like by setting the bibliography field’s value to a YAML array.\n\n\nSee the Pandoc Citations documentation for additional information on bibliography formats.\n\n\nCitation Syntax\nQuarto uses the standard Pandoc markdown representation for citations (e.g. [@citation]) — citations go inside square brackets and are separated by semicolons. Each citation must have a key, composed of ‘@’ + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix. The citation key must begin with a letter, digit, or _, and may contain alphanumerics, _, and internal punctuation characters (:.#$%&-+?<>~/). Here are some examples:\n\n\n\n\n\n\n\nMarkdown Format\nOutput\n\n\n\n\nBlah Blah [see @knuth1984, pp. 33-35;\nalso @wickham2015, chap. 1]\nBlah Blah [see Knuth (1984), pp. 33-35; also Wickham (2015), chap. 1]\n\n\nBlah Blah [@knuth1984, pp. 33-35,\n38-39 and passim]\nBlah Blah [Knuth (1984), pp. 33-35, 38-39 and passim]\n\n\nBlah Blah [@wickham2015; @knuth1984].\nBlah Blah (Wickham 2015; Knuth 1984).\n\n\nWickham says blah [-@wickham2015]\nWickham says blah (2015)\n\n\n\nYou can also write in-text citations, as follows:\n\n\n\n\n\n\n\nMarkdown Format\nOutput\n\n\n\n\n@knuth1984 says blah.\nKnuth (1984) says blah.\n\n\n@knuth1984 [p. 33] says blah.\nKnuth (1984, 33) says blah.\n\n\n\nSee the Pandoc Citations documentation for additional information on citation syntax.\n\n\nCitation Style\nQuarto uses Pandoc to format citations and bibliographies. By default, Pandoc will use the Chicago Manual of Style author-date format, but you can specify a custom formatting using CSL (Citation Style Language). To provide a custom citation stylesheet, provide a path to a CSL file using the csl metadata field in your document, for example:\n---\ntitle: \"My Document\"\nbibliography: references.bib\ncsl: nature.csl\n---\nYou can find CSL files or learn more about using styles at the CSL Project. You can browse the list of more than 8,500 Creative Commons CSL definitions in the CSL Project’s central repository or Zotero’s style repository.\n\n\nBibliography Generation\nPandoc will automatically generate a list of works cited and place it in the document if the style calls for it. It will be placed in a div with the id refs if one exists:\n### References\n\n::: {#refs}\n:::\nIf no such div is found, the works cited list will be placed at the end of the document.\n\n\n\n\n\n\nTip\n\n\n\nYou can suppress generation of a bibliography by including suppress-bibliography: true option in your document metadata\n\n\nHere’s an example of a generated bibliography:\n\n\nKnuth, Donald E. 1984. “Literate Programming.” The Computer Journal 27 (2): 97–111.\n\n\nWickham, Hadley. 2015. R Packages. 1st ed. O’Reilly Media, Inc.\n\n\n\n\nIncluding Uncited Items\nIf you want to include items in the bibliography without actually citing them in the body text, you can define a dummy nocite metadata field and put the citations there:\n---\nnocite: |\n  @item1, @item2\n---\n\n@item3\nIn this example, the document will contain a citation for item3 only, but the bibliography will contain entries for item1, item2, and item3.\nIt is possible to create a bibliography with all the citations, whether or not they appear in the document, by using a wildcard:\n---\nnocite: |\n  @*\n---"
  },
  {
    "href": "docs\\authoring\\footnotes-and-citations.html#footnotes",
    "title": "Citations & Footnotes",
    "section": "Footnotes",
    "text": "Pandoc supports numbering and formatting footnotes using the following syntax:\nHere is a footnote reference,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n\n[^longnote]: Here's one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.\n\n        { some.code }\n\n    The whole paragraph can be indented, or just the first\n    line.  In this way, multi-paragraph footnotes work like\n    multi-paragraph list items.\n\nThis paragraph won't be part of the note, because it\nisn't indented.\n\nOutput\nHere is a footnote reference,1 and another.2\nThis paragraph won’t be part of the note, because it isn’t indented.\nIn addition, you can also write single paragraph footnotes inline using the following syntax:\nHere is an inline note.^[Inlines notes are easier to write,\nsince you don't have to pick an identifier and move down to\ntype the note.]\n\n\nOutput\nHere is an inline note.3\nThe footnotes that are generated from the above examples are included in the following section. See the Pandoc Footnotes for additional information."
  },
  {
    "href": "docs\\authoring\\markdown-basics.html#overview",
    "title": "Markdown Basics",
    "section": "Overview",
    "text": "Quarto is based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber’s Markdown syntax.\nMarkdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read:\n\nA Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. – John Gruber\n\nThis document provides examples of the most commonly used markdown syntax. See the full documentation of Pandoc’s Markdown for more in-depth documentation."
  },
  {
    "href": "docs\\authoring\\markdown-basics.html#text-formatting",
    "title": "Markdown Basics",
    "section": "Text Formatting",
    "text": "Markdown Syntax\nOutput\n\n\n\n\n*italics* and **bold**\nitalics and bold\n\n\nsuperscript^2^ / subscript~2~\nsuperscript2 / subscript2\n\n\n~~strikethrough~~\nstrikethrough\n\n\n`verbatim code`\nverbatim code"
  },
  {
    "href": "docs\\authoring\\markdown-basics.html#headings",
    "title": "Markdown Basics",
    "section": "Headings",
    "text": "Markdown Syntax\nOutput\n\n\n\n\n# Header 1\nHeader 1\n\n\n## Header 2\nHeader 2\n\n\n### Header 3\nHeader 3\n\n\n#### Header 4\nHeader 4\n\n\n##### Header 5\nHeader 5\n\n\n###### Header 6\nHeader 6\n\n\n\n\n.heading-output {\n  border-bottom: none;\n  margin-top: 0;\n  margin-bottom: 0;\n}"
  },
  {
    "href": "docs\\authoring\\markdown-basics.html#links-images",
    "title": "Markdown Basics",
    "section": "Links & Images",
    "text": "Markdown Syntax\nOutput\n\n\n\n\n[Quarto](https://quarto.org)\nQuarto\n\n\n![Caption](elephant.png)\n\n\n\n[![Caption](elephant.png)](https://quarto.org)\n\n\n\n[![Caption](elephant.png)](https://quarto.org \"An elephant\")\n\n\n\n[![](elephant.png){fig-alt=\"Alt text\"}](https://quarto.org)"
  },
  {
    "href": "docs\\authoring\\markdown-basics.html#lists",
    "title": "Markdown Basics",
    "section": "Lists",
    "text": "Markdown Syntax\nOutput\n\n\n\n\n* unordered list\n    + sub-item 1\n    + sub-item 2\n        - sub-sub-item 1\n\nunordered list\n\nsub-item 1\nsub-item 2\n\nsub-sub-item 1\n\n\n\n\n\n*   item 2\n\n    Continued (indent 4 spaces)\n\nitem 2\nContinued (indent 4 spaces)\n\n\n\n1. ordered list\n2. item 2\n    i) sub-item 1\n         A.  sub-sub-item 1\n\nordered list\nitem 2\n\nsub-item 1\n\nsub-sub-item 1\n\n\n\n\n\n(@)  A list whose numbering\n\ncontinues after\n\n(@)  an interruption\n\nA list whose numbering\n\ncontinues after\n\nan interruption\n\n\n\nterm\n: definition\n\nterm\ndefinition"
  },
  {
    "href": "docs\\authoring\\markdown-basics.html#tables",
    "title": "Markdown Basics",
    "section": "Tables",
    "text": "Markdown Syntax\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|   12  |  12  |    12   |    12  |\n|  123  |  123 |   123   |   123  |\n|    1  |    1 |     1   |     1  |\n\n\nOutput\n\n\n\nRight\nLeft\nDefault\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1"
  },
  {
    "href": "docs\\authoring\\markdown-basics.html#equations",
    "title": "Markdown Basics",
    "section": "Equations",
    "text": "Markdown Syntax\nOutput\n\n\n\n\ninline math: $E = mc^{2}$\ninline math: \\(E=mc^{2}\\)\n\n\ndisplay math:\n\n$$E = mc^{2}$$\ndisplay math:\n\\[E = mc^{2}\\]"
  },
  {
    "href": "docs\\authoring\\markdown-basics.html#special-blocks",
    "title": "Markdown Basics",
    "section": "Special Blocks",
    "text": "Markdown Syntax\nOutput\n\n\n\n\n> Blockquote\n\nBlockquote\n\n\n\n::: {.classname}\nDiv\n:::\n\nDiv\n\n\n\n| Line Block\n|   Spaces and newlines\n|   are preserved\nLine Block\n   Spaces and newlines\n   are preserved\n\n\n\n\nSpecial Characters\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\nendash: --\nendash: –\n\n\nemdash: ---\nemdash: —"
  },
  {
    "href": "docs\\authoring\\shortcodes-and-filters.html#shortcodes",
    "title": "Shortcodes & Filters",
    "section": "Shortcodes",
    "text": "Shortcodes are special markdown directives that generate various types of content. Quarto shortcodes are similar in form and function to Hugo shortcodes and WordPress shortcodes.\nQuarto currently supports just two shortcodes: meta and var. Additional shortcodes (e.g. for inserting videos, tweets, gists, etc.) will be developed soon.\n\nmeta\nThe meta shortcode allows you to insert content from Pandoc metadata (e.g. YAML at the top of the document and/or in _quarto.yml).\nFor example, the following shortcode inserts the value of the title field from YAML metadata:\n{{< meta title >}}\nYou can dereference sub-keys using the dot (.) delimiter. For example:\n{{< meta author.affiliation >}}\n\n\nvar\nThe var shortcode enables you to insert content from a project-level _variables.yml file. Create this file alongside your _quarto.yml project file, and then include references to those variables within any document in your project.\nVariables can be either simple values or can include arbitrary markdown content. To define variables, create a _variables.yml file in the root directory of your project. For example:\nversion: 1.2\n\nemail:\n  info: info@example.com\n  support: support@example.com\n\nengine:\n  jupyter: \"[Jupyter](https://jupyter.org)\"\n  knitr: \"[Knitr](<https://yihui.name/knitr>)\"\nNote that the engine variable values include markdown for hyperlinks.\nTo include the value of a variable, use the {{< var >}} shortcode, for example:\nVersion {{< var version >}} is a minor upgrade.\n\nPlease contact us at {{< var email.info >}}.\n\nQuarto includes {{< var engine.jupyter >}} and \n{{< var engine.knitr >}} computation engines.\n\n\nEscaping\nIf you are writing documentation about using shortcodes (for example, this article!) you might need to prevent them from being processed. You can do this in two ways:\n\nEscape the shortcode reference like this:\n{{</* var version */>}}\nAdd a shortcodes=false attribute to any code block you want to prevent processing of shortcodes within:\n```{shortcodes=false}\n{{< var version >}}\n```"
  },
  {
    "href": "docs\\authoring\\shortcodes-and-filters.html#filters",
    "title": "Shortcodes & Filters",
    "section": "Filters",
    "text": "If the base features of Pandoc and Quarto don’t do exactly what you need, you can very likely create a Pandoc Filter that bridges the gap.\nPandoc consists of a set of readers and writers. When converting a document from one format to another, text is parsed by a reader into pandoc’s intermediate representation of the document—an “abstract syntax tree” or AST—which is then converted by the writer into the target format. The pandoc AST format is defined in the module Text.Pandoc.Definition in the pandoc-types package.\nA “filter” is a program that modifies the AST, between the reader and the writer.\nINPUT --reader--> AST --filter--> AST --writer--> OUTPUT\nPandoc’s built-in citation processing is implemented as a filter, as are many of Quarto’s extensions (e.g. cross-references, figure layout, etc.). Some other examples include:\n\n\n\n\n\n\n\nFilter\nDescription\n\n\n\n\ninclude-files\nFilter to include other files in the document.\n\n\ninclude-code-files\nFilter to include code from source files.\n\n\npagebreak\nConverts paragraps containing only the LaTeX \\newpage or \\pagebreak command into appropriate pagebreak markup for other formats.\n\n\n\n\nUsing Filters\nAdd one or more filters to document rendering using the filters option. For example:\nfilters:\n   - include-files.lua\n   - pagebreak.lua\nBy default, user filters are run before Quarto’s built-in filters. If you prefer to control the order of filters visa-vi Quarto just include quarto explicitly as a filter. For example, to run include-files.lua before Quarto filters and pagebreak.lua after, use this:\nfilters:\n  - include-files.lua\n  - quarto\n  - pagebreak.lua\n\n\nWriting Filters\nYou can write Pandoc filters using Lua (via Pandoc’s built-in Lua interpreter) or using any other language using a JSON representation of the Pandoc AST piped to/from an external process.\nWe strongly recommend using Lua Filters, which have the following advantages:\n\nNo external dependencies\nHigh performance (no serialization or process execution overhead)\nAccess to Pandoc’s library of Lua helper functions.\n\nSee the documentation on Writing Lua Filters for additional details.\nIf you want to write a JSON filter, see the documentation on Writing JSON filters."
  },
  {
    "href": "docs\\authoring\\shortcodes-and-filters.html#includes",
    "title": "Shortcodes & Filters",
    "section": "Includes",
    "text": "The include-files filter is a convenient way to re-use markdown content within a project. You can make this filter available by downloading it from the site linked to above, copying it into your project directory, then adding it as a filter within _quarto.yml as follows:\nfilters:\n  - include-files.lua\nTo include a file named _common.md you would use this markdown:\n```{.include}\n_common.md\n```\nYou can also include multiple files:\n```{.include}\n_common.md\n_download.md\n```\nIn the examples above the names of included files are prefaced with an underscore. You should always use an underscore prefix with included files so that they are automatically ignored (i.e. not treated as standalone files) by a quarto render of your project."
  },
  {
    "href": "docs\\books\\index.html#overview",
    "title": "Creating a Book",
    "section": "Overview",
    "text": "Quarto Books are combinations of multiple documents (chapters) into a single manuscript. Books can be created in a variety of formats:\n\nHTML\nPDF\nMS Word\nEPUB\n\nHTML books are actually just a special type of Quarto Website and consequently support all of the same features as websites including full-text search. The most important difference is that HTML books use chapter numbers and therefore support Cross References between different chapters.\nHere are some examples of books created with Quarto:\n\n\n\nBook\nSource\n\n\n\n\nHands on Programming with R\nCode\n\n\nVisualization Curriculum\nCode"
  },
  {
    "href": "docs\\books\\index.html#getting-started",
    "title": "Creating a Book",
    "section": "Getting Started",
    "text": "To create a new book project, use the Quarto create-project command:\nquarto create-project mybook --type book\nThis will create the scaffolding for a simple book in the mybook sub-directory. To build and view the HTML version of the book use the serve command:\ncd mybook\nquarto serve\nThis will build the HTML version of the book and run a local web server to view it. Here’s what you’ll see in your browser for the simple book scaffolding:\n\nThe book’s chapters are contained in the files index.md, introduction.md, summary.md. Try adding some content to one of these files and saving—you’ll notice that the book preview is automatically updated in the browser.\nYou’ll also notice that a Quarto project file (_quarto.yml) was created in the mybook directory. This file contains the initial configuration for your book:\nproject:\n  type: book\n\nbook:\n  title: \"mybook\"\n  author: \"Jane Doe\"\n  date: \"8/18/2021\"\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - summary.qmd\n    - references.qmd\n\nbibliography: references.bib\n\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: scrreport\n  epub:\n    cover-image: cover.png\n\nRStudio\nIf you are using RStudio you can also create a Quarto book via the New Project command:\n\nRender chapters within the book using the Render command, render the entire book using the Render Book command on the Build tab."
  },
  {
    "href": "docs\\books\\index.html#workflow",
    "title": "Creating a Book",
    "section": "Workflow",
    "text": "Development\nWhen working on a book, you’ll typically run the local development server as described above and incrementally preview content as you work:\nquarto serve\nIf you are authoring within RStudio, you can run the development server within the RStudio Viewer pane using the Server Book command on the Build Tab.\nIf you have a plain markdown file (with no computations) or a Jupyter notebook, then saving it will cause the preview to automatically update (as will changes to config files, CSS files, etc.). If you are working on a file with computations (i.e. a .qmd file using the Knitr or Jupyter engine) then you need to explicitly re-render it to update the preview.\nNote that development server updates do not cause an update to the final book output. Consequently, you should always quarto render your site before deploying it as described below in Publishing.\n\n\nPublishing\nWhen you are ready to publish the book, use the render command to render all output formats:\nquarto render --to all\nIf you pass no arguments to quarto render the default format (HTML) will be rendered. You can also render individual formats via the --to argument:\nquarto render           # render default format (HTML)\nquarto render --to pdf  # render PDF format only\nThe output of your book will be written to the _book sub-directory of your book project:\nmybook/\n  _book/\n    index.html # and other website files\n    mybook.pdf\n    mybook.epub\nSee the documentation on Publishing Websites for details on how to publish books to GitHub Pages, Netlify, and other services. Note that in that documentation the output-dir may be referred to as _site: for publishing books you should use _book rather than _site."
  },
  {
    "href": "docs\\books\\index.html#learning-more",
    "title": "Creating a Book",
    "section": "Learning More",
    "text": "Once you’ve got the basic book template up and running check out these articles for various ways to enhance your book:\nBook Structure delves into different ways to structure a book (numbered and unnumbered chapters/sections, creating multiple parts, adding appendices, etc.)\nBook Crossrefs explains how to create cross references to sections, figures, tables, equations and more within books.\nBook Output covers customizing the style and appearance of your book in the various output format as well as how to provide navigation and other tools for readers.\nCode Execution provides tips for optimizing the rendering of books with large numbers of documents or expensive computations.\nPublishing Websites enumerates the various options for publishing your book as a website including GitHub Pages, Netlify, Google Firebase, and RStudio Connect."
  },
  {
    "href": "docs\\books\\book-crossrefs.html#overview",
    "title": "Book Crossrefs",
    "section": "Overview",
    "text": "One important difference between creating a website and a book is that in addition to their web output, books can also be rendered as a single continuous document (e.g a PDF or MS Word document). Books also may or may not be read digitally (which means that internal hyperlinks may or may not be available).\nTo create books that are consumable in all of these mediums, special care should be taken when creating links to other chapters or sections within chapters (note though that if your book targets only HTML output you can feel free to use conventional hyperlinks).\nQuarto cross references provide automatic numbering and reference creation for figures, tables, equations, sections, listings, theorems, and proofs. In books, cross references work the same way except they can reach across chapters.\nIf you aren’t already familiar with using crossrefs you may want to read the documentation on cross references before reading on about how they work with books."
  },
  {
    "href": "docs\\books\\book-crossrefs.html#creating-references",
    "title": "Book Crossrefs",
    "section": "Creating References",
    "text": "To reference a figure, table, or other cross-referenceable entity, use the @ syntax (similar to citations) along with the ID / label of the entity you are referencing: For example:\nSee @fig-penginus-by-island for a breakdown by island.\nReferences made this way will be automatically resolved across chapters (including the requisite chapter number in the reference).\nTo make a chapter or section reference-able, you add a #sec id to its main heading. For example:\n# Introduction {#sec:introduction}\nTo refer to a section, include a cross-reference to it using an @ identifier as we did above in the figure example:\nSee @sec:introduction for additional discussion.\nTo refer to a chapter or appendix explicitly you should spell out “Chapter” or “Appendix” and use the number-only form of cross reference:\nSee [Chapter -@sec:visualization] for more details on visualizing model diagnostics."
  },
  {
    "href": "docs\\books\\book-crossrefs.html#section-numbers",
    "title": "Book Crossrefs",
    "section": "Section Numbers",
    "text": "By default, all headings in your document create a numbered section. You customize numbering depth using the number-depth option. For example, to only number sections immediately below the chapter level, use this:\nnumber-depth: 1\nNote that toc-depth is independent of number-depth (i.e. you can have unnumbered entries in the TOC if they are masked out from numbering by number-depth)."
  },
  {
    "href": "docs\\books\\book-crossrefs.html#chapter-numbering",
    "title": "Book Crossrefs",
    "section": "Chapter Numbering",
    "text": "In books, figures, tables and other cross-reference targets automatically include a chapter number. For example, the following markdown located in Chapter 3 of your book:\nAs illustrated in @fig:geo-comparison, the western states have a much higher incidence of forest fires.\nMight be rendered as:\n\nAs illustrated in fig. 3.2, the western states have a much higher incidence of forest fires.\n\nNote that while books do support unnumbered chapters, you naturally cannot create cross-references to content in chapters without numbers."
  },
  {
    "href": "docs\\books\\book-crossrefs.html#hyperlinks",
    "title": "Book Crossrefs",
    "section": "Hyperlinks",
    "text": "If you are creating an HTML-only book (or a PDF / MS Word book that you don’t expect will be printed) then you can feel free to use normal hyperlinks rather than section cross-references.\nTo create a hyperlink within a book, provide the source file as the link target. You can also add hash identifiers (#) to the source file if you want to link to a particular section in the document. For example:\n[about](about.qmd)\n[about](about.qmd#section)\nUsing the source file as the link target ensures that links will be resolved correctly both for HTML output and for formats that produce a single file (e.g. PDF or MS Word).\nNote that if you are targeting printed output for your book you should use explicit cross references to other chapters and sections rather than simple links as shown above. This is because In printed output links aren’t navigable so you need to provide readers with numbered references (e.g. “sec. 5.3”) rather than hyperlinks."
  },
  {
    "href": "docs\\books\\book-output.html#format-options",
    "title": "Book Output",
    "section": "Format Options",
    "text": "If you want to specify rendering options (including format-specific options), you do it within the _quarto.yml project file rather than within the individual markdown documents. This is because when rendering a book all of the chapters are combined together into a single document (with a single set of format options).\nHere’s an example configuration:\nhighlight-style: pygments\n\nformat:\n  html:\n    theme: cosmo\n    code-copy: true\n  pdf: default\n    \nbibliography: references.bib\ncsl: citestyle.csl\nNote that in the above configuration the highlight-style option applies to all formats whereas the html options apply to only HTML output. The bibliography related options naturally also apply to all formats."
  },
  {
    "href": "docs\\books\\book-output.html#reader-tools",
    "title": "Book Output",
    "section": "Reader Tools",
    "text": "Sidebar Tools\nBooks automatically include a navigational sidebar that can optionally include tools for searching book contents, sharing links to the book, etc. Here is an example _quarto.yml file that enables these options:\nbook:\n  title: \"Hands-On Programming with R\"\n  author: \"Garrett Grolemund\"\n  search: true\n  repo-url: https://github.com/jjallaire/hopr/\n  repo-actions: [edit]\n  downloads: [pdf, epub]\n  sharing: [twitter, facebook]\n  \ncomments:\n  hypothesis: true\nNote the various tools that now appear:\n\n\nThe search box enables full text search of the entire book\nThe buttons immediately below the book title in the sidebar provide a link to the GitHub repo for the book, downloads for PDF and ePub versions of the book, and links for sharing the book on Twitter and Facebook.\nImmediately below the table of contents on the right there is an “Edit this page” link that takes the reader to the edit interface on GitHub for the current chapter. Note that in this example we specify repo-actions: [edit]. You can optionally also add issue and source actions (e.g. repo-actions: [edit, issue, source]).\nThe Hypothesis commenting bar appears on the far right of the page. Note that commenting is a feature available for all Quarto HTML output so appears in its own YAML key.\n\n\nSidebar Options\nNote that books utilize the standard sidebar component from Quarto Websites. This means that you can use any of the available sidebar options within your book configuration. For example, here we specify a docked sidebar with a light background:\nbook:\n  title: \"Hands-On Programming with R\"\n  author: \"Garrett Grolemund\"\n  sidebar:\n    style: docked\n    background: light"
  },
  {
    "href": "docs\\books\\book-output.html#cover-images",
    "title": "Book Output",
    "section": "Cover Images",
    "text": "You can provide a cover image for EPUB and/or HTML formats using the cover-image option. For example:\nbook:\n  cover-image: cover.png\nYou can also do this on a per-format basis (if for example you want to provide a higher resolution image for EPUB and a lower resolution image for HTML to reduce download time). For example:\nformat:\n   html: \n     cover-image: cover.png\n   epub:\n     cover-image: cover-highres.png"
  },
  {
    "href": "docs\\books\\book-output.html#output-path",
    "title": "Book Output",
    "section": "Output Path",
    "text": "By default, book output is written to the _book directory of your project. You can change this via the output-dir project option. For example:\nproject:\n  type: book\n  output-dir: docs\nSingle file outputs like PDF, EPUB, etc. are also written to the output-dir. Their file name is derived from the book title. You can change this via the output-file option:\nbook:\n  title: \"My Book\"\n  output-file: \"my-book\"\nNote that the output-file should not have a file extension (that will be provided automatically as appropriate for each format)."
  },
  {
    "href": "docs\\books\\book-output.html#latex-output",
    "title": "Book Output",
    "section": "LaTeX Output",
    "text": "In some cases you’ll want to do customization of the LaTeX output before creating the final printed manuscript (e.g. to affect how text flows between pages or within and around figures). The best way to approach this is to develop your book all the way to completion, then render with the keep-tex option:\nformat:\n  pdf:\n    keep-tex: true\nThe complete LaTeX source code of your book will be output into the main book source directory (e.g. to “my-book.tex”). This LaTeX can be compiled without Quarto, so is suitable for submitting to an external publisher.\nAt this point you should probably make a copy or git branch of the book directory to perform your final LaTeX modifications within (since the modifications you make to LaTeX will not be preserved in your markdown source, and will therefore be overwritten the next time you render)."
  },
  {
    "href": "docs\\books\\book-output.html#html-styles",
    "title": "Book Output",
    "section": "HTML Styles",
    "text": "HTML output can be customized either by adding (or enhancing) a custom theme, or by providing an ordinary CSS file. Use the theme option to specify a theme:\nformat:\n  html:\n    theme: cosmo\nTo further customize a theme add a custom theme file:\nformat:\n  html:\n    theme: [cosmo, theme.scss]\nYou can learn more about creating theme files in the documentation on HTML Themes.\nYou can also just use plain CSS. For example:\nformat:\n  html:\n    css: styles.css"
  },
  {
    "href": "docs\\books\\book-output.html#epub-styles",
    "title": "Book Output",
    "section": "EPUB Styles",
    "text": "You can also use CSS to customize EPUB output:\nformat:\n  epub:\n    css: epub-styles.css\n    epub-cover-image: epub-cover.png\nNote that we also specify a cover image. To learn more about other EPUB options, see the Pandoc documentation on EPUBs."
  },
  {
    "href": "docs\\books\\book-output.html#pdf-styles",
    "title": "Book Output",
    "section": "PDF Styles",
    "text": "You can include additional LaTeX directives in the preamble of your book using the include-in-header option. You can also add documentclass and other options (see the Pandoc documentation on LaTeX options for additional details). For example:\nformat:\n  pdf: \n    documentclass: scrbook\n    include-in-header: preamble.tex\n    fontfamily: libertinus\nQuarto uses the KOMA Script scrreprt document class by default for PDF books. KOMA-Script classes are drop-in replacements for the standard classes with an emphasis on typography and versatility.\nYou can switch to KOMA scrbook as demonstrated above, or to the standard LaTeX book and report classes. You can find a summary of the differences between book and report here: https://tex.stackexchange.com/questions/36988"
  },
  {
    "href": "docs\\books\\book-output.html#ms-word-styles",
    "title": "Book Output",
    "section": "MS Word Styles",
    "text": "You can customize MS Word output by creating a new reference doc, and then applying it to your book as follows:\nformat:\n  docx:\n    reference-doc: custom-reference.docx\nTo create a new reference doc based on the Pandoc default, execute the following command:\nquarto pandoc -o custom-reference.docx --print-default-data-file reference.docx\nThen, open custom-reference.docx in MS Word and modify styles as you wish:\n\n\n\nYou can open the Styles pane from the HOME tab in the MS Word toolbar.\n\n\nWhen you move the cursor to a specific element in the document, an item in the styles list will be highlighted. If you want to modify the style of any type of element, you can click the drop-down menu on the highlighted item, and you will see a dialog box like this:\n\nAfter you finish modifying the styles, you can save the document and use it as the template for future Word documents."
  },
  {
    "href": "docs\\books\\book-structure.html#overview",
    "title": "Book Structure",
    "section": "Overview",
    "text": "The structure of a Quarto book can be as simple as a list of chapters, or can alternatively incorporate multiple parts and/or appendices. Quarto book chapters and sections are automatically numbered (for cross-referencing), however you can also specify that some parts of the book should remain unnumbered.\nThe simple book configuration generated by quarto create-project illustrates the basics:\nbook:\n  title: \"mybook\"\n  author: \"Jane Doe\"\n  date: \"5/9/2021\"\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - summary.qmd\n    - references.qmd\n\nThe index file is required and includes preface, acknowledgements, etc. Headings in the index file are unnumbered by default.\nThe remainder of chapters includes one or more book chapters.\nThe references.md file will include the generated bibliography (see References below for details)."
  },
  {
    "href": "docs\\books\\book-structure.html#titles",
    "title": "Book Structure",
    "section": "Titles",
    "text": "Since rendering options are provided in _quarto.yml, you’ll typically see a simple level-one header at the top of chapters. For example:\n# Introduction\nNote that the following is also still perfectly valid:\n---\ntitle: \"Introduction\"\n---"
  },
  {
    "href": "docs\\books\\book-structure.html#chapter-numbers",
    "title": "Book Structure",
    "section": "Chapter Numbers",
    "text": "All chapters are numbered by default. If you want a chapter to be unnumbered simply add the .unnumbered class to its main header. For example:\n# Resources {.unnumbered}\nYou can mix together numbered and unnumbered chapters. Note however that while you can link to unnumbered chapters, you can’t cross reference figures, tables, etc. within them. Unnumbered chapters are therefore mostly useful for prefatory content or references at the end of your book."
  },
  {
    "href": "docs\\books\\book-structure.html#section-numbers",
    "title": "Book Structure",
    "section": "Section Numbers",
    "text": "You can set the numbering depth via the number-depth option. For example, to only number sections immediately below the chapter level, use this:\nnumber-depth: 1\nNote that toc-depth is independent of number-depth (i.e. you can have unnumbered entries in the TOC if they are masked out from numbering by number-depth)."
  },
  {
    "href": "docs\\books\\book-structure.html#references",
    "title": "Book Structure",
    "section": "References",
    "text": "You should include a div with the id #refs at the location in your book where you’d like the bibliography to be generated. For example the references.md file generated by quarto create-project includes this:\n# References {.unnumbered}\n\n::: {#refs}\n:::\nNote that you can change the chapter title to whatever your like, remove .unnumbered to have it be numbered like other chapters, and add other content before or after the bibliography as necessary."
  },
  {
    "href": "docs\\books\\book-structure.html#parts-appendices",
    "title": "Book Structure",
    "section": "Parts & Appendices",
    "text": "You can divide your book into parts using part within the book chapters. For example:\nchapters:\n  - index.qmd\n  - preface.qmd\n  - part: dice.qmd\n    chapters: \n      - basics.qmd\n      - packages.qmd\n  - part: cards.qmd\n    chapters:\n      - objects.qmd\n      - notation.qmd\n      - modifying.qmd\n      - environments.qmd\nNote that the markdown files dice.qmd and cards.qmd contain the part title (as a level one header) as well as some introductory content for the part. If you just need a part title then you can alternatively use this syntax:\n- part: \"Dice\"\n  chapters: \n    - basics.qmd\n    - packages.qmd\nYou can include appendices by adding an appendices key to your book config. For example:\nbook:\n  title: \"mybook\"\n  author: \"Jane Doe\"\n  date: \"5/9/2021\"\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - summary.qmd\n    - references.qmd\n  appendices:\n    - tools.qmd\n    - resources.qmd\n  \nParts and appendices show up like this in HTML output:\n\nIn LaTeX output, the \\part command is used for parts. In EPUB and MS Word output parts are ignored entirely.\nAppendices are numbering using uppercase alpha, and have a prefix inserted into their title to indicate they are an appendix (e.g. “Appendix A — Additional Resources”). You can customize the prefix and delimiter using the following options:\ncrossref:\n  appendix-title: \"App.\"\n  appendix-delim: \":\"\nWhich would result in the above example being output as: “App. A: Additional Resources.”"
  },
  {
    "href": "docs\\books\\book-structure.html#page-navigation",
    "title": "Book Structure",
    "section": "Page Navigation",
    "text": "If you have a book with several pages in a section or subsection, it is often convenient to offer the user the ability to navigate to the next page (or previous page) at the bottom of the page that they’ve just finished reading. You can enable this using:\nbook:\n  page-navigation: true\nWhen enabled, page navigation will be displayed at the bottom of the page whenever there is a next or previous page (including in the next or previous section). This option is enabled by default for books but not for websites."
  },
  {
    "href": "docs\\books\\book-structure.html#page-footer",
    "title": "Book Structure",
    "section": "Page Footer",
    "text": "Use the footer option to provide a common footer for all of the pages in a book. The simplest footer just provides text that will be centered and displayed in a lighter typeface:\nbook:\n  footer: \"Copyright 2021, Norah Jones\" \nYou can alternatively target the left, right, and center regions of the footer individually:\nbook:\n  footer: \n    left: \"Copyright 2021, Norah Jones\" \n    right: \n      - icon: github\n        href: https://github.com/\n      - icon: twitter \n        href: https://twitter.com/ \nNote for the right region of the footer we included navigational items for GitHub and Twitter rather than text. You can include navigational items in any region of the footer.\nYou can use the background and border options to further control the appearance of the footer. By default, the footer has no background color and a top border. To eliminate the border you would do this:\nbook:\n  border: false\nTo use a light background (e.g. to match a navigation bar) you would do this:\nbook:\n  background: light"
  },
  {
    "href": "docs\\computations\\execution-options.html#output-options",
    "title": "Execution Options",
    "section": "Output Options",
    "text": "There are a wide variety of options available for customizing output from executed code. All of these options can be specified either globally (in the document front-matter) or per code-block. For example, here’s a modification of the Python example to specify that we don’t want to “echo” the code into the output document:\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\njupyter: python3\n---\nNote that we can override this option on a per code-block basis. For example:\n```{python}\n#| echo: true\n\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n```\nCode block options are included in a special comment at the top of the block (lines at the top prefaced with #| are considered options).\nOptions available for customizing output include:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\neval\nEvaluate the code chunk (if false, just echos the code into the output).\n\n\necho\nInclude the source code in output\n\n\noutput\nInclude the results of executing the code in the output\n\n\nwarning\nInclude warnings in the output.\n\n\nerror\nInclude errors in the output (note that this implies that errors executing code will not halt processing of the document).\n\n\ninclude\nCatch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).\n\n\n\nHere’s a Knitr example with some of these additional options included:\n---\ntitle: \"Knitr Document\"\nexecute:\n  echo: false\n---\n\n```{r}\n#| warning: false\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n```\n\n```{r}\nsummary(airquality)\n```\n\n\n\n\n\n\nTip\n\n\n\nWhen using the Knitr engine, you can also use any of the available native options (e.g. collapse, tidy, comment, etc.). See the Knitr options documentation for additional details. You can include these native options in option comment blocks as shown above, or on the same line as the {r} as shown in the Knitr documentation."
  },
  {
    "href": "docs\\computations\\execution-options.html#figure-options",
    "title": "Execution Options",
    "section": "Figure Options",
    "text": "There are a number of ways to control the default width and height of figures generated from code. First, it’s important to know that Quarto sets a default width and height for figures appropriate to the target output format. Here are the defaults (expressed in inches):\n\n\n\nFormat\nDefault\n\n\n\n\nDefault\n7 x 5\n\n\nHTML Slides\n9.5 x 6.5\n\n\nHTML Slides (reveal.js)\n9 x 5\n\n\nPDF\n6.5 x 4.5\n\n\nPDF Slides (Beamer)\n10 x 7\n\n\nPowerPoint\n7.5 x 5.5\n\n\nMS Word, ODT, RTF\n5 x 4\n\n\nEPUB\n5 x 4\n\n\nHugo\n8 x 5\n\n\n\nThese defaults were chosen to provide attractive well proportioned figures, but feel free to experiment to see whether you prefer another default size. You can change the default sizes using the fig-width and fig-height options. For example:\n---\ntitle: \"My Document\"\nformat: \n  html:\n    fig-width: 8\n    fig-height: 6\n  pdf:\n    fig-width: 7\n    fig-height: 5\n---\nHow do these sizes make their way into the engine-level defaults for generating figures? This differs by engine:\n\nFor the Knitr engine, these values become the default values for the fig.width and fig.height chunk options. You can override these default values via chunk level options.\nFor the Jupyter engine, these values are used to set the Matplotlib figure.figsize rcParam (you can of course manually override these defaults for any given plot).\nIf you are using another graphics library with Jupyter and want to utilize these values, you can read them from QUARTO_FIG_WIDTH and QUARTO_FIG_HEIGHT environment variables.\n\n\nCaption and Alt Text\nYou can specify the caption and alt text for figures generated from code using the fig-cap and fig-alt options. For example, here we add these options to a Python code cell that creates a plot:\n```{python}\n#| fig-cap: \"Polar axis plot\"\n#| fig-alt: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```"
  },
  {
    "href": "docs\\computations\\execution-options.html#intermediates",
    "title": "Execution Options",
    "section": "Intermediates",
    "text": "On the way from markdown input to final output, there are some intermediate files that are created and automatically deleted at the end of rendering. You can use the following options to keep these intermediate files:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nkeep-md\nKeep the markdown file generated by executing code.\n\n\nkeep-ipynb\nKeep the notebook file generated from executing code (applicable only to markdown input files)\n\n\n\nFor example, here we specify that we want to keep both the markdown intermediate file after rendering:\n---\ntitle: \"My Document\"\nexecute:\n  keep-md: true\njupyter: python3\n---"
  },
  {
    "href": "docs\\computations\\execution-options.html#engine-options",
    "title": "Execution Options",
    "section": "Engine Options",
    "text": "Caching\nQuarto integrates with the Jupyter Cache and Knitr Cache to to cache time consuming code chunks. Note that to use Jupyter Cache you’ll want to install the jupyter-cache package:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m pip install jupyter-cache\n\n\nMac/Linux\npython3 -m pip install jupyter-cache\n\n\n\nTo enable caching for a document just add the cache option:\nexecute: \n  cache: true\nYou can also use `quarto` command line options to control caching behavior without changing the document’s code. Use options to force the use of caching on all chunks, disable the use of caching on all chunks (even if it’s specified in options), or to force a refresh of the cache even if it has not been invalidated:\nquarto render example.qmd --cache \nquarto render example.qmd --no-cache \nquarto render example.qmd --cache-refresh \nNote that for Jupyter, the cache for a document is invalidated if any of the code blocks change. For Knitr, invalidation occurs on a per-cell basis.\n\n\nDisabling Execution\nIn some cases, you may want to prevent execution entirely. This is especially useful if you author using a standard notebook editor (e.g. JupyterLab) and plan on executing chunks only within the notebook UI. Specify execute: false to skip execution when rendering (you’ll naturally still get the output that was generated within the notebook editor):\nexecute: false\nIf you are temporarily disabling execution and don’t want to overwrite other execute options, you can alternatively just add enabled: false to the execute options:\nexecute:\n  enabled: false\n  echo: true\n  warning: false\nYou might want to have different execution policies for Jupyter Notebooks (.ipynb) and text-based computational markdown (.qmd). You can do this using the ipynb option:\nexecute:\n  ipynb: false\nYou might use this option if you are implementing of policy of having all notebook execution occur within Jupyter / JupyterLab, while having Quarto still handle converting the notebook to HTML, PDF, etc.\n\n\nJupyter Kernel\nThe Jupyter kernel is determined using the jupyter metdata option. For example, to use the Xeus Python kernel, do this:\n---\ntitle: \"My Document\"\njupyter: xpython\n---\nNote that you can also provide a full kerenlspec, for example:\n---\ntitle: \"My Document\"\njupyter: \n  kernelspec:\n    name: \"xpython\"\n    language: \"python\"\n    display_name: \"Python 3.7 (XPython)\"\n---\nIf no Jupyter kernel is specified, then the kernel is determined by finding an available kernel that supports the language of the first executable code block found within the file (e.g. ```{python}).\n\n\nJupyter Daemon\nTo mitigate the ~ 2 second start-up time for the Jupyter Python kernel (and potentially much longer start-up times for other kernels), Quarto keeps a daemon with a running Jupyter kernel alive for each document. This enables subsequent renders to proceed immediately without having to wait for kernel start-up.\nThe purpose of the daemon is to make render more responsive during interactive sessions. Accordingly, no daemon is created when documents are rendered without an active tty or when they are part of a batch rendering (e.g. in a Quarto Project).\n\n\n\n\n\n\nNote\n\n\n\nNote that Quarto does not use a daemon by default on Windows (as some Windows systems will not allow the socket connection required by the daemon).\n\n\nYou can customize this behavior using the daemon execution option. Set it to false to prevent the use of a daemon, or set it to a value (in seconds) to determine the period after which the daemon will timeout (the default is 300 seconds). For example:\nexecute:\n  daemon: false\nexecute:\n  daemon: 60\nNote that if you want to use a daemon on Windows you need to enable it explicitly:\nexecute:\n  daemon: true\n\nCommand Line\nYou can also control use of the Jupyter daemon using the following command line options:\n# use a daemon w/ default timeout (300 sec)\nquarto render document.qmd --execute-daemon\n\n# use a daemon w/ an explicit timeout\nquarto render document.qmd --execute-daemon 60\n\n# prevent use of a daemon\nquarto render document.qmd --no-execute-daemon\nYou can also force an existing daemon to restart using the --execute-daemon-restart command line flag:\nquarto render document.qmd --execute-daemon-restart \nThis might be useful if you suspect that the re-use of notebook sessions is causing an error.\nFinally, you can print extended debugging information about daemon usage (startup, shutdown, connections, etc.) using the --execute-debug flag:\nquarto render document.qmd --execute-debug"
  },
  {
    "href": "docs\\computations\\parameters.html#overview",
    "title": "Parameters",
    "section": "Overview",
    "text": "You may have a set of parameters that are used to create different variations of a report. For example:\n\nShowing results for a specific geographic location.\nRunning a report that covers a specific time period.\nRunning a single analysis multiple times for different assumptions.\n\nThis article describes how to define and use computational parameters with Quarto."
  },
  {
    "href": "docs\\computations\\parameters.html#definition",
    "title": "Parameters",
    "section": "Definition",
    "text": "Adding parameter definitions to a document works differently depending on whether you are using the Jupyter or Knitr engine.\n\nJuypter\nFor Jupyter, Quarto uses the same syntax for defining parameters as Papermill. To parameterize a notebook, designate a cell with the tag parameters and provide appropriate default values:\n```{python}\n#| tags: [parameters]\n\nalpha = 0.1\nratio = 0.1\n```\nWhen the notebook is executed with a set of new parameters a cell is injected which overrides these defaults as appropriate.\n\n\nKnitr\nFor Knitr, the standard Knitr params YAML option is used to define parameters. For example:\n---\ntitle: \"My Document\"\nparams:\n  alpha: 0.1\n  ratio: 0.1\n---"
  },
  {
    "href": "docs\\computations\\parameters.html#rendering",
    "title": "Parameters",
    "section": "Rendering",
    "text": "To render using different parameters you can pass them on the command line using the -P flag:\nquarto render notebook.ipynb -P alpha:0.2 -P ratio:0.3\nAlternatively you can create a YAML file that defines the parameter values you want to render with, then call quarto render with the --execute-params flag:\nquarto render notebook.ipynb --execute-params params.yml"
  },
  {
    "href": "docs\\computations\\running-code.html#overview",
    "title": "Running Code",
    "section": "Overview",
    "text": "Quarto supports executable code blocks within markdown. This allows you to create fully reproducible documents and reports—the code required to produce your output is part of the document itself, and is automatically re-run whenever the document is rendered.\nThere are currently two engines supported for running computations:\n\nJupyter, for running code from Python and many other languages.\nKnitr, for running code from R.\n\nExtensive customization of code chunk output is supported, including the ability to hide code and/or output as well as fold code (make it visible only on demand)."
  },
  {
    "href": "docs\\computations\\running-code.html#code-blocks",
    "title": "Running Code",
    "section": "Code Blocks",
    "text": "Code blocks that use braces around the language name (e.g. ```{python}) are executable, and will be run by Quarto during render. Here are a couple of simple examples in Python and R to illustrate (the output produced by the code block is shown on the Output tab):\n\nPython (Jupyter)\n\nCodeOutput\n\n\n---\ntitle: \"Jupyter Document\"\nformat: \n  html:\n    code-background: true\njupyter: python3\n---\n\n```{python}\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n```\n\n```{python}\nimport pandas as pd\nd = {'one' : [1., 2., 3., 4.],\n     'two' : [4., 3., 2., 1.]}\ndf = pd.DataFrame(d)\ndf\n```\n\n\n\n\n\n\nNote that we added the code-background: true option to provide a background color for the code chunks (see the documentation on Code Block options for additional details on customizing code block output).\n\n\nR (Knitr)\n\nCodeOutput\n\n\n---\ntitle: \"Knitr Document\"\nformat: \n  html:\n    code-background: true\nexecute:\n  warning: false\n---\n\n```{r}\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n```\n\n```{r}\nsummary(airquality)\n```\n\n\n\n\n\n\nNote that we added the execute: warning: false option to suppress printing of warnings. See Execution Options for additional details.\nYou can produce a wide variety of output types from executable code blocks, including:\n\nStatic plots (e.g. from matplotlib or ggplot2).\nInteractive plots (e.g. from plotly or leaflet).\nTabular output (e.g. from printing R or Pandas data frames)\nPlain text output (e.g. printing the results of statistical summaries).\n\n\n\nNon-Executable Blocks\nNote that code blocks that use conventional markdown code block syntax (either ```python or ```{.python}) are not executable:\n\n\n\n\n\n\n\nCode Block Syntax\nExecutable?\n\n\n\n\n```{python}\n1 + 1\n```\nYes\n\n\n```python\n1 + 1\n```\nNo\n\n\n```{.python}\n1 + 1\n```\nNo\n\n\n\nNon-executable code blocks are printed but not executed.\n\n\nEscaping\nIf you need to write about executable code blocks (e.g. a Quarto tutorial like this one) without the blocks themselves becoming executable, use two curly braces rather than one:\n```{{python}}\nThis will be output into the document as:\n```{python}"
  },
  {
    "href": "docs\\computations\\running-code.html#rendering",
    "title": "Running Code",
    "section": "Rendering",
    "text": "Markdown\nQuarto will automatically run computations in any markdown document that contains executable code blocks. For example, the Python example shown above might be rendered with:\nquarto render jupyter-document.qmd\nThe R example might have been rendered with:\nquarto render knitr-document.qmd\n\n\nNotebooks\nThe Python example above uses a markdown input file, Quarto can also render any Jupyter notebook (.ipynb):\nquarto render jupyter-document.ipynb\nNote that when rendering an .ipynb Quarto will not execute the cells within the notebook by default (the presumption being that you already executed them while editing the notebook). If you want to execute the cells you can pass the --execute flag to render:\nquarto render jupyter-document.ipynb --execute\nYou can also specify this behavior within the notebook’s YAML front matter:\n---\ntitle: \"My Document\"\nexecute: true\njupyter: python3\n---"
  },
  {
    "href": "docs\\computations\\running-code.html#inline-code",
    "title": "Running Code",
    "section": "Inline Code",
    "text": "Both Jupyter and Knitr support executing inline code within markdown (e.g. to allow narrative to automatically use the most up to date computations). The syntax for this varies across the engines.\n\nJupyter\nTo include executable expressions within markdown in a Jupyter notebook, you use IPython.display.Markdown to dynamically generate markdown from within an ordinary code cell. For example, if we have a variable radius we can use it within markdown as follows:\n```{python}\n#| echo: false\n\nfrom IPython.display import Markdown\nMarkdown(\"\"\"\n## Circle\n\nThe radius of the circle is {radius}.\n\"\"\".format(radius = radius))\n```\nNote that we also include the echo: false option to ensure that the code used to generate markdown isn’t included in the final output.\n\n\nKnitr\nTo include executable expressions within markdown for Knitr, enclose the expression in `r `. For example, if we have a variable radius we can use it within markdown as follows:\n## Circle\n\nThe radius of the circle is `r radius`."
  },
  {
    "href": "docs\\computations\\running-code.html#engine-binding",
    "title": "Running Code",
    "section": "Engine Binding",
    "text": "Earlier we said that the engine used for computations was determined automatically. You may want to customize this—for example you may want to use the Jupyter R kernel rather than Knitr, or you may want to use Knitr with Python code (via reticulate).\nHere are the basic rules for automatic binding:\n\n\n\n\n\n\n\nExtension\nEngine Binding\n\n\n\n\n.qmd\nUse Knitr engine if an {r} code block is discovered within the file\nUse Jupyter engine if an executable code block (e.g. {python}) is discovered within the file. The kernel used is determined based on the language of the first executable code block discovered.\nUse no engine if no executable code blocks are discovered.\n\n\n.ipynb\nJupyter engine\n\n\n.Rmd\nKnitr engine\n\n\n.md\nNo engine\n\n\n\nYou can override the engine used via the engine option. For example:\nengine: jupyter\nengine: knitr\nYou can also specify that no execution engine should be used via engine: markdown.\nThe presence of the knitr or jupyter option will also override the default engine:\nknitr: true\njupyter: python3\nVariations with additional engine-specific options also work to override the default engine:\nknitr:\n  opts_knit:\n    verbose: true\njupyter:\n  kernelspec:\n    display_name: Python 3\n    language: python\n    name: python3"
  },
  {
    "href": "docs\\gallery\\index.html",
    "title": "Gallery",
    "section": "",
    "text": "Articles & Reports\nWrite a single markdown file and create output in a variety of formats.\n\n\n\n\n\n\nHTML\n \nfor web publishing\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPDF\n \nfor high quality print\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMS Word\n \nfor Office workflows\n\n\n\n\n\n\n\n\n\n\n\nPresentations\nCreate presentations (slide show) in a variety of formats.\n\n\n\n\n\n\nRevealJS\n \nHTML presentations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBeamer\n \nPDF presentations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPowerPoint\n \nOffice presentations\n\n\n\n\n\n\n\n\n\n\n\nInteractive Documents\nEngage readers and deliver more insights with interactive documents.\n\n\n\n\n\n\nObservable\n \nreactive JavaScript\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShiny\n \nweb framework for R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJupyter\n \ninteractive widgets\n\n\n\n\n\n\n\n\n\n\n\nWebsites & Books\nPublish collections of articles as a website or publish a book in multiple formats.\n\n\n\n\n\nquarto.org\n \ndocumentation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTML Book\n \nwith crossrefs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJupyter\n \nnotebooks as book\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.card a {\n  text-decoration: none;\n}\n\n.card .source-code {\n  margin-top: 3px;\n}\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "docs\\getting-started\\code-chunks.html#overview",
    "title": "Code Chunks",
    "section": "Overview",
    "text": "So far, we’ve only used plain Markdown in our document. In this section, we’ll learn how to insert code into our document with code chunks."
  },
  {
    "href": "docs\\getting-started\\code-chunks.html#our-document-so-far",
    "title": "Code Chunks",
    "section": "Our Document So Far",
    "text": "In case you didn’t follow along from the previous section, here is a simplified version of first_quarto.qmd, the document we’ve been working with, and the rendered output. If you don’t have surus.png, download it from here and save it to the same directory as first_quarto.qmd:\n\nfirst_quarto.qmdOutput\n\n\n---\ntitle: My first Quarto doc\ntoc: true\n---\n\n## Surus\n\nFrom [Wikipedia](https://en.wikipedia.org/wiki/Surus):\n\n> **Surus** (\"the Syrian\") was believed to be the last war elephant of Carthaginian general Hannibal's army in Italy.\n\n![](surus.png){fig-alt=\"A painting of Surus.\"}\n\n\nCalling quarto render first_quarto.qmd results in:"
  },
  {
    "href": "docs\\getting-started\\code-chunks.html#our-first-code-chunk",
    "title": "Code Chunks",
    "section": "Our First Code Chunk",
    "text": "You can insert a code chunk into a Quarto document by surrounding the code block with three backticks. For example, we can add an R plot to our document with:\n```{r}\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n\n```\nAdd the following lines to the bottom of our document. The Output tab contains only the plot from the rendered document:\n\nCodeOutput\n\n\n## Our First Code Chunk\n\n```{r}\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n\n```\n\n\n\n\n\n\nWe’re getting somewhere! We would like to get rid of those warning messages, though.\nThe good news is that since Quarto uses Knitr to execute R code, it respects all the chunk options you may be familiar with from RMarkdown. This means we can use the warning knitr chunk option to supress the warning messages on this plot. However, one important difference between R Markdown documents and Quarto documents is that in Quarto chunk options are typically included in special comments at the top of code chunks rather than within the line that begins the chunk.\nAdd the following lines to the code chunk and refresh the preview to see it in action:\n\nCodeOutput\n\n\n```{r}\n#| warning: false\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n\n```\n\n\n\n\n\n\nNow the warning message is gone. Similarly, we can add a figure caption by adding the fig-cap chunk option followed by a string. For instance:\n\nCodeOutput\n\n\n```{r}\n#| warning: false\n#| fig-cap: A plot of the `airquality` dataset fit with a polynomial regression.\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you prefer, it is still possible to include chunk options on the first line (e.g. ```{r, echo = FALSE}). That said, we recommend using the comment-based syntax to make documents more portable and consistent across execution engines."
  },
  {
    "href": "docs\\getting-started\\code-chunks.html#rendering-again",
    "title": "Code Chunks",
    "section": "Rendering again",
    "text": "Now that we’ve added some code to our document, let’s take a look at what the entire document looks like:\n---\ntitle: My first Quarto doc\ntoc: true\n---\n\n## Surus\n\nFrom [Wikipedia](https://en.wikipedia.org/wiki/Surus):\n\n> **Surus** (\"the Syrian\") was believed to be the last war elephant of Carthaginian general Hannibal's army in Italy.\n\n![](images/surus.png){fig-alt=\"A painting of Surus.\"}\n\n## Our First Code Chunk\n\n```{r}\n#| warning: false\n#| fig-cap: A plot of the `airquality` dataset fit with a polynomial regression.\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n\n```\nLet’s use the quarto render command to render this document to different output formats:\nquarto render first_quarto.qmd # will render to html\nquarto render first_quarto.qmd --to pdf\nquarto render first_quarto.qmd --to docx"
  },
  {
    "href": "docs\\getting-started\\code-chunks.html#recap",
    "title": "Code Chunks",
    "section": "Recap",
    "text": "Congratulations on your first Quarto document! You learned how to:\n\nUse quarto preview (or Render on Save) to see a live preview of your document\nRender the same document to different formats\nAdd rendering options to the document YAML\nIncorporate code into your document\nUse Quarto chunk options to alter the behavior of code chunks at render time"
  },
  {
    "href": "docs\\getting-started\\code-chunks.html#next-steps",
    "title": "Code Chunks",
    "section": "Next Steps",
    "text": "Running Code covers creating computational documents with Quarto in more depth, including how to use Quarto with JupyterLab and RStudio.\nThe Authoring section describes the capabilities of Pandoc markdown, as well as Quarto extensions for Cross References, Figures and Layout, and Callout Blocks.\nThe output formats section provides additional details on creating HTML, PDF, and MS Word documents, as well as describes a few special output types including Presentations, EPUBs, and pages in Hugo static sites.\nCreating a Website and Creating a Book describe some special Quarto project types."
  },
  {
    "href": "docs\\getting-started\\installation.html#quarto-cli",
    "title": "Installation",
    "section": "Quarto CLI",
    "text": "Installing the Quarto CLI (command-line interface) provides you with everything you need to render basic markdown documents (including a recent version of Pandoc). You can install the latest release of the Quarto CLI from:\nhttps://github.com/quarto-dev/quarto-cli/releases/latest\nYou can verify that Quarto has been installed correctly with:\nquarto check install\nIf you need to install a version more recent than the latest release, see the documentation on installing the Development Version."
  },
  {
    "href": "docs\\getting-started\\installation.html#computational-tools",
    "title": "Installation",
    "section": "Computational Tools",
    "text": "If you are creating computational documents with Quarto, you’ll want to be sure to install the additional dependencies required to work with Knitr and/or Jupyter.\n\nJupyter\nIf you already have Python 3 and Jupyter installed in your environment, then you should have everything required to render Jupyter notebooks with Python kernels.\nIf you don’t yet have Python 3 on your system, we recommend you install a version using the standard installer from https://www.python.org/downloads/.\nIf you are in a fresh Python 3 environment, installing the jupyter package will provide everything required to run Quarto:\n\n\n\n\n\n\n\nPkg. Manager\nCommand\n\n\n\n\nPip\n(Windows)\npy -m pip install jupyter\n\n\nPip\n(Mac/Linux)\npython3 -m pip install jupyter\n\n\nConda\nconda install jupyter\n\n\n\nYou can verify that Quarto is configured correctly for Jupyter with:\nquarto check jupyter\n\nPython Versions\nOn Mac OS and Linux, Quarto will use the version of Python 3 that it finds in the system path. Modify the PATH before invoking Quarto to use a different version of Python.\n\n\n\n\n\n\nMac OS Python 3\n\n\n\nIf you are running Mac OS you might already have a version of Python 3 installed via the Command Line Tools. Even so, we still recommend that you install a version of Python 3 using the standard installer at https://www.python.org/downloads/.\n\n\nOn Windows, Quarto will use Conda if it’s invoked within an activated Conda environment. Otherwise, it will use the Python Windows Launcher to select a version of Python 3. Use the PY_PYTHON environment variable to override the default behavior (for example: PY_PYTHON=3.8).\nThe quarto check jupyter command will tell you which version of Python will be selected for the shell it is invoked from within.\n\n\n\nKnitr\nTo use Quarto with R, you should install the quarto R package:\ninstall.packages(\"quarto\")\nInstallation of the quarto package will also install the knitr package so you will have everything required to render documents containing R code. You can verify that Quarto is configured correctly for Knitr with:\nquarto check knitr\n\n\nEnvironments\nif you are using Quarto Projects and want to create a project-local virtual environment for your Python and/or R dependencies see the documentation below on using Virtual Environments."
  },
  {
    "href": "docs\\getting-started\\installation.html#additional-tools",
    "title": "Installation",
    "section": "Additional Tools",
    "text": "Pandoc\nA recent version of Pandoc (v2.14) is installed alongside Quarto. This version of Pandoc won’t interfere with others you may have on your system (it’s not added to the system PATH).\nTo interact directly with the version of Pandoc installed with Quarto, use the quarto pandoc command. For example:\nquarto pandoc --version\nquarto pandoc --list-output-formats\n\n\nTeX\nIf you expect to use Quarto to create PDFs, you will need to install a recent distribution of TeX. While you can employ whatever toolchain you like for LaTeX compilation, we strongly recommend the use of TinyTeX, which is a distribution of TeX Live that provides a reasonably sized initial download (~100 MB) that includes the 200 or so most commonly used TeX packages for Pandoc documents.\nTo install TinyTeX, use the following command:\nquarto tools install tinytex\nIf you prefer TeX Live, you can find instructions for installing it here: https://tug.org/texlive/."
  },
  {
    "href": "docs\\getting-started\\installation.html#development-version",
    "title": "Installation",
    "section": "Development Version",
    "text": "To install the development version of the Quarto CLI, clone the quarto-cli repository then run the configure script for your platform (configure-linux.sh, configure-macos.sh, or configure-windows.cmd). For example:\ngit clone https://github.com/quarto-dev/quarto-cli\ncd quarto-cli\n./configure-macos.sh\nTo update to the latest development version, just git pull from the local repo directory:\ncd quarto-cli\ngit pull"
  },
  {
    "href": "docs\\getting-started\\rendering.html#overview",
    "title": "Rendering Basics",
    "section": "Overview",
    "text": "In the last section, we created first_quarto.qmd, our first Quarto document and got familiar with the Quarto Workflow. Something worth noting is that there will be a first_quarto.html in the directory that you’re working out of. This is the rendered HTML version of the document that Quarto creates for the live preview. But what if you’d prefer the document to be in a pdf or docx file? In this section, we’ll learn how to do just that."
  },
  {
    "href": "docs\\getting-started\\rendering.html#our-document-so-far",
    "title": "Rendering Basics",
    "section": "Our Document So Far",
    "text": "In case you didn’t follow along from the previous section, here are the contents of first_quarto.qmd, the document that we’re working with:\n---\ntitle: My first Quarto doc\n---\n\n## Introduction\n\nThis is some plain text.\n\n## Surus\n\nFrom [Wikipedia](https://en.wikipedia.org/wiki/Surus):\n\n> **Surus** (\"the Syrian\") was believed to be the last war elephant of Carthaginian general Hannibal's army in Italy.\n\n![](surus.png){fig-alt=\"A painting of Surus.\"}\nIf you don’t have surus.png, download it from here and save it to the same directory as first_quarto.qmd. Here is what the above Markdown looks like in the live preview:\n\nWhat’s going on behind the scenes of the Quarto live preview is that Quarto is rendering the document to HTML and pushing it to either your browser or viewer pane in RStudio. There are two main ways to change the final output format of first_quarto.qmd:\n\nPassing the output format to the quarto render command from the command line\nAdding the output format to the yaml front matter"
  },
  {
    "href": "docs\\getting-started\\rendering.html#output-format-as-a-command-line-argument",
    "title": "Rendering Basics",
    "section": "Output Format as a Command Line Argument",
    "text": "Open your command line interface and enter the following command:\nquarto render first_quarto.qmd\nThe console output will look something like this:\n\nNotice that the document is being rendered to HTML. By default, Quarto will render all documents to HTML unless you tell it otherwise, which we can do by using the --to <output-format> command line option. For example, to render first_quarto.qmd to a docx, enter:\nquarto render first_quarto.qmd --to docx\nNotice that the console output changed to reflect that we’re now rendering the document to a docx file:\n\nThe final document will look something like:\n\nWe can use a similar command to render the document to a pdf:\nquarto render first_quarto.qmd --to pdf\nThe output will be something like:\n\nBesides different output formats, Pandoc supports a wide variety of command line options, and since Quarto uses Pandoc to render the documents, all of these options are supported by quarto render. For example, to number the sections of the final output document, we can pass --number-sections as a command line argument\n\nCommandRendered Document\n\n\nquarto render first_quarto.qmd --to docx --number-sections"
  },
  {
    "href": "docs\\getting-started\\rendering.html#output-format-as-yaml-options",
    "title": "Rendering Basics",
    "section": "Output Format as YAML Options",
    "text": "Note that while it is possible to pass many options via the command line, it’s often much more convenient to provide these options within the document itself as YAML front matter. For example, let’s add the number-sections option to our document like so:\n---\ntitle: \"My First Quarto Document\"\nnumber-sections: true\n---\nAfter making these changes and saving the document, you’ll notice that the preview now has numbered sections:\n\nNow we can render the document to a docx without passing the --number-sections option:\nquarto render first_quarto.qmd --to docx\nThe resulting first_quarto.docx will have numbered sections without us having to pass the argument.\nSimilarly, we can add the desired output format to the YAML front matter. For instance, to output to docx by default, we can do:\n---\ntitle: \"My First Quarto Document\"\nnumber-sections: true\nformat: docx\n---\nNow that we have put these options in the YAML front matter, we can simply call quarto render to get the desired result:\n\nCommandRendered Document\n\n\nquarto render first_quarto.qmd\n\n\n\n\n\n\nNote that in this case rendering with no explicit --to argument results in a docx, since format: docx is specified in the YAML.\nOptions may include any of the defined Pandoc metadata variables or defaults. For example, here we take advantage of quite a few more options for PDF generation:\n---\ntitle: \"My First Quarto Document\"\nauthor: \"Jane Doe\"\nformat: pdf\ntoc: true\nnumber-sections: true\ndocumentclass: report\ngeometry:\n  - top=30mm\n  - left=20mm\n  - heightrounded\n---\nRender the document with quarto render first_quarto.qmd and see how all the options affected the final output.\nThis method of including options in the YAML front matter is usually preferable to passing them on the command line because:\n\nIt is much easier to reproduce a document this way since all of the options are in the document itself\nAs you add more options, the command will become very big and difficult to edit. Editing options in the YAML of a document is much easier to do."
  },
  {
    "href": "docs\\getting-started\\rendering.html#multiple-formats",
    "title": "Rendering Basics",
    "section": "Multiple Formats",
    "text": "The above example included a simple format: pdf value to set the default format. It’s also possible to provide multiple formats along with YAML options set on a per-format basis. For example, this document defines HTML, PDF, and Word output:\n---\ntitle: \"My First Quarto Document\"\nauthor: \"Jane Doe\"\ntoc: true\ntoc-depth: 2\nformat:\n  html:\n    max-width: 800px\n    fontsize: 18px\n    html-math-method: katex\n  pdf:\n    documentclass: report\n    margin-left: 30mm\n    margin-right: 30mm\n  docx:\n    number-sections: true\n---\nNote that the toc and toc-depth options are shared across all formats, and the options listed below html, pdf, and docx are only applied to their respective formats.\nIf you render this document without a --to argument, it will be rendered as html since that is the first format listed in the file. To render as another format just provide an explicit --to argument:\nquarto render first_quarto.qmd # will render to html\nquarto render first_quarto.qmd --to pdf\nquarto render first_quarto.qmd --to docx\nYou can learn about the available options for each format in the Pandoc documentation on metadata variables and defaults.\nNote that you can share format options across a set of documents using Quarto Projects."
  },
  {
    "href": "docs\\getting-started\\your-first-quarto.html#overview",
    "title": "Your First Quarto Document",
    "section": "Overview",
    "text": "Quarto is a publishing system used to create documents in a wide variety of formats including HTML, PDF, Office (docx and pptx), OpenOffice, JATS, and many more.\nYou author these documents using markdown, an easy to write plain-text format. You then optionally add code (e.g. Python, R, JavaScript, etc.) to the documents to dynamically create figures, tables, etc. and then render the documents to their final format using Quarto."
  },
  {
    "href": "docs\\getting-started\\your-first-quarto.html#markdown-inputs",
    "title": "Your First Quarto Document",
    "section": "Markdown Inputs",
    "text": "There are three types of markdown input files that Quarto can render:\n\nPlain markdown (with no embedded code)\nMarkdown with embedded code chunks\nJupyter notebooks which have a combination of markdown and code cells\n\nR users will typically use the second approach (in fact, existing .Rmd files can be rendered directly with Quarto).\nJupyter users will user either the second or third approach, depending on whether they prefer to work in a text editor or in the standard notebook user interface.\nNow that you’re familiar with the structure of a Quarto document, we’re going to create our first Quarto document. We’ll start with a plain Markdown document so that we can get the hang of Quarto, but we’ll build up in complexity from there."
  },
  {
    "href": "docs\\getting-started\\your-first-quarto.html#setting-up",
    "title": "Your First Quarto Document",
    "section": "Setting Up",
    "text": "Before we start, you should spend some time to set up a Quarto development environment by referring to the Code Editors section. There are guides for setting up Jupyter Lab, RStudio, VS Code, and plain-text editors such as Vim or Sublime.\nYou may also be interested in using the Visual Editor in RStudio, which provides a WYSIWYM for all of Pandoc Markdown."
  },
  {
    "href": "docs\\getting-started\\your-first-quarto.html#creating-and-previewing-your-first-document",
    "title": "Your First Quarto Document",
    "section": "Creating and Previewing Your First Document",
    "text": "Once you have your editing environment set up, create a document called first_quarto.qmd and add the following text to it:\n---\ntitle: My first Quarto doc\n---\n\n## Introduction\n\nThis is some plain text.\nLet’s set up a live preview of the document. If you’re using the preview release version of RStudio, you can click the Render on Save button to render a live preview of this document. Otherwise, enter quarto render first_quarto.qmd in a command prompt and Quarto will serve a rendered version of the document in a new browser window. In either case, the result will look something like this:\n\n\n\n\n\n\n\nNote for Jupyter Users\n\n\n\n\n\nIf you are using JupyterLab, the document should be called first_quarto.ipynb and the yaml front matter at the top of the document should go into its own Raw cell. See the docs on YAML Front Matter in Jupyter Lab for more info.\n\n\n\nCongratulations! You created and served your first Quarto document. Let’s add some more text to this document:\n---\ntitle: My first Quarto doc\n---\n\n## Introduction\n\nThis is some plain text.\n\n## Surus\n\nFrom [Wikipedia](https://en.wikipedia.org/wiki/Surus):\n\n> **Surus** (\"the Syrian\") was believed to be the last war elephant of Carthaginian general Hannibal's army in Italy.\nSave the document and watch as Quarto updates the page preview. Your output should look like this:\n\n\n\n\n\n\n\nNote\n\n\n\nIf the Markdown used in these previous examples is new to you, we suggest referencing the Markdown Basics section to familiarize yourself with the syntax."
  },
  {
    "href": "docs\\getting-started\\your-first-quarto.html#the-quarto-workflow",
    "title": "Your First Quarto Document",
    "section": "The Quarto Workflow",
    "text": "What we’ve just done is an example of the basic Quarto workflow for single documents without code:\n\nStart a live preview of the document with either quarto preview <file_name> (on the command line) or Render on Save (in the preview version of R Studio)\nMake changes to the document\nCheck the preview\nRepeat the previous two steps until you’re ready to render the document.\n\nSeeing the rendered document early and often helps you catch formatting mistakes early on and cuts down on debugging time. For example, let’s add an image of Surus to our document. Save this image to the same directory as first_quarto.qmd and add the following link to your document and save it:\n---\ntitle: My first Quarto doc\n---\n\n## Introduction\n\nThis is some plain text.\n\n## Surus\n\nFrom [Wikipedia](https://en.wikipedia.org/wiki/Surus):\n\n> **Surus** (\"the Syrian\") was believed to be the last war elephant of Carthaginian general Hannibal's army in Italy.\n\n![](sursu.png){fig-alt=\"A painting of Surus.\"}\nThe output will look something like:\n\nUh oh! Our image didn’t render because we mispelled the file name. Since we have our live preview running, we were able to catch this error early on in our writing process rather than at the end when debugging might be more difficult. In fact, you’ll have caught it even sooner if you’re using the Visual Editor or the preview version of RStudio as those two writing environments will let you know that the image path doesn’t exist when you finish typing on the line.\nCorrecting the type in the image path and saving will get the document to render correctly:\n---\ntitle: My first Quarto doc\n---\n\n## Introduction\n\nThis is some plain text.\n\n## Surus\n\nFrom [Wikipedia](https://en.wikipedia.org/wiki/Surus):\n\n> **Surus** (\"the Syrian\") was believed to be the last war elephant of Carthaginian general Hannibal's army in Italy.\n\n![](surus.png){fig-alt=\"A painting of Surus.\"}\n\n\n\n\n\n\n\nquarto preview vs. quarto serve\n\n\n\nSo far, we’ve been using quarto preview on a single document. Later on, you’ll learn about Quarto projects, collections of documents within a directory, such as a site or a book. quarto preview won’t render a document that is part of a project. However, you can get the same behavior as quarto preview for a project by calling quarto serve, which will create a preview for the entire project."
  },
  {
    "href": "docs\\getting-started\\your-first-quarto.html#up-next",
    "title": "Your First Quarto Document",
    "section": "Up Next",
    "text": "Now that we have some experience working with a Quarto document, we’ll learn how to render a Quarto document to different output formats."
  },
  {
    "href": "docs\\interactive\\index.html#overview",
    "title": "Interactive Documents",
    "section": "Overview",
    "text": "Adding interactivity to an article is a great way to help readers explore the concepts and data you are presenting more deeply. There are three ways to add interactive components to Quarto documents:\n\nCreate custom JavaScript visualizations using Observable JS.\nUse the Shiny R package to add interactivity to Knitr engine documents.\nIncorporate Jupyter Widgets or htmlwidgets (for the Jupyter and Knitr engines, respectively) into your document.\n\nEach of these techniques has distinct benefits and drawbacks in terms of expressiveness, ease of development, and deployment requirements. We’ll touch on these considerations briefly below, then provide links to more in depth documentation for learning more."
  },
  {
    "href": "docs\\interactive\\index.html#observable-js",
    "title": "Interactive Documents",
    "section": "Observable JS",
    "text": "Quarto includes native support for Observable JS, a set of enhancements to vanilla JavaScript created by Mike Bostock (also the author of D3). Observable JS is distinguished by its reactive runtime, which is especially well suited for interactive data exploration and analysis.\nHere’s an example that provides slider inputs to condition the behavior of a visualization:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{\"contents\": [{\"name\": \"points\", \"value\": {\"x\": [-1.3718955698, -1.7626903818, 1.2224084072, 0.4226342984, 1.5835428384, 1.7830917518, -0.8949682606, -1.357818, -2.4619988922, -0.6899122435, -1.0498582304, 0.0845026262, 0.6725168781, 0.4918193175, -0.641826007, 0.6537890731, 0.1968981626, -0.8499938333, -0.2919443273, -0.1563357795, 1.4165430072, -1.646834278, -0.312402209, -0.6364776671, -0.1709708096, 1.7316680133, -1.0588336956, -1.1560357697, 0.8770729222, -0.3433260991, 0.2105604548, -0.706626717, 1.7020151711, -0.2282681249, -0.7339031762, -1.6020600758, 0.3496461326, -1.1071319076, -1.0562075716, 0.6282131334, -1.1757561811, -0.3800013698, 0.6376354465, -0.7000567696, 2.4391225005, 0.7585160434, 0.9301465899, -0.252672038, -0.7838493656, -1.0090013416, 0.8325676087, 2.2594439645, -0.6712395855, -1.1795035422, -0.1224891787, 0.4040932917, 0.0333289124, 1.3787411503, 1.5755358544, 0.4917398686, 0.1536553853, -0.104819373, -1.2185749829, 0.4200193579, 0.8410371612, -0.2763384929, 2.9543099831, -0.0552175154, -1.8893067515, 0.1563413493, 0.0473646092, -1.3817971851, -1.3688885027, -0.7578188109, 2.9214029415, -0.8366120758, 0.8793748602, -0.2407722718, -0.2855393797, -1.9034985857, -0.0267977857, -1.2041870165, -0.1536836322, -0.2658265474, 1.2896956846, 0.9471131509, -1.1389259782, 1.7821479142, -0.5360965004, -0.221194272, -0.0696898014, 0.684477479, -0.4712367226, -1.5461066318, -1.3561426929, -2.015095215, 1.4690009102, 0.6003439665, -0.0411933082, -1.3332628402], \"y\": [2.0838076057, 1.1111876022, 0.8527137251, -0.5022304172, 0.1300438793, -0.8162120055, 0.6027480459, 2.7292422163, 0.3562816254, -0.2501847691, -0.7789663604, 0.2302783181, 0.3415501815, -0.8621967924, 1.4398222271, 1.0034307639, 0.1175320333, 0.7889344285, 0.8878645241, -0.6912318842, 0.3150499121, -0.3555951244, 0.1834514854, -1.0328415069, 1.6707921772, 0.0525844732, 0.9014094333, 1.3560687584, 0.0550847783, -0.42212643, 0.7661518552, -0.5916386069, 0.3328858185, -0.664712739, -1.6391765395, 0.3603427837, 0.8432522482, -0.7338754947, 0.8774851926, 1.6832715089, 1.2501930498, 0.3369343301, -1.0961456242, -0.2359291343, 0.1767897417, 1.513316044, -0.6569369639, 0.6569472318, 1.2028508703, -1.9632075615, -0.2578206539, 0.7767122848, 1.327218042, 1.7874931169, 0.9506115528, -0.7655158071, 1.1871859387, 1.1996416509, 0.8546256067, -0.4870630511, -1.6923202944, 2.0045958485, -0.3698748404, 0.5881313216, -0.8057640824, -0.4834703445, 0.0664832374, -0.4314468835, 0.0195457702, -0.0280157868, -1.5810355428, 0.2192435368, -0.5056466113, 0.3263619041, -0.0017661137, -0.0087243943, -0.7943057379, 1.3727731819, 0.4960205935, 0.6932616841, 2.39562447, 0.1454048171, 2.428415403, -0.1926166732, -1.7611224931, 0.8674441806, -0.4764475894, 0.3467273499, 0.4905938405, -0.5578470211, -0.3644384494, 2.1665724509, -0.5848350925, -1.1225277151, -0.6368328606, -1.4012697698, 1.3763825361, -0.4337971101, -0.1239414014, 0.4368798605]}}]}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservable JS uses some special keywords and a custom runtime to make JavaScript reactive. For example, the “minimum fame” slider in the example above was created with the following code:\nviewof minimum = Inputs.range([-2, 2], { \n  value: 1, step: 0.01, \n  label: \"minimum fame\"\n})\nIt’s then referenced as a normal JavaScript variable in code that creates the plot:\nsel.filter(d => d.fame <= minimum)\nAs the user interacts with the slider, the minimum value is updated and any code that references it is automatically re-executed.\nOne benefit of using JavaScript for interactive documents is that all the logic and computation is performed on the client (so no server is required for deployment).\nTo learn more see the articles on Observable JS."
  },
  {
    "href": "docs\\interactive\\index.html#shiny",
    "title": "Interactive Documents",
    "section": "Shiny",
    "text": "The Shiny package provides a flexible, easy to use framework for creating interactive web applications with R. Quarto in turn includes support for embedding Shiny components and applets into documents created with the Knitr engine.\nHere’s a live example of Shiny interactive components along with a brief explanation of the code required to create them:\n\n\n\n \n\n\n\nShiny comes with a variety of built in input widgets. With minimal syntax it is possible to include widgets like the ones shown on the left in your apps:\n# Select type of trend to plot\nselectInput(inputId = \"type\", \n            label = strong(\"Trend index\"),\n            choices = unique(trend_data$type),\n            selected = \"Travel\")\nDisplaying outputs is equally hassle-free:\nmainPanel(\n  plotOutput(outputId = \"lineplot\", \n             height = \"300px\"),\n)\nBuild your plots or tables as you normally would in R, and make them reactive with a call to the appropriate render function:\noutput$lineplot <- renderPlot({\n  plot(x = selected_trends()$date, \n       y = selected_trends()$close, \n       type = \"l\",\n       xlab = \"Date\", \n       ylab = \"Trend index\")\n})\n\n\n\nShiny makes it very straightforward to create interactive documents using only R. Unlike using JavaScript though, you will need to deploy documents that use Shiny to a server.\nTo learn more see the articles on Using Shiny with Quarto."
  },
  {
    "href": "docs\\interactive\\index.html#widgets",
    "title": "Interactive Documents",
    "section": "Widgets",
    "text": "Jupyter Widgets and htmlwidgets are great ways to incorporate interactivity into your documents if you don’t know JavaScript and prefer to work exclusively in Python or R. They also run entirely client-side so can be deployed within normal static HTML documents.\nFor example, the following Python code is all that is required to embed a Leaflet map into a Jupyter engine document:\n```{python}\nfrom ipyleaflet import Map, Marker, basemaps, basemap_to_tiles\nm = Map(\n  basemap=basemap_to_tiles(\n    basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"\n  ),\n  center=(52.204793, 360.121558),\n  zoom=4\n)\nm.add_layer(Marker(location=(52.204793, 360.121558)))\nm\n```\n\n\n\n{\"model_id\":\"503e265296a24c1b8530dde19367760b\",\"version_major\":2,\"version_minor\":0}\n\n\n\nTo learn more see these articles on using widgets with Quarto:\n\nJupyter Widgets (Jupyter engine).\nhtmlwidgets (Knitr engine)."
  },
  {
    "href": "docs\\interactive\\index.html#layout",
    "title": "Interactive Documents",
    "section": "Layout",
    "text": "Once you’ve gotten familiar with using various interactive components see the article on Component Layout to learn how to:\n\nGroup inputs into an input panel.\nPresent multiple outputs in a tabset panel.\nUse a full page layout rather than the default article layout.\nAdd a sidebar panel for inputs in a full page layout.\nCreate custom panel layouts to arrange outputs into rows and columns."
  },
  {
    "href": "docs\\interactive\\layout.html#overview",
    "title": "Component Layout",
    "section": "Overview",
    "text": "When you introduce interactive components into a document you’ll want to be sure to lay them out in a fashion that optimizes for readability and navigation.\nThere are of course a wide variety of ways you can incorporate interactivity spanning from visualizations embedded within a longer-form article all the way up to a more application/dashboard style layout. We’ll cover both of these layout scenarios below.\nWe’ll use examples from both Observable JS and Shiny interactive documents—if you aren’t familiar with the code/syntax used for a given example just focus on the enclosing layout markup rather than the application code."
  },
  {
    "href": "docs\\interactive\\layout.html#input-panel",
    "title": "Component Layout",
    "section": "Input Panel",
    "text": "If you have several inputs, you may want to group them inside an input panel (code block with option panel: input or div with class .panel-input). For example:\n\nThe inputs are grouped in a panel and laid out in three columns by adding the panel: input and layout-ncol: 3 options to the OJS code cell:\n```{ojs}\n//| panel: input\n//| layout-ncol: 3\n\nviewof ch = checkbox({\n  title: \"Passport color:\",\n  options: [\n    { value: \"red\", label: \"Red\" },\n    { value: \"green\", label: \"Green\" },\n    { value: \"blue\", label: \"Blue\" },\n    { value: \"black\", label: \"Black\" }\n  ],\n  value: [\"red\", \"green\", \"blue\", \"black\"],\n  submit: false\n})\n\nviewof type = radio({\n  title: \"Representation:\",\n  options: [\n    { label: 'Passports', value: 'p' },\n    { label: 'Circles', value: 'c' }\n  ],\n  value: 'p'\n})\n\nviewof k = slider({\n  title: \"Symbol size:\",\n  min: 1,\n  max: 10,\n  value: 3,\n  step: 1\n})\n```"
  },
  {
    "href": "docs\\interactive\\layout.html#tabset-panel",
    "title": "Component Layout",
    "section": "Tabset Panel",
    "text": "If you want to allow users to toggle between multiple visualizations, use a tabset (div with class .panel-tabset). Include a heading (e.g. ##) for each tab in the tabset.\nFor example, here are a plot and data each presented in their own tab:\n\n\n\n\n\n\n\n\nPlotData\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere is the markup and code used to create the tabset:\n::: {.panel-tabset}\n\n## Plot\n\n```{ojs}\nPlot.rectY(data, \n  Plot.stackY(\n    Plot.binX( \n      {y: \"count\"}, \n      {x: \"body_mass\", fill: \"species\", thresholds: 20})\n    )\n  ).plot({\n    facet: {\n      data,\n      x: \"sex\"\n    },\n    marks: [Plot.frame()]\n  })\n```\n\n## Data\n\n```{ojs}\nInputs.table(filtered)\n```\n\n:::"
  },
  {
    "href": "docs\\interactive\\layout.html#full-page-layout",
    "title": "Component Layout",
    "section": "Full Page Layout",
    "text": "By default Quarto documents center their content within the document viewport, and don’t exceed a maximum width of around 900 pixels. This behavior exists to optimize readability, but for an application layout you generally want to do occupy the entire page.\nTo do this, add the page-layout: custom option. For example:\nformat: \n  html:\n    page-layout: custom\nHere’s an example of a Shiny application that occupies the full width of the browser:\n\nYou’ll also note that the inputs are contained within a sidebar—the next section describes how to create sidebars."
  },
  {
    "href": "docs\\interactive\\layout.html#sidebar-panel",
    "title": "Component Layout",
    "section": "Sidebar Panel",
    "text": "Sidebars are created using divs with class .panel-sidebar. You can do this using a markdown div container (as illustrated above for .panel-input), or, if the entire contents of your sidebar is created from a single code cell, by adding the panel: sidebar option to the cell.\nSidebar panels should always have an adjacent panel with class .panel-fill or .panel-center which they will be laid out next to. The former (.panel-fill) will fill all available space, the latter (.panel-center) will leave some horizontal margin around its content.\nFor example, here is the source code of the user-interface portion of the Shiny application displayed above:\n---\ntitle: \"Iris K-Means Clustering\"\nformat: \n  html:\n    page-layout: custom\nserver: shiny\n---\n\n```{r}\n#| panel: sidebar\nvars <- setdiff(names(iris), \"Species\")\nselectInput('xcol', 'X Variable', vars)\nselectInput('ycol', 'Y Variable', vars, selected = vars[[2]])\nnumericInput('clusters', 'Cluster count', 3, min = 1, max = 9)\n```\n\n```{r}\n#| panel: fill\nplotOutput('plot1')\n```\nThe panel: fill option is added to the plot output chunk. You can alternately use panel: center if you want to leave some horizontal margin around the contents of the panel.\nAdding the panel option to a code chunk is shorthand for adding the CSS class to its containing div (i.e. it’s equivalent to surrounding the code chunk with a div with class e.g. panel-fill).\nHere’s an example of using a sidebar with OJS inputs:\n\nTo do this you would use the following code:\n```{ojs}\n//| panel: sidebar\n\nviewof myage = {\n  const myage = select({\n    title: \"Quelle classe d'âge voulez-vous cartographier ?\",\n    options: ages,\n    value: \"80etplus\"\n  });\n  return myage;\n}\n\nviewof pctvax = slider({\n  title: '<br/>Objectif de vaccination',\n  description: '200% signifie 2 doses par personnes pour tout le monde',\n  min: 50,\n  max: 200,\n  value: 200,\n  step: 10,\n  format: v => v + \"%\"\n})\n\nviewof overlay = radio({\n  title: \"Écarter les cercles\",\n  options: [{ label: 'Oui', value: 'Y' }, { label: 'Non', value: 'N' }],\n  value: 'N'\n})\n\nviewof label = radio({\n  title: \"Numéros des départements\",\n  options: [{ label: 'Afficher', value: 'Y' }, { label: 'Masquer', value: 'N' }],\n  value: 'N'\n})\n```\n\n```{ojs}\n//| panel: fill\n\n(vaccine visualization code)\n\n```"
  },
  {
    "href": "docs\\interactive\\layout.html#panel-layout",
    "title": "Component Layout",
    "section": "Panel Layout",
    "text": "You can arrange multiple interactive components into a panel using the layout attribute of a containing div. For example, here we have a main visualization in the first row and two ancillary visualizations in the second row:\n\nAs described in the article on Figures and Layout, you can arrange panels of figures in very flexible fashion using the layout attribute. For the example above we enclosed the three visualizations in the following div:\n::: {layout=\"[ [1], [1,1] ]\"}\n\n(outputs)\n\n:::\nNote that you can apply the layout attribute to a div that is already a panel (e.g. .panel-fill) to specify layout for content adjacent to a sidebar. So the following markup is also valid:\n::: {.panel-sidebar}\n\n(inputs)\n\n:::\n\n::: {.panel-fill layout=\"[ [1], [1,1] ]\"}\n\n(outputs)\n\n:::\nThe layout attribute is an array of arrays, each of which defines a row of the layout. Above we indicate that we want the first row to encompass the first visualization, and then to split the next two equally over the second row.\nThe values in rows don’t need to add up to anything in particular (they are relative within each row), so we could have just as well have specified different relative widths for the second row if that was better suited to presenting our data:\n::: {layout=\"[ [1], [3,2] ]\"}\n\n(outputs)\n\n:::"
  },
  {
    "href": "docs\\interactive\\ojs\\code-reuse.html#modules",
    "title": "Code Reuse",
    "section": "Modules",
    "text": "JavaScript modules are directly supported in OJS. For example, if we have the following source file square.js:\nexport function square(x) {\n  return x * x;\n}\nThen you can import and use the square() function as follows:\n\nimport { square } from \"./square.js\"\nsquare(5)"
  },
  {
    "href": "docs\\interactive\\ojs\\code-reuse.html#data",
    "title": "Code Reuse",
    "section": "Data",
    "text": "You may be using Python or R to pre-process data that is then provided to OJS via the ojs_define() function (this is described in more depth in the Data Sources article). If you want to share data prepared in this fashion you can import it directly from another .qmd.\nFor example, here we import the co2data that we read and pre-processed with dplyr in data-sources.qmd:\n\nimport { co2data } from \"./data-sources.qmd\";\nInputs.table(transpose(co2data))"
  },
  {
    "href": "docs\\interactive\\ojs\\code-reuse.html#output",
    "title": "Code Reuse",
    "section": "Output",
    "text": "You can import any reactive value from another .qmd file. Here, we’re reusing a chart directly from data-sources.qmd:\n\nimport { yearlyChart } from \"./data-sources.qmd\";\nyearlyChart"
  },
  {
    "href": "docs\\interactive\\ojs\\data-sources.html#overview",
    "title": "Data Sources",
    "section": "Overview",
    "text": "There are a wide variety of way to make data available to OJS:\n\nRead CSV, JSON, SQLite, and more using the FileAttachments API.\nUse the ojs_define() function to make data processed in Python or R available to {ojs} cells.\nMake calls to Web APIs for online services and data stores.\n\nWe’ll explore all of these techniques below."
  },
  {
    "href": "docs\\interactive\\ojs\\data-sources.html#file-attachments",
    "title": "Data Sources",
    "section": "File Attachments",
    "text": "Use the FileAttachment function from the standard library to read data from a file. For example, here we read and plot a CSV of NOAA’s Monthly CO2 concentration data from Mauna Loa:\n\ndata = {\n  const co2data = await FileAttachment(\"co2_mm.csv\")\n    .csv({ typed: true } );\n  return co2data.map(d => { \n    d[\"decimal date\"] = Number(d[\"decimal date\"]);\n    d.average = Number(d.average); \n    return d; \n  });\n}\nPlot.plot({\n  marks: [\n    Plot.line(data, \n      { x: \"decimal date\", y: \"average\"}, \n      { stroke: \"black\" }\n    )\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote that we specified the typed: true option to the csv() function. When this option is specified d3.autoType is used to automatically detect numbers, dates, etc. and convert them to the correct JavaScript types. This is highly recommend when you know that your data is compatible with automatic type detection.\nHere are the methods available for structured data formats:\n\n\n\nMethod\nDescription\n\n\n\n\ncsv\nComma separated values\n\n\ntsv\nTab separated values\n\n\njson\nJSON (JavaScript objects)\n\n\nsqlite\nSQLite database client\n\n\n\nThere are also methods to get the raw data as a blob, text, image, or stream."
  },
  {
    "href": "docs\\interactive\\ojs\\data-sources.html#python-and-r",
    "title": "Data Sources",
    "section": "Python and R",
    "text": "The data you want to use with OJS might not always be available in raw form. Often you’ll need to read and preprocess the raw data using Python or R. You can perform this preprocessing during document render (in an {r} or {python} code cell) and then make it available to {ojs} cells via the ojs_define() function.\nHere’s an example. We’ll read the same data into R, do some grouping and summarization, then make it available to OJS using ojs_define:\n\n\n\n```{r}\nlibrary(readr)\nlibrary(dplyr)\n\nco2 = read_csv(\"co2_mm.csv\")  %>% \n  group_by(year) %>% \n  summarize(max = max(average))\n\nojs_define(co2data = co2)\n```\nNote that we could have done the same thing using Python (the ojs_define function is available in any document that uses R or Python).\nNow we plot the data using Observable Plot:\n```{ojs}\n//| echo: false\nyearlyChart = Plot.plot({\n  marks: [\n    Plot.line(transpose(co2data), \n      {x: \"year\", y: \"max\"}, \n      { stroke: \"black\" }\n    )\n  ]}\n)\n```\n\n\n\n\n\n\n\nSee the NOAA C02 example for the full source code.\n\nTranspose\nYou’ll note one additional twist in the OJS code above: we call the transpose function on our co2data before plotting it. The transpose function is built in to Quarto’s OJS engine, and will convert column-oriented datasets (like the ones used in Python and R) into the row-oriented datasets used by many JavaScript plotting libraries (including Plot).\nFor example, the following JSON data emitted from R or Python:\n{\n  \"year\": [1958, 1959, 1960],\n  \"max\":  [317.51, 318.29, 320.04]\n}\nIs converted to the following via the call to transpose:\n[\n  { \"year\": 1959, \"max\": 317.51 },\n  { \"year\": 1960, \"max\": 318.29 },\n  { \"year\": 1960, \"max\": 320.04 }\n]\nCheck the documentation for whatever plotting library you are using from OJS to see whether a call to transpose is required."
  },
  {
    "href": "docs\\interactive\\ojs\\data-sources.html#web-apis",
    "title": "Data Sources",
    "section": "Web APIs",
    "text": "You can use the d3.json() function to read JSON data from web services and data sources. Here we query the GitHub API for data on contributions to the Python pandas package:\n\nd3 = require('d3')\n\ncontributors = await d3.json(\n  \"https://api.github.com/repos/pandas-dev/pandas/stats/contributors\"\n)\n\ncommits = contributors.map(contributor => {\n  const author = contributor.author;\n  return {\n    name: author.login,\n    title: author.login,\n    group: author.type,\n    value: contributor.total\n  }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nView the data sorted by number of commits:\n\nInputs.table(commits, { sort: \"value\", reverse: true })\n\n\n\n\n\n\nSee the GitHub API example for the full source code."
  },
  {
    "href": "docs\\interactive\\ojs\\examples\\arquero.html",
    "title": "Arquero",
    "section": "",
    "text": "Simple demonstration of Arquero using Allison Horst’s Palmer Penguins dataset.\n\nimport { aq, op } from '@uwdata/arquero'\npenguins = aq.loadCSV(\"palmer-penguins.csv\")\n\npenguins.view()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npenguins\n  .groupby('species')\n  .filter(p => p.body_mass > 0)\n  .rollup({\n    count: op.count(),\n    avg_mass: op.average('body_mass')\n   })\n  .view()\n\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Arquero\"\nformat:\n  html:\n    code-tools: true\n---\n\nSimple demonstration of [Arquero](https://uwdata.github.io/arquero/) using Allison Horst's [Palmer Penguins](https://allisonhorst.github.io/palmerpenguins/) dataset. \n\n```{ojs}\nimport { aq, op } from '@uwdata/arquero'\npenguins = aq.loadCSV(\"palmer-penguins.csv\")\n\npenguins.view()\n\npenguins\n  .groupby('species')\n  .filter(p => p.body_mass > 0)\n  .rollup({\n    count: op.count(),\n    avg_mass: op.average('body_mass')\n   })\n  .view()\n```\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  const viewSource = window.document.getElementById('quarto-view-source') ||\n                     window.document.getElementById('quarto-code-tools-source');\n  if (viewSource) {\n    const sourceUrl = viewSource.getAttribute(\"data-quarto-source-url\");\n    viewSource.addEventListener(\"click\", function(e) {\n      if (sourceUrl) {\n        if (/\\bviewer_pane=1\\b/.test(window.location)) {\n          window.open(sourceUrl);\n        } else {\n          window.location.href = sourceUrl;\n        }\n      } else {\n        const modal = new bootstrap.Modal(document.getElementById('quarto-embedded-source-code-modal'));\n        modal.show();\n      }\n      return false;\n    });\n  }\n  function toggleCodeHandler(show) {\n    return function(e) {\n      const detailsSrc = window.document.querySelectorAll(\".cell > details > .sourceCode\");\n      for (let i=0; i<detailsSrc.length; i++) {\n        const details = detailsSrc[i].parentElement;\n        if (show) {\n          details.open = true;\n        } else {\n          details.removeAttribute(\"open\");\n        }\n      }\n      const cellCodeDivs = window.document.querySelectorAll(\".cell > .sourceCode\");\n      const fromCls = show ? \"hidden\" : \"unhidden\";\n      const toCls = show ? \"unhidden\" : \"hidden\";\n      for (let i=0; i<cellCodeDivs.length; i++) {\n        const codeDiv = cellCodeDivs[i];\n        if (codeDiv.classList.contains(fromCls)) {\n          codeDiv.classList.remove(fromCls);\n          codeDiv.classList.add(toCls);\n        } \n      }\n      return false;\n    }\n  }\n  const hideAllCode = window.document.getElementById(\"quarto-hide-all-code\");\n  if (hideAllCode) {\n    hideAllCode.addEventListener(\"click\", toggleCodeHandler(false));\n  }\n  const showAllCode = window.document.getElementById(\"quarto-show-all-code\");\n  if (showAllCode) {\n    showAllCode.addEventListener(\"click\", toggleCodeHandler(true));\n  }\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "docs\\interactive\\ojs\\examples\\github.html#data",
    "title": "GitHub API",
    "section": "Data",
    "text": "d3 = require('d3')\ncontributors = await d3.json(\n  \"https://api.github.com/repos/\" + repo + \"/stats/contributors\"\n)\ncommits = contributors.map(contributor => {\n  const author = contributor.author;\n  return {\n    name: author.login,\n    title: author.login,\n    group: author.type,\n    value: contributor.total\n  }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInputs.table(commits, { sort: \"value\", reverse: true })\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"GitHub API\"\nformat: \n  html:\n    toc: false\n    code-tools: true\n---\n\nDemonstration of using the [GitHub API](https://developer.github.com/v3). \n\n```{ojs}\n//| code-fold: true\nviewof repo = Inputs.radio(\n  [\n    \"pandas-dev/pandas\",\n    \"tidyverse/ggplot2\",\n  ], \n  { label: \"Repo:\", value: \"pandas-dev/pandas\"}\n)\n```\n\n```{ojs}\n//| code-fold: true\nimport { chart } with { commits as data } from \"@d3/d3-bubble-chart\"\nchart\n```\n\n\n## Data\n\n```{ojs}\nd3 = require('d3')\ncontributors = await d3.json(\n  \"https://api.github.com/repos/\" + repo + \"/stats/contributors\"\n)\ncommits = contributors.map(contributor => {\n  const author = contributor.author;\n  return {\n    name: author.login,\n    title: author.login,\n    group: author.type,\n    value: contributor.total\n  }\n})\n```\n\n```{ojs}\nInputs.table(commits, { sort: \"value\", reverse: true })\n```"
  },
  {
    "href": "docs\\interactive\\ojs\\examples\\layout.html",
    "title": "Layout",
    "section": "",
    "text": "This example uses page-layout: custom to have its contents occupy the entire width of the page:\n---\ntitle: \"Layout\"\nformat: \n  html: \n    page-layout: custom\n---\nEnclose the inputs in a sidebar panel and the outputs in a tabset panel (click the “Code” button at top right to see the full source code):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead and filter the data based on the user’s inputs:\n\ndata = FileAttachment(\"palmer-penguins.csv\").csv({typed: true})\n\nfiltered = data.filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Layout\"\nformat:\n  html:\n    echo: false\n    code-tools: true\n    page-layout: custom\n---\n\nThis example uses `page-layout: custom` to have its contents occupy the entire width of the page:\n\n```yaml\n---\ntitle: \"Layout\"\nformat: \n  html: \n    page-layout: custom\n---\n```\n\nEnclose the inputs in a sidebar panel and the outputs in a tabset panel (click the \"Code\" button at top right to see the full source code):\n\n```{ojs}\n//| panel: sidebar\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n```\n\n::: panel-tabset\n\n## Plot\n\n```{ojs}\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\n\n## Data\n\n```{ojs}\nInputs.table(filtered)\n```\n\n:::\n\n\nRead and filter the data based on the user's inputs:\n\n```{ojs}\n//| echo: true\ndata = FileAttachment(\"palmer-penguins.csv\").csv({typed: true})\n\nfiltered = data.filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n```\n\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  const viewSource = window.document.getElementById('quarto-view-source') ||\n                     window.document.getElementById('quarto-code-tools-source');\n  if (viewSource) {\n    const sourceUrl = viewSource.getAttribute(\"data-quarto-source-url\");\n    viewSource.addEventListener(\"click\", function(e) {\n      if (sourceUrl) {\n        if (/\\bviewer_pane=1\\b/.test(window.location)) {\n          window.open(sourceUrl);\n        } else {\n          window.location.href = sourceUrl;\n        }\n      } else {\n        const modal = new bootstrap.Modal(document.getElementById('quarto-embedded-source-code-modal'));\n        modal.show();\n      }\n      return false;\n    });\n  }\n  function toggleCodeHandler(show) {\n    return function(e) {\n      const detailsSrc = window.document.querySelectorAll(\".cell > details > .sourceCode\");\n      for (let i=0; i<detailsSrc.length; i++) {\n        const details = detailsSrc[i].parentElement;\n        if (show) {\n          details.open = true;\n        } else {\n          details.removeAttribute(\"open\");\n        }\n      }\n      const cellCodeDivs = window.document.querySelectorAll(\".cell > .sourceCode\");\n      const fromCls = show ? \"hidden\" : \"unhidden\";\n      const toCls = show ? \"unhidden\" : \"hidden\";\n      for (let i=0; i<cellCodeDivs.length; i++) {\n        const codeDiv = cellCodeDivs[i];\n        if (codeDiv.classList.contains(fromCls)) {\n          codeDiv.classList.remove(fromCls);\n          codeDiv.classList.add(toCls);\n        } \n      }\n      return false;\n    }\n  }\n  const hideAllCode = window.document.getElementById(\"quarto-hide-all-code\");\n  if (hideAllCode) {\n    hideAllCode.addEventListener(\"click\", toggleCodeHandler(false));\n  }\n  const showAllCode = window.document.getElementById(\"quarto-show-all-code\");\n  if (showAllCode) {\n    showAllCode.addEventListener(\"click\", toggleCodeHandler(true));\n  }\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "docs\\interactive\\ojs\\examples\\noaa-co2.html",
    "title": "NOAA CO2",
    "section": "",
    "text": "Read and plot a CSV of NOAA’s Monthly CO2 concentration data from Mauna Loa:\n\ndata = {\n  const co2data = await FileAttachment(\"co2_mm.csv\")\n    .csv({ typed: true });\n  return co2data.map(d => { \n    d[\"decimal date\"] = Number(d[\"decimal date\"]);\n    d.average = Number(d.average); \n    return d; \n  });\n}\nPlot.plot({\n  marks: [\n    Plot.line(data, \n      { x: \"decimal date\", y: \"average\"}, \n      { stroke: \"black\" }\n    )\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead the same data into R, do some grouping and summarization, then make it available using ojs_define:\n\nlibrary(readr)\nlibrary(dplyr)\n\nco2 = read_csv(\"co2_mm.csv\")  %>% \n  group_by(year) %>% \n  summarize(max = max(average))\n\nojs_define(co2data = co2)\n\nNow plot the summarized data:\n\nPlot.plot({\n  marks: [\n    Plot.line(transpose(co2data), \n      {x: \"year\", y: \"max\"}, \n      { stroke: \"black\" }\n    )\n  ]}\n)\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"NOAA CO2\"\nformat: \n  html:\n    code-tools: true\n---\n\nRead and plot a CSV of NOAA's Monthly [CO2 concentration data](https://gml.noaa.gov/ccgg/trends/data.html) from Mauna Loa:\n\n```{ojs}\ndata = {\n  const co2data = await FileAttachment(\"co2_mm.csv\")\n    .csv({ typed: true });\n  return co2data.map(d => { \n    d[\"decimal date\"] = Number(d[\"decimal date\"]);\n    d.average = Number(d.average); \n    return d; \n  });\n}\nPlot.plot({\n  marks: [\n    Plot.line(data, \n      { x: \"decimal date\", y: \"average\"}, \n      { stroke: \"black\" }\n    )\n  ]\n})\n```\n\nRead the same data into R, do some grouping and summarization, then make it available using `ojs_define`:\n\n```{r}\n#| output: false\n#| warning: false\nlibrary(readr)\nlibrary(dplyr)\n\nco2 = read_csv(\"co2_mm.csv\")  %>% \n  group_by(year) %>% \n  summarize(max = max(average))\n\nojs_define(co2data = co2)\n```\n\nNow plot the summarized data:\n\n```{ojs}\nPlot.plot({\n  marks: [\n    Plot.line(transpose(co2data), \n      {x: \"year\", y: \"max\"}, \n      { stroke: \"black\" }\n    )\n  ]}\n)\n```\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  const viewSource = window.document.getElementById('quarto-view-source') ||\n                     window.document.getElementById('quarto-code-tools-source');\n  if (viewSource) {\n    const sourceUrl = viewSource.getAttribute(\"data-quarto-source-url\");\n    viewSource.addEventListener(\"click\", function(e) {\n      if (sourceUrl) {\n        if (/\\bviewer_pane=1\\b/.test(window.location)) {\n          window.open(sourceUrl);\n        } else {\n          window.location.href = sourceUrl;\n        }\n      } else {\n        const modal = new bootstrap.Modal(document.getElementById('quarto-embedded-source-code-modal'));\n        modal.show();\n      }\n      return false;\n    });\n  }\n  function toggleCodeHandler(show) {\n    return function(e) {\n      const detailsSrc = window.document.querySelectorAll(\".cell > details > .sourceCode\");\n      for (let i=0; i<detailsSrc.length; i++) {\n        const details = detailsSrc[i].parentElement;\n        if (show) {\n          details.open = true;\n        } else {\n          details.removeAttribute(\"open\");\n        }\n      }\n      const cellCodeDivs = window.document.querySelectorAll(\".cell > .sourceCode\");\n      const fromCls = show ? \"hidden\" : \"unhidden\";\n      const toCls = show ? \"unhidden\" : \"hidden\";\n      for (let i=0; i<cellCodeDivs.length; i++) {\n        const codeDiv = cellCodeDivs[i];\n        if (codeDiv.classList.contains(fromCls)) {\n          codeDiv.classList.remove(fromCls);\n          codeDiv.classList.add(toCls);\n        } \n      }\n      return false;\n    }\n  }\n  const hideAllCode = window.document.getElementById(\"quarto-hide-all-code\");\n  if (hideAllCode) {\n    hideAllCode.addEventListener(\"click\", toggleCodeHandler(false));\n  }\n  const showAllCode = window.document.getElementById(\"quarto-show-all-code\");\n  if (showAllCode) {\n    showAllCode.addEventListener(\"click\", toggleCodeHandler(true));\n  }\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "docs\\interactive\\ojs\\examples\\penguins.html",
    "title": "Penguins",
    "section": "",
    "text": "A simple example based on Allison Horst’s Palmer Penguins dataset. Here we look at how penguin body mass varies across both sex and species (use the provided inputs to filter the dataset by bill length and island):\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\n\n\n\ndata = FileAttachment(\"palmer-penguins.csv\").csv({ typed: true })\n\n\n\n\n\n\n\nfiltered = data.filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Penguins\"\nformat:\n  html:\n    toc: false\n    echo: false\n    keep-hidden: true\n    code-tools: true\n---\n\nA simple example based on Allison Horst's [Palmer Penguins](https://allisonhorst.github.io/palmerpenguins/) dataset. Here we look at how penguin body mass varies across both sex and species (use the provided inputs to filter the dataset by bill length and island):\n\n```{ojs}\n//| panel: input\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n```\n\n::: {.panel-tabset}\n\n## Plot\n\n```{ojs}\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\n\n## Data\n\n```{ojs}\nInputs.table(filtered)\n```\n\n:::\n\n```{ojs}\ndata = FileAttachment(\"palmer-penguins.csv\").csv({ typed: true })\n```\n\n```{ojs}\nfiltered = data.filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n```\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  const viewSource = window.document.getElementById('quarto-view-source') ||\n                     window.document.getElementById('quarto-code-tools-source');\n  if (viewSource) {\n    const sourceUrl = viewSource.getAttribute(\"data-quarto-source-url\");\n    viewSource.addEventListener(\"click\", function(e) {\n      if (sourceUrl) {\n        if (/\\bviewer_pane=1\\b/.test(window.location)) {\n          window.open(sourceUrl);\n        } else {\n          window.location.href = sourceUrl;\n        }\n      } else {\n        const modal = new bootstrap.Modal(document.getElementById('quarto-embedded-source-code-modal'));\n        modal.show();\n      }\n      return false;\n    });\n  }\n  function toggleCodeHandler(show) {\n    return function(e) {\n      const detailsSrc = window.document.querySelectorAll(\".cell > details > .sourceCode\");\n      for (let i=0; i<detailsSrc.length; i++) {\n        const details = detailsSrc[i].parentElement;\n        if (show) {\n          details.open = true;\n        } else {\n          details.removeAttribute(\"open\");\n        }\n      }\n      const cellCodeDivs = window.document.querySelectorAll(\".cell > .sourceCode\");\n      const fromCls = show ? \"hidden\" : \"unhidden\";\n      const toCls = show ? \"unhidden\" : \"hidden\";\n      for (let i=0; i<cellCodeDivs.length; i++) {\n        const codeDiv = cellCodeDivs[i];\n        if (codeDiv.classList.contains(fromCls)) {\n          codeDiv.classList.remove(fromCls);\n          codeDiv.classList.add(toCls);\n        } \n      }\n      return false;\n    }\n  }\n  const hideAllCode = window.document.getElementById(\"quarto-hide-all-code\");\n  if (hideAllCode) {\n    hideAllCode.addEventListener(\"click\", toggleCodeHandler(false));\n  }\n  const showAllCode = window.document.getElementById(\"quarto-show-all-code\");\n  if (showAllCode) {\n    showAllCode.addEventListener(\"click\", toggleCodeHandler(true));\n  }\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "docs\\interactive\\ojs\\examples\\population.html",
    "title": "Population",
    "section": "",
    "text": "This example demonstrates importing a notebook from ObervableHQ and replacing its data with data of our own (the code and data for this example were originally published here).\nFirst we read from a local JSON file into population:\n\npopulation = FileAttachment(\"population.json\").json()\n\n\n\n\n\n\nThen we import from https://observablehq.com/@d3/zoomable-sunburst and specify that we’d like to use population instead of the data built in to the notebook:\n\nimport { chart } with { population as data } from \"@d3/zoomable-sunburst\"\n\n\n\n\n\n\nFinally, we display the chart:\n\nchart\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Population\"\nformat: \n  html:\n    code-tools: true\n    toc: false\n---\n\nThis example demonstrates importing a notebook from ObervableHQ and replacing its data with data of our own (the code and data for this example were originally published  [here](https://github.com/observablehq/examples/tree/main/custom-data)).\n\nFirst we read from a local JSON file into `population`:\n\n```{ojs}\npopulation = FileAttachment(\"population.json\").json()\n```\n\nThen we import from <https://observablehq.com/@d3/zoomable-sunburst> and specify that we'd like to use `population` instead of the data built in to the notebook:\n\n```{ojs}\nimport { chart } with { population as data } from \"@d3/zoomable-sunburst\"\n```\n\nFinally, we display the chart:\n\n```{ojs}\nchart\n```\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  const viewSource = window.document.getElementById('quarto-view-source') ||\n                     window.document.getElementById('quarto-code-tools-source');\n  if (viewSource) {\n    const sourceUrl = viewSource.getAttribute(\"data-quarto-source-url\");\n    viewSource.addEventListener(\"click\", function(e) {\n      if (sourceUrl) {\n        if (/\\bviewer_pane=1\\b/.test(window.location)) {\n          window.open(sourceUrl);\n        } else {\n          window.location.href = sourceUrl;\n        }\n      } else {\n        const modal = new bootstrap.Modal(document.getElementById('quarto-embedded-source-code-modal'));\n        modal.show();\n      }\n      return false;\n    });\n  }\n  function toggleCodeHandler(show) {\n    return function(e) {\n      const detailsSrc = window.document.querySelectorAll(\".cell > details > .sourceCode\");\n      for (let i=0; i<detailsSrc.length; i++) {\n        const details = detailsSrc[i].parentElement;\n        if (show) {\n          details.open = true;\n        } else {\n          details.removeAttribute(\"open\");\n        }\n      }\n      const cellCodeDivs = window.document.querySelectorAll(\".cell > .sourceCode\");\n      const fromCls = show ? \"hidden\" : \"unhidden\";\n      const toCls = show ? \"unhidden\" : \"hidden\";\n      for (let i=0; i<cellCodeDivs.length; i++) {\n        const codeDiv = cellCodeDivs[i];\n        if (codeDiv.classList.contains(fromCls)) {\n          codeDiv.classList.remove(fromCls);\n          codeDiv.classList.add(toCls);\n        } \n      }\n      return false;\n    }\n  }\n  const hideAllCode = window.document.getElementById(\"quarto-hide-all-code\");\n  if (hideAllCode) {\n    hideAllCode.addEventListener(\"click\", toggleCodeHandler(false));\n  }\n  const showAllCode = window.document.getElementById(\"quarto-show-all-code\");\n  if (showAllCode) {\n    showAllCode.addEventListener(\"click\", toggleCodeHandler(true));\n  }\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "docs\\interactive\\ojs\\examples\\sunburst.html",
    "title": "Sunburst",
    "section": "",
    "text": "This variant of a sunburst diagram shows only two layers of the hierarchy at a time. Click a node to zoom in, or the center to zoom out. Compare to an icicle.\n\n\nCode\nsunburst = {\n  const root = partition(flareData);\n\n  root.each(d => d.current = d);\n\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [0, 0, width, width])\n      .style(\"font\", \"15px sans-serif\");\n\n  const g = svg.append(\"g\")\n      .attr(\"transform\", `translate(${width / 2},${width / 2})`);\n\n  const path = g.append(\"g\")\n    .selectAll(\"path\")\n    .data(root.descendants().slice(1))\n    .join(\"path\")\n      .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })\n      .attr(\"fill-opacity\", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)\n      .attr(\"d\", d => arc(d.current));\n\n  path.filter(d => d.children)\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", clicked);\n\n  path.append(\"title\")\n      .text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${format(d.value)}`);\n\n  const label = g.append(\"g\")\n      .attr(\"pointer-events\", \"none\")\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"user-select\", \"none\")\n    .selectAll(\"text\")\n    .data(root.descendants().slice(1))\n    .join(\"text\")\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"fill-opacity\", d => +labelVisible(d.current))\n      .attr(\"transform\", d => labelTransform(d.current))\n      .text(d => d.data.name);\n\n  const parent = g.append(\"circle\")\n      .datum(root)\n      .attr(\"r\", radius)\n      .attr(\"fill\", \"none\")\n      .attr(\"pointer-events\", \"all\")\n      .on(\"click\", clicked);\n\n  function clicked(event, p) {\n    parent.datum(p.parent || root);\n\n    root.each(d => d.target = {\n      x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n      x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n      y0: Math.max(0, d.y0 - p.depth),\n      y1: Math.max(0, d.y1 - p.depth)\n    });\n\n    const t = g.transition().duration(750);\n\n    // Transition the data on all arcs, even the ones that aren’t visible,\n    // so that if this transition is interrupted, entering arcs will start\n    // the next transition from the desired position.\n    path.transition(t)\n        .tween(\"data\", d => {\n          const i = d3.interpolate(d.current, d.target);\n          return t => d.current = i(t);\n        })\n      .filter(function(d) {\n        return +this.getAttribute(\"fill-opacity\") || arcVisible(d.target);\n      })\n        .attr(\"fill-opacity\", d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)\n        .attrTween(\"d\", d => () => arc(d.current));\n\n    label.filter(function(d) {\n        return +this.getAttribute(\"fill-opacity\") || labelVisible(d.target);\n      }).transition(t)\n        .attr(\"fill-opacity\", d => +labelVisible(d.target))\n        .attrTween(\"transform\", d => () => labelTransform(d.current));\n  }\n  \n  function arcVisible(d) {\n    return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0;\n  }\n\n  function labelVisible(d) {\n    return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;\n  }\n\n  function labelTransform(d) {\n    const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;\n    const y = (d.y0 + d.y1) / 2 * radius;\n    return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;\n  }\n\n  return svg.node();\n}\n\n\n\n\n\n\n\n\nflareData = FileAttachment(\"flare-2.json\").json()\n\n\n\n\n\n\n\npartition = flareData => {\n  const root = d3.hierarchy(flareData)\n      .sum(d => d.value)\n      .sort((a, b) => b.value - a.value);\n  return d3.partition()\n      .size([2 * Math.PI, root.height + 1])\n    (root);\n}\n\n\n\n\n\n\n\ncolor = d3.scaleOrdinal(\n  d3.quantize(d3.interpolateRainbow, flareData.children.length + 1)\n)\n\n\n\n\n\n\n\nformat = d3.format(\",d\")\n\n\n\n\n\n\n\nwidth = 932\n\n\n\n\n\n\n\nradius = width / 6\n\n\n\n\n\n\n\narc = d3.arc()\n    .startAngle(d => d.x0)\n    .endAngle(d => d.x1)\n    .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\n    .padRadius(radius * 1.5)\n    .innerRadius(d => d.y0 * radius)\n    .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1))\n\n\n\n\n\n\n\nd3 = require(\"d3@6\")\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Sunburst\"\nsubtitle: \"Originally published at <https://observablehq.com/@d3/zoomable-sunburst>\"\nauthor: \"Mike Bostock\"\ndate: 2018-04-30\nlicense: isc\nformat: \n  html:\n    toc: false\n    code-tools: true\n---\n\nThis variant of a [sunburst diagram](https://observablehq.com/@d3/sunburst) shows only two layers of the hierarchy at a time. Click a node to zoom in, or the center to zoom out. Compare to an [icicle](https://observablehq.com/@d3/zoomable-icicle).\n\n```{ojs}\n//| code-fold: true\nsunburst = {\n  const root = partition(flareData);\n\n  root.each(d => d.current = d);\n\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [0, 0, width, width])\n      .style(\"font\", \"15px sans-serif\");\n\n  const g = svg.append(\"g\")\n      .attr(\"transform\", `translate(${width / 2},${width / 2})`);\n\n  const path = g.append(\"g\")\n    .selectAll(\"path\")\n    .data(root.descendants().slice(1))\n    .join(\"path\")\n      .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })\n      .attr(\"fill-opacity\", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)\n      .attr(\"d\", d => arc(d.current));\n\n  path.filter(d => d.children)\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", clicked);\n\n  path.append(\"title\")\n      .text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${format(d.value)}`);\n\n  const label = g.append(\"g\")\n      .attr(\"pointer-events\", \"none\")\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"user-select\", \"none\")\n    .selectAll(\"text\")\n    .data(root.descendants().slice(1))\n    .join(\"text\")\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"fill-opacity\", d => +labelVisible(d.current))\n      .attr(\"transform\", d => labelTransform(d.current))\n      .text(d => d.data.name);\n\n  const parent = g.append(\"circle\")\n      .datum(root)\n      .attr(\"r\", radius)\n      .attr(\"fill\", \"none\")\n      .attr(\"pointer-events\", \"all\")\n      .on(\"click\", clicked);\n\n  function clicked(event, p) {\n    parent.datum(p.parent || root);\n\n    root.each(d => d.target = {\n      x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n      x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n      y0: Math.max(0, d.y0 - p.depth),\n      y1: Math.max(0, d.y1 - p.depth)\n    });\n\n    const t = g.transition().duration(750);\n\n    // Transition the data on all arcs, even the ones that aren’t visible,\n    // so that if this transition is interrupted, entering arcs will start\n    // the next transition from the desired position.\n    path.transition(t)\n        .tween(\"data\", d => {\n          const i = d3.interpolate(d.current, d.target);\n          return t => d.current = i(t);\n        })\n      .filter(function(d) {\n        return +this.getAttribute(\"fill-opacity\") || arcVisible(d.target);\n      })\n        .attr(\"fill-opacity\", d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)\n        .attrTween(\"d\", d => () => arc(d.current));\n\n    label.filter(function(d) {\n        return +this.getAttribute(\"fill-opacity\") || labelVisible(d.target);\n      }).transition(t)\n        .attr(\"fill-opacity\", d => +labelVisible(d.target))\n        .attrTween(\"transform\", d => () => labelTransform(d.current));\n  }\n  \n  function arcVisible(d) {\n    return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0;\n  }\n\n  function labelVisible(d) {\n    return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;\n  }\n\n  function labelTransform(d) {\n    const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;\n    const y = (d.y0 + d.y1) / 2 * radius;\n    return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;\n  }\n\n  return svg.node();\n}\n```\n\n```{ojs}\nflareData = FileAttachment(\"flare-2.json\").json()\n```\n\n```{ojs}\npartition = flareData => {\n  const root = d3.hierarchy(flareData)\n      .sum(d => d.value)\n      .sort((a, b) => b.value - a.value);\n  return d3.partition()\n      .size([2 * Math.PI, root.height + 1])\n    (root);\n}\n```\n\n```{ojs}\ncolor = d3.scaleOrdinal(\n  d3.quantize(d3.interpolateRainbow, flareData.children.length + 1)\n)\n```\n\n```{ojs}\nformat = d3.format(\",d\")\n```\n\n```{ojs}\nwidth = 932\n```\n\n```{ojs}\nradius = width / 6\n```\n\n```{ojs}\narc = d3.arc()\n    .startAngle(d => d.x0)\n    .endAngle(d => d.x1)\n    .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\n    .padRadius(radius * 1.5)\n    .innerRadius(d => d.y0 * radius)\n    .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1))\n```\n\n```{ojs}\nd3 = require(\"d3@6\")\n```\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  const viewSource = window.document.getElementById('quarto-view-source') ||\n                     window.document.getElementById('quarto-code-tools-source');\n  if (viewSource) {\n    const sourceUrl = viewSource.getAttribute(\"data-quarto-source-url\");\n    viewSource.addEventListener(\"click\", function(e) {\n      if (sourceUrl) {\n        if (/\\bviewer_pane=1\\b/.test(window.location)) {\n          window.open(sourceUrl);\n        } else {\n          window.location.href = sourceUrl;\n        }\n      } else {\n        const modal = new bootstrap.Modal(document.getElementById('quarto-embedded-source-code-modal'));\n        modal.show();\n      }\n      return false;\n    });\n  }\n  function toggleCodeHandler(show) {\n    return function(e) {\n      const detailsSrc = window.document.querySelectorAll(\".cell > details > .sourceCode\");\n      for (let i=0; i<detailsSrc.length; i++) {\n        const details = detailsSrc[i].parentElement;\n        if (show) {\n          details.open = true;\n        } else {\n          details.removeAttribute(\"open\");\n        }\n      }\n      const cellCodeDivs = window.document.querySelectorAll(\".cell > .sourceCode\");\n      const fromCls = show ? \"hidden\" : \"unhidden\";\n      const toCls = show ? \"unhidden\" : \"hidden\";\n      for (let i=0; i<cellCodeDivs.length; i++) {\n        const codeDiv = cellCodeDivs[i];\n        if (codeDiv.classList.contains(fromCls)) {\n          codeDiv.classList.remove(fromCls);\n          codeDiv.classList.add(toCls);\n        } \n      }\n      return false;\n    }\n  }\n  const hideAllCode = window.document.getElementById(\"quarto-hide-all-code\");\n  if (hideAllCode) {\n    hideAllCode.addEventListener(\"click\", toggleCodeHandler(false));\n  }\n  const showAllCode = window.document.getElementById(\"quarto-show-all-code\");\n  if (showAllCode) {\n    showAllCode.addEventListener(\"click\", toggleCodeHandler(true));\n  }\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "docs\\interactive\\ojs\\index.html#overview",
    "title": "Observable JS",
    "section": "Overview",
    "text": "Quarto includes native support for Observable JS, a set of enhancements to vanilla JavaScript created by Mike Bostock (also the author of D3). Observable JS is distinguished by its reactive runtime, which is especially well suited for interactive data exploration and analysis.\nThe creators of Observable JS (Observable, Inc.) run a hosted service at https://observablehq.com/ where you can create and publish notebooks. Additionally, you can use Observable JS (“OJS”) in standalone documents and websites via its core libraries. Quarto uses these libraries along with a compiler that is run at render time to enable the use of OJS within Quarto documents.\nOJS works in any Quarto document (plain markdown as well as Jupyter and Knitr documents). Just include your code in an {ojs} executable code block. The rest of this article explains the basics of using OJS with Quarto."
  },
  {
    "href": "docs\\interactive\\ojs\\index.html#example",
    "title": "Observable JS",
    "section": "Example",
    "text": "We’ll start with a simple example based on Allison Horst’s Palmer Penguins dataset. Here we look at how penguin body mass varies across both sex and species (use the provided inputs to filter the dataset by bill length and island):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s take a look at the source code for this example. First we create an {ojs} cell that reads in some data from a CSV file using a FileAttachment:\n```{ojs}\ndata = FileAttachment(\"palmer-penguins.csv\").csv({ typed: true })\n```\nThe example above doesn’t plot all of the data but rather a filtered subset. To create our filter we’ll need some inputs, and we’ll want to be able to use the values of these inputs in our filtering function. To do this, we use the viewof keyword and with some standard Inputs:\n```{ojs}\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n```\nNow we write the filtering function that will transform the data read from the CSV using the values of bill_length_min and island.\n```{ojs}\nfiltered = data.filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n```\nHere we see reactivity in action: we don’t need any special syntax to refer to the dynamic input values, they “just work,” and the filtering code is automatically re-run when the inputs change. This works in much the same way a spreadsheet works when you update a cell and other cells that refer to it are recalculated.\nFinally, we’ll plot the filtered data using Observable Plot (an open-source JavaScript library for quick visualization of tabular data):\n```{ojs}\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\nNote that as with our inputs, we refer to the filtered variable with no special syntax—the plotting code will be automatically re-run whenever filtered changes (which in turn is updated whenever an input changes).\nThat covers a basic end-to-end use of OJS (see the Penguins examples for the full source code).\n\n\n\n\n\n\nIf you take a look at the Penguins code, you’ll notice something curious: the inputs and plotting code are defined before the data processing code. This demonstrates a critical difference between OJS cell execution and traditional notebooks: cells do not need to be defined in any particular order.\nBecause execution is fully reactive, the runtime will automatically execute cells in the correct order based on how they reference each other. This is more akin to a spreadsheet than a traditional notebook with linear cell execution."
  },
  {
    "href": "docs\\interactive\\ojs\\index.html#libraries",
    "title": "Observable JS",
    "section": "Libraries",
    "text": "Our example above made use of several standard libraries, including:\n\nObservable stdlib — Core primitives for DOM manipulation, file handling, importing code, and much more.\nObservable Inputs — Standard inputs controls including sliders, drop-downs, tables, check-boxes, etc.\nObservable Plot — High level plotting library for exploratory data visualization.\n\nThe libraries are somewhat special because they are automatically available within notebooks on https://observablehq.com as well as within {ojs} cells in Quarto documents.\nUsing other JavaScript libraries is also straightforward, they just need to be explicitly imported. For example, here we import a some libraries using the require function (which in turn loads NPM modules from jsDelivr):\n```{ojs}\nd3 = require(\"d3@6\")\ntopojson = require(\"topojson\")\n```\nSee the article on Libraries to learn more about using standard and third-party libraries."
  },
  {
    "href": "docs\\interactive\\ojs\\index.html#data-sources",
    "title": "Observable JS",
    "section": "Data Sources",
    "text": "In our initial example we used a FileAttachment as our data source. File attachments support many formats including CSV, TSV, JSON, SQLite, and Arrow so are a convenient way to read a dataset that has already been prepared for analysis.\nFrequently though you’ll need to do some pre-processing of your data in Python or R before it’s ready for visualization. Within Quarto, you can do this pre-processing during document render then make the results available to OJS.\nUse the ojs_define() function from Python or R to define variables that you want to use within JavaScript. For example, to reproduce the simple CSV read in Python you might do this:\n\n\n{\"contents\": [{\"name\": \"data\", \"value\": {\"species\": [\"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Chinstrap\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\", \"Gentoo\"], \"island\": [\"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Dream\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\", \"Biscoe\"], \"bill_length\": [39.1, 39.5, 40.3, null, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, 37.8, 37.8, 41.1, 38.6, 34.6, 36.6, 38.7, 42.5, 34.4, 46.0, 37.8, 37.7, 35.9, 38.2, 38.8, 35.3, 40.6, 40.5, 37.9, 40.5, 39.5, 37.2, 39.5, 40.9, 36.4, 39.2, 38.8, 42.2, 37.6, 39.8, 36.5, 40.8, 36.0, 44.1, 37.0, 39.6, 41.1, 37.5, 36.0, 42.3, 39.6, 40.1, 35.0, 42.0, 34.5, 41.4, 39.0, 40.6, 36.5, 37.6, 35.7, 41.3, 37.6, 41.1, 36.4, 41.6, 35.5, 41.1, 35.9, 41.8, 33.5, 39.7, 39.6, 45.8, 35.5, 42.8, 40.9, 37.2, 36.2, 42.1, 34.6, 42.9, 36.7, 35.1, 37.3, 41.3, 36.3, 36.9, 38.3, 38.9, 35.7, 41.1, 34.0, 39.6, 36.2, 40.8, 38.1, 40.3, 33.1, 43.2, 35.0, 41.0, 37.7, 37.8, 37.9, 39.7, 38.6, 38.2, 38.1, 43.2, 38.1, 45.6, 39.7, 42.2, 39.6, 42.7, 38.6, 37.3, 35.7, 41.1, 36.2, 37.7, 40.2, 41.4, 35.2, 40.6, 38.8, 41.5, 39.0, 44.1, 38.5, 43.1, 36.8, 37.5, 38.1, 41.1, 35.6, 40.2, 37.0, 39.7, 40.2, 40.6, 32.1, 40.7, 37.3, 39.0, 39.2, 36.6, 36.0, 37.8, 36.0, 41.5, 46.5, 50.0, 51.3, 45.4, 52.7, 45.2, 46.1, 51.3, 46.0, 51.3, 46.6, 51.7, 47.0, 52.0, 45.9, 50.5, 50.3, 58.0, 46.4, 49.2, 42.4, 48.5, 43.2, 50.6, 46.7, 52.0, 50.5, 49.5, 46.4, 52.8, 40.9, 54.2, 42.5, 51.0, 49.7, 47.5, 47.6, 52.0, 46.9, 53.5, 49.0, 46.2, 50.9, 45.5, 50.9, 50.8, 50.1, 49.0, 51.5, 49.8, 48.1, 51.4, 45.7, 50.7, 42.5, 52.2, 45.2, 49.3, 50.2, 45.6, 51.9, 46.8, 45.7, 55.8, 43.5, 49.6, 50.8, 50.2, 46.1, 50.0, 48.7, 50.0, 47.6, 46.5, 45.4, 46.7, 43.3, 46.8, 40.9, 49.0, 45.5, 48.4, 45.8, 49.3, 42.0, 49.2, 46.2, 48.7, 50.2, 45.1, 46.5, 46.3, 42.9, 46.1, 44.5, 47.8, 48.2, 50.0, 47.3, 42.8, 45.1, 59.6, 49.1, 48.4, 42.6, 44.4, 44.0, 48.7, 42.7, 49.6, 45.3, 49.6, 50.5, 43.6, 45.5, 50.5, 44.9, 45.2, 46.6, 48.5, 45.1, 50.1, 46.5, 45.0, 43.8, 45.5, 43.2, 50.4, 45.3, 46.2, 45.7, 54.3, 45.8, 49.8, 46.2, 49.5, 43.5, 50.7, 47.7, 46.4, 48.2, 46.5, 46.4, 48.6, 47.5, 51.1, 45.2, 45.2, 49.1, 52.5, 47.4, 50.0, 44.9, 50.8, 43.4, 51.3, 47.5, 52.1, 47.5, 52.2, 45.5, 49.5, 44.5, 50.8, 49.4, 46.9, 48.4, 51.1, 48.5, 55.9, 47.2, 49.1, 47.3, 46.8, 41.7, 53.4, 43.3, 48.1, 50.5, 49.8, 43.5, 51.5, 46.2, 55.1, 44.5, 48.8, 47.2, null, 46.8, 50.4, 45.2, 49.9], \"bill_depth\": [18.7, 17.4, 18.0, null, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2, 17.1, 17.3, 17.6, 21.2, 21.1, 17.8, 19.0, 20.7, 18.4, 21.5, 18.3, 18.7, 19.2, 18.1, 17.2, 18.9, 18.6, 17.9, 18.6, 18.9, 16.7, 18.1, 17.8, 18.9, 17.0, 21.1, 20.0, 18.5, 19.3, 19.1, 18.0, 18.4, 18.5, 19.7, 16.9, 18.8, 19.0, 18.9, 17.9, 21.2, 17.7, 18.9, 17.9, 19.5, 18.1, 18.6, 17.5, 18.8, 16.6, 19.1, 16.9, 21.1, 17.0, 18.2, 17.1, 18.0, 16.2, 19.1, 16.6, 19.4, 19.0, 18.4, 17.2, 18.9, 17.5, 18.5, 16.8, 19.4, 16.1, 19.1, 17.2, 17.6, 18.8, 19.4, 17.8, 20.3, 19.5, 18.6, 19.2, 18.8, 18.0, 18.1, 17.1, 18.1, 17.3, 18.9, 18.6, 18.5, 16.1, 18.5, 17.9, 20.0, 16.0, 20.0, 18.6, 18.9, 17.2, 20.0, 17.0, 19.0, 16.5, 20.3, 17.7, 19.5, 20.7, 18.3, 17.0, 20.5, 17.0, 18.6, 17.2, 19.8, 17.0, 18.5, 15.9, 19.0, 17.6, 18.3, 17.1, 18.0, 17.9, 19.2, 18.5, 18.5, 17.6, 17.5, 17.5, 20.1, 16.5, 17.9, 17.1, 17.2, 15.5, 17.0, 16.8, 18.7, 18.6, 18.4, 17.8, 18.1, 17.1, 18.5, 17.9, 19.5, 19.2, 18.7, 19.8, 17.8, 18.2, 18.2, 18.9, 19.9, 17.8, 20.3, 17.3, 18.1, 17.1, 19.6, 20.0, 17.8, 18.6, 18.2, 17.3, 17.5, 16.6, 19.4, 17.9, 19.0, 18.4, 19.0, 17.8, 20.0, 16.6, 20.8, 16.7, 18.8, 18.6, 16.8, 18.3, 20.7, 16.6, 19.9, 19.5, 17.5, 19.1, 17.0, 17.9, 18.5, 17.9, 19.6, 18.7, 17.3, 16.4, 19.0, 17.3, 19.7, 17.3, 18.8, 16.6, 19.9, 18.8, 19.4, 19.5, 16.5, 17.0, 19.8, 18.1, 18.2, 19.0, 18.7, 13.2, 16.3, 14.1, 15.2, 14.5, 13.5, 14.6, 15.3, 13.4, 15.4, 13.7, 16.1, 13.7, 14.6, 14.6, 15.7, 13.5, 15.2, 14.5, 15.1, 14.3, 14.5, 14.5, 15.8, 13.1, 15.1, 14.3, 15.0, 14.3, 15.3, 15.3, 14.2, 14.5, 17.0, 14.8, 16.3, 13.7, 17.3, 13.6, 15.7, 13.7, 16.0, 13.7, 15.0, 15.9, 13.9, 13.9, 15.9, 13.3, 15.8, 14.2, 14.1, 14.4, 15.0, 14.4, 15.4, 13.9, 15.0, 14.5, 15.3, 13.8, 14.9, 13.9, 15.7, 14.2, 16.8, 14.4, 16.2, 14.2, 15.0, 15.0, 15.6, 15.6, 14.8, 15.0, 16.0, 14.2, 16.3, 13.8, 16.4, 14.5, 15.6, 14.6, 15.9, 13.8, 17.3, 14.4, 14.2, 14.0, 17.0, 15.0, 17.1, 14.5, 16.1, 14.7, 15.7, 15.8, 14.6, 14.4, 16.5, 15.0, 17.0, 15.5, 15.0, 13.8, 16.1, 14.7, 15.8, 14.0, 15.1, 15.2, 15.9, 15.2, 16.3, 14.1, 16.0, 15.7, 16.2, 13.7, null, 14.3, 15.7, 14.8, 16.1], \"flipper_length\": [181.0, 186.0, 195.0, null, 193.0, 190.0, 181.0, 195.0, 193.0, 190.0, 186.0, 180.0, 182.0, 191.0, 198.0, 185.0, 195.0, 197.0, 184.0, 194.0, 174.0, 180.0, 189.0, 185.0, 180.0, 187.0, 183.0, 187.0, 172.0, 180.0, 178.0, 178.0, 188.0, 184.0, 195.0, 196.0, 190.0, 180.0, 181.0, 184.0, 182.0, 195.0, 186.0, 196.0, 185.0, 190.0, 182.0, 179.0, 190.0, 191.0, 186.0, 188.0, 190.0, 200.0, 187.0, 191.0, 186.0, 193.0, 181.0, 194.0, 185.0, 195.0, 185.0, 192.0, 184.0, 192.0, 195.0, 188.0, 190.0, 198.0, 190.0, 190.0, 196.0, 197.0, 190.0, 195.0, 191.0, 184.0, 187.0, 195.0, 189.0, 196.0, 187.0, 193.0, 191.0, 194.0, 190.0, 189.0, 189.0, 190.0, 202.0, 205.0, 185.0, 186.0, 187.0, 208.0, 190.0, 196.0, 178.0, 192.0, 192.0, 203.0, 183.0, 190.0, 193.0, 184.0, 199.0, 190.0, 181.0, 197.0, 198.0, 191.0, 193.0, 197.0, 191.0, 196.0, 188.0, 199.0, 189.0, 189.0, 187.0, 198.0, 176.0, 202.0, 186.0, 199.0, 191.0, 195.0, 191.0, 210.0, 190.0, 197.0, 193.0, 199.0, 187.0, 190.0, 191.0, 200.0, 185.0, 193.0, 193.0, 187.0, 188.0, 190.0, 192.0, 185.0, 190.0, 184.0, 195.0, 193.0, 187.0, 201.0, 192.0, 196.0, 193.0, 188.0, 197.0, 198.0, 178.0, 197.0, 195.0, 198.0, 193.0, 194.0, 185.0, 201.0, 190.0, 201.0, 197.0, 181.0, 190.0, 195.0, 181.0, 191.0, 187.0, 193.0, 195.0, 197.0, 200.0, 200.0, 191.0, 205.0, 187.0, 201.0, 187.0, 203.0, 195.0, 199.0, 195.0, 210.0, 192.0, 205.0, 210.0, 187.0, 196.0, 196.0, 196.0, 201.0, 190.0, 212.0, 187.0, 198.0, 199.0, 201.0, 193.0, 203.0, 187.0, 197.0, 191.0, 203.0, 202.0, 194.0, 206.0, 189.0, 195.0, 207.0, 202.0, 193.0, 210.0, 198.0, 211.0, 230.0, 210.0, 218.0, 215.0, 210.0, 211.0, 219.0, 209.0, 215.0, 214.0, 216.0, 214.0, 213.0, 210.0, 217.0, 210.0, 221.0, 209.0, 222.0, 218.0, 215.0, 213.0, 215.0, 215.0, 215.0, 216.0, 215.0, 210.0, 220.0, 222.0, 209.0, 207.0, 230.0, 220.0, 220.0, 213.0, 219.0, 208.0, 208.0, 208.0, 225.0, 210.0, 216.0, 222.0, 217.0, 210.0, 225.0, 213.0, 215.0, 210.0, 220.0, 210.0, 225.0, 217.0, 220.0, 208.0, 220.0, 208.0, 224.0, 208.0, 221.0, 214.0, 231.0, 219.0, 230.0, 214.0, 229.0, 220.0, 223.0, 216.0, 221.0, 221.0, 217.0, 216.0, 230.0, 209.0, 220.0, 215.0, 223.0, 212.0, 221.0, 212.0, 224.0, 212.0, 228.0, 218.0, 218.0, 212.0, 230.0, 218.0, 228.0, 212.0, 224.0, 214.0, 226.0, 216.0, 222.0, 203.0, 225.0, 219.0, 228.0, 215.0, 228.0, 216.0, 215.0, 210.0, 219.0, 208.0, 209.0, 216.0, 229.0, 213.0, 230.0, 217.0, 230.0, 217.0, 222.0, 214.0, null, 215.0, 222.0, 212.0, 213.0], \"body_mass\": [3750.0, 3800.0, 3250.0, null, 3450.0, 3650.0, 3625.0, 4675.0, 3475.0, 4250.0, 3300.0, 3700.0, 3200.0, 3800.0, 4400.0, 3700.0, 3450.0, 4500.0, 3325.0, 4200.0, 3400.0, 3600.0, 3800.0, 3950.0, 3800.0, 3800.0, 3550.0, 3200.0, 3150.0, 3950.0, 3250.0, 3900.0, 3300.0, 3900.0, 3325.0, 4150.0, 3950.0, 3550.0, 3300.0, 4650.0, 3150.0, 3900.0, 3100.0, 4400.0, 3000.0, 4600.0, 3425.0, 2975.0, 3450.0, 4150.0, 3500.0, 4300.0, 3450.0, 4050.0, 2900.0, 3700.0, 3550.0, 3800.0, 2850.0, 3750.0, 3150.0, 4400.0, 3600.0, 4050.0, 2850.0, 3950.0, 3350.0, 4100.0, 3050.0, 4450.0, 3600.0, 3900.0, 3550.0, 4150.0, 3700.0, 4250.0, 3700.0, 3900.0, 3550.0, 4000.0, 3200.0, 4700.0, 3800.0, 4200.0, 3350.0, 3550.0, 3800.0, 3500.0, 3950.0, 3600.0, 3550.0, 4300.0, 3400.0, 4450.0, 3300.0, 4300.0, 3700.0, 4350.0, 2900.0, 4100.0, 3725.0, 4725.0, 3075.0, 4250.0, 2925.0, 3550.0, 3750.0, 3900.0, 3175.0, 4775.0, 3825.0, 4600.0, 3200.0, 4275.0, 3900.0, 4075.0, 2900.0, 3775.0, 3350.0, 3325.0, 3150.0, 3500.0, 3450.0, 3875.0, 3050.0, 4000.0, 3275.0, 4300.0, 3050.0, 4000.0, 3325.0, 3500.0, 3500.0, 4475.0, 3425.0, 3900.0, 3175.0, 3975.0, 3400.0, 4250.0, 3400.0, 3475.0, 3050.0, 3725.0, 3000.0, 3650.0, 4250.0, 3475.0, 3450.0, 3750.0, 3700.0, 4000.0, 3500.0, 3900.0, 3650.0, 3525.0, 3725.0, 3950.0, 3250.0, 3750.0, 4150.0, 3700.0, 3800.0, 3775.0, 3700.0, 4050.0, 3575.0, 4050.0, 3300.0, 3700.0, 3450.0, 4400.0, 3600.0, 3400.0, 2900.0, 3800.0, 3300.0, 4150.0, 3400.0, 3800.0, 3700.0, 4550.0, 3200.0, 4300.0, 3350.0, 4100.0, 3600.0, 3900.0, 3850.0, 4800.0, 2700.0, 4500.0, 3950.0, 3650.0, 3550.0, 3500.0, 3675.0, 4450.0, 3400.0, 4300.0, 3250.0, 3675.0, 3325.0, 3950.0, 3600.0, 4050.0, 3350.0, 3450.0, 3250.0, 4050.0, 3800.0, 3525.0, 3950.0, 3650.0, 3650.0, 4000.0, 3400.0, 3775.0, 4100.0, 3775.0, 4500.0, 5700.0, 4450.0, 5700.0, 5400.0, 4550.0, 4800.0, 5200.0, 4400.0, 5150.0, 4650.0, 5550.0, 4650.0, 5850.0, 4200.0, 5850.0, 4150.0, 6300.0, 4800.0, 5350.0, 5700.0, 5000.0, 4400.0, 5050.0, 5000.0, 5100.0, 4100.0, 5650.0, 4600.0, 5550.0, 5250.0, 4700.0, 5050.0, 6050.0, 5150.0, 5400.0, 4950.0, 5250.0, 4350.0, 5350.0, 3950.0, 5700.0, 4300.0, 4750.0, 5550.0, 4900.0, 4200.0, 5400.0, 5100.0, 5300.0, 4850.0, 5300.0, 4400.0, 5000.0, 4900.0, 5050.0, 4300.0, 5000.0, 4450.0, 5550.0, 4200.0, 5300.0, 4400.0, 5650.0, 4700.0, 5700.0, 4650.0, 5800.0, 4700.0, 5550.0, 4750.0, 5000.0, 5100.0, 5200.0, 4700.0, 5800.0, 4600.0, 6000.0, 4750.0, 5950.0, 4625.0, 5450.0, 4725.0, 5350.0, 4750.0, 5600.0, 4600.0, 5300.0, 4875.0, 5550.0, 4950.0, 5400.0, 4750.0, 5650.0, 4850.0, 5200.0, 4925.0, 4875.0, 4625.0, 5250.0, 4850.0, 5600.0, 4975.0, 5500.0, 4725.0, 5500.0, 4700.0, 5500.0, 4575.0, 5500.0, 5000.0, 5950.0, 4650.0, 5500.0, 4375.0, 5850.0, 4875.0, 6000.0, 4925.0, null, 4850.0, 5750.0, 5200.0, 5400.0], \"sex\": [\"MALE\", \"FEMALE\", \"FEMALE\", null, \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", null, null, null, null, \"FEMALE\", \"MALE\", \"MALE\", \"FEMALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"MALE\", \"FEMALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"MALE\", nullnull, \"MALE\", \"FEMALE\", \"MALE\", \"MALE\", \"FEMALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"MALE\", \"FEMALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", null, \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"MALE\", \"FEMALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"MALE\", \"FEMALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", null, \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\", null, \"MALE\", \"FEMALE\", null, \"FEMALE\", \"MALE\", \"FEMALE\", \"MALE\"]}}]}\n\n\n```{python}\nimport pandas as pd\npenguins = pd.read_csv(\"palmer-penguins.csv\")\nojs_define(data = penguins)\n```\nThe call to ojs_define(data = penguins) says that we want to make a variable named data (with the value of the penguins data frame) available to OJS\nDepending on the visualization library you use, one additional step may be required to consume the data from JavaScript. In this case, the Plot function expects data by row rather than by column, so we transpose() it before filtering:\n```{ojs}\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n```\nSee the article on Data Sources to learn more about the various ways to prepare and read data."
  },
  {
    "href": "docs\\interactive\\ojs\\index.html#ojs-cells",
    "title": "Observable JS",
    "section": "OJS Cells",
    "text": "There are many options available to customize the behavior of {ojs} code cells, including showing, hiding, and collapsing code as well as controlling the visibility and layout of outputs.\nThe most important cell option to be aware of is the echo option, which controls whether source code is displayed. You’ll have different preferences depending on whether you are embedding visualizations in an article or creating a notebook or full-on tutorial.\nCode in {ojs} cells is displayed by default. To prevent display of code for an entire document, set the echo: false option in YAML metadata:\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\n---\nYou can also specify this option on a per-cell basis. For example:\n```{ojs}\n//| echo: false\ndata = FileAttachment(\"palmer-penguins.csv\").csv({ typed: true })\n```\nTo learn about all of the options available, see the article on OJS Cells."
  },
  {
    "href": "docs\\interactive\\ojs\\index.html#learning-more",
    "title": "Observable JS",
    "section": "Learning More",
    "text": "These articles go into more depth on using OJS in Quarto documents:\n\nLibraries covers using standard libraries and external JavaScript libraries.\nData Sources outlines the various ways to read and pre-process data.\nOJS Cells goes into more depth on cell execution, output, and layout.\nShiny Reactives describes how to integrate Shiny with OJS.\nCode Reuse delves into ways to re-use OJS code across multiple documents.\n\nIf you want to learn more about the underlying mechanics of reactivity, check out these notebooks from Mike Bostock:\n\nFive Minute Introduction\nObservable’s not JavaScript\nIntroduction to Views\nHow Observable Runs"
  },
  {
    "href": "docs\\interactive\\ojs\\libraries.html#overview",
    "title": "Libraries",
    "section": "Overview",
    "text": "There are three types of library you’ll generally use with OJS:\n\nObservable core libraries automatically available in every document.\nThird-party JavaScript libraries from npm and ObservableHQ.\nCustom libraries you and/or your colleagues have created\n\nIn this document we’ll provide a high-level overview of the core libraries and some examples of using third-party libraries (D3 and Arquero). Creating your own libraries is covered in the article on Code Reuse."
  },
  {
    "href": "docs\\interactive\\ojs\\libraries.html#stdlib",
    "title": "Libraries",
    "section": "Stdlib",
    "text": "The Observable standard library provides the core capabilities that underlie rendering content and loading code and data. Some particularly important components of the standard library include:\n\n\n\nComponent\nDescription\n\n\n\n\nDOM\nDynamically creating DOM elements\n\n\nFileAttachments\nReading files in a variety of formats\n\n\nrequire\nImporting third-party modules from NPM and GitHub\n\n\n\nYou can find complete documentation for the standard library at https://github.com/observablehq/stdlib."
  },
  {
    "href": "docs\\interactive\\ojs\\libraries.html#inputs",
    "title": "Libraries",
    "section": "Inputs",
    "text": "The Observable inputs library provides widgets that can be bound to reactive expressions via the viewof keyword. Some particularly useful input include:\n\n\n\nComponent\nDescription\n\n\n\n\nRadio\nChoose from mutually exclusive set of options\n\n\nCheckbox\nChoose one or more options from a list\n\n\nRange\nSlider for continuous numeric values\n\n\nSelect\nDrop down select box\n\n\nTable\nSelect one or more rows from a table\n\n\n\nYou can find complete documentation for all of the inputs at https://github.com/observablehq/inputs."
  },
  {
    "href": "docs\\interactive\\ojs\\libraries.html#plot",
    "title": "Libraries",
    "section": "Plot",
    "text": "Observable Plot is a JavaScript library for exploratory data visualization. Plot is built upon a set of core concepts (Marks, Scales, Transforms, and Facets) that can be composed together to create custom visualizations.\nHere’s an example of a scatterplot of the height and weight of Olympic athletes created with Plot:\n\nathletes = FileAttachment(\"athletes.csv\").csv({typed: true})\n\n\n\n\n\n\n\nPlot.plot({\n  grid: true,\n  facet: {\n    data: athletes,\n    y: \"sex\"\n  },\n  marks: [\n    Plot.rectY(\n      athletes, \n      Plot.binX({y: \"count\"}, {x: \"weight\", fill: \"sex\"})\n    ),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\nYou can find complete documentation for Observable plot https://github.com/observablehq/plot."
  },
  {
    "href": "docs\\interactive\\ojs\\libraries.html#d3",
    "title": "Libraries",
    "section": "D3",
    "text": "D3.js is a JavaScript library for manipulating documents based on data. D3 is capable of creating just about any interactive graphic you can imagine!\nHere’s a zoomable sunburst diagram (originally published here) created with D3. Only two layers of the hierarchy are shown at a time. Click a node to zoom in, or the center to zoom out.\n\n\n\n\n\n\n\nTo use D3 in an {ojs} cell, first import it using the require function (which loads modules hosted at jsDelivr):\n```{ojs}\nd3 = require(\"d3@6\")\n```\nThen, use d3 as needed to create your visualization. For example, here are the first few lines of the cell that creates the visualization above:\n```{ojs}\nsunburst = {\n  const root = partition(flareData);\n  root.each(d => d.current = d);\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [0, 0, width, width])\n      .style(\"font\", \"15px sans-serif\");\n\n  // ...remainder of implementation\n  \n  return svg.node();\n}\nSee the Sunburst example for the complete source code. To learn more about D3, visit https://d3js.org/."
  },
  {
    "href": "docs\\interactive\\ojs\\libraries.html#arquero",
    "title": "Libraries",
    "section": "Arquero",
    "text": "Arquero is a JavaScript library for query processing and transformation of array-backed data tables. Following the relational algebra and inspired by the design of dplyr, Arquero provides a fluent API for manipulating column-oriented data frames.\nImport Arquero (aq) and ab alias to Arquero operations (op) with the following:\n\nimport { aq, op } from '@uwdata/arquero'\n\n\n\n\n\n\nRead datasets using a reader function (here we load a CSV):\n\npenguins = aq.loadCSV(\"palmer-penguins.csv\")\n\n\n\n\n\n\nFilter and aggregate data, then view it:\n\npenguins\n  .groupby('species')\n  .filter(p => p.body_mass > 0)\n  .rollup({\n    count: op.count(),\n    avg_mass: op.average('body_mass')\n   })\n  .view()\n\n\n\n\n\n\nSee the Arquero example for complete source code. To learn more about using Arquero, see the Introducing Arquero tutorial."
  },
  {
    "href": "docs\\interactive\\ojs\\libraries.html#modules",
    "title": "Libraries",
    "section": "Modules",
    "text": "NPM\nThe require function in the standard library can be used to import npm modules (which are served from the jsDelivr CDN):\n```{ojs}\nd3 = require(\"d3\")\ntopojson = require(\"topojson\")\n```\nModules can optionally include an @ sign with a version. For example:\n```{ojs}\nd3 = require(\"d3@6\")\n```\nSee the jsDelivr documentation for additional details. Note that the require function automatically prepends the prefix https://cdn.jsdelivr.net/npm/ when resolving imports, so where the jsDeliver documentation says to use this URL:\nhttps://cdn.jsdelivr.net/npm/package@version/file\nYou need only pass this to require:\npackage@version/file\n\n\nObservableHQ\nNotebooks published on http://observablehq.com can also be compiled and downloaded as JavaScript modules.\nWhile notebooks often have their own embedded dataset, you can actually replace this data with your own when you import them! Returning to the sunburst example from above, here we import a notebook and use the with keyword to provide our own value for data:\n\npdata = FileAttachment(\"population.json\").json()\nimport { chart } with { pdata as data } from \"@d3/zoomable-sunburst\"\nchart\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOne important restriction to be aware of is that not all notebooks published on ObservableHQ have an open-source license. Notebooks need to explicitly tagged with a license as an indication that it’s okay to use them outside of ObservableHQ.\nYou can see the license for a notebook in its header area. For, example this notebook is tagged with the ISC license:\n\nYou should check the license of ObservableHQ notebooks before you import them. See the documentation on notebook licenses for additional details on how to do this."
  },
  {
    "href": "docs\\interactive\\ojs\\libraries.html#appendix",
    "title": "Libraries",
    "section": "Appendix",
    "text": "flareData = FileAttachment(\"examples/flare-2.json\").json()\n\n\n\n\n\n\n\npartition = flareData => {\n  const root = d3.hierarchy(flareData)\n      .sum(d => d.value)\n      .sort((a, b) => b.value - a.value);\n  return d3.partition()\n      .size([2 * Math.PI, root.height + 1])\n    (root);\n}\n\n\n\n\n\n\n\ncolor = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, flareData.children.length + 1))\n\n\n\n\n\n\n\nformat = d3.format(\",d\")\n\n\n\n\n\n\n\nwidth = 932\n\n\n\n\n\n\n\nradius = width / 6\n\n\n\n\n\n\n\narc = d3.arc()\n    .startAngle(d => d.x0)\n    .endAngle(d => d.x1)\n    .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\n    .padRadius(radius * 1.5)\n    .innerRadius(d => d.y0 * radius)\n    .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1))\n\n\n\n\n\n\n\nd3 = require(\"d3@6\")"
  },
  {
    "href": "docs\\interactive\\ojs\\ojs-cells.html#cell-execution",
    "title": "OJS Cells",
    "section": "Cell Execution",
    "text": "A critical difference between OJS cell execution and traditional notebooks is that in OJS cells do not need to be defined in any particular order.\nBecause execution is fully reactive, the runtime will automatically execute cells in the correct order based on how they reference each other. This is more akin to a spreadsheet than a traditional notebook with linear cell execution.\nFor example, in this cell we reference a variable that is not yet defined (it’s defined immediately below):\n\nx + 5\n\n\n\n\n\n\n\nx = 10\n\n\n\n\n\n\nThis code works because the Observable runtime automatically determines the correct order of execution for the cells."
  },
  {
    "href": "docs\\interactive\\ojs\\ojs-cells.html#cell-output",
    "title": "OJS Cells",
    "section": "Cell Output",
    "text": "By default, OJS cells show their full source code and output within rendered documents. Depending on the type of document you are creating you might want to change this behavior either globally or for individual cells.\n\nCode Visibility\nThe echo option controls whether cells display their source code. To prevent display of code for an entire document, set the echo: false option in YAML metadata:\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\n---\nYou can also specify this option on a per-cell basis. For example:\n```{ojs}\n//| echo: false\ndata = FileAttachment(\"palmer-penguins.csv\").csv({ typed: true })\n```\n\n\nOutput Visibility\nOJS cell output is also displayed by default. You can change this at a global or (more likely) per-cell level using the output option. For example, here we disable output for a cell:\n```{ojs}\n//| output: false\ndata\n```\nNote that cells which only carry assignments do not print their output by default. For example, this assignment won’t print anything:\n```{ojs}\ndata = FileAttachment(\"palmer-penguins.csv\").csv({ typed: true })\n```\nIf you want to print even the results of assignments, you can specify the output: all option. For example:\n```{ojs}\n//| output: all\ndata = FileAttachment(\"palmer-penguins.csv\").csv({ typed: true })\n```\n\n\n\n\n\n\n\nIf you click the inspector you’ll see it expand to reveal a subset of the data as JSON.\n\n\nCode Display\nWe talked about showing and hiding source code above, but what about controlling exactly how it’s displayed?\nThere are options available for customizing the appearance of code blocks (highlighting, background, border, etc.) as well as how horizontal overflow is handled. See the article on HTML Code Blocks for all of the details.\nOne option we wanted to specifically highlight here is code folding, which enables you to collapse code but still provide an option for users to view it. This is especially handy for custom JavaScript visualizations as they often span dozens of lines of code.\nAdd the code-fold: true option to a code cell to enable code folding (you can also enable this globally). For example:\n```{ojs}\n//| code-fold: true\n\n```\nHere’s a demonstration (click the “Code” button to show the code):\n\n\nCode\npdata = FileAttachment(\"palmer-penguins.csv\").csv({typed: true})\n\nPlot.plot({\n  facet: {\n    data: pdata,\n    x: \"sex\",\n    y: \"species\",\n    marginRight: 80\n  },\n  marks: [\n    Plot.frame(),\n    Plot.rectY(pdata, \n      Plot.binX(\n        {y: \"count\"}, \n        {x: \"body_mass\", thresholds: 20, fill: \"species\"}\n      )\n    ),\n    Plot.tickX(pdata, \n      Plot.groupZ(\n        {x: \"median\"}, \n        {x: \"body_mass\",\n         z: d => d.sex + d.species,\n         stroke: \"#333\",\n         strokeWidth: 2\n        }\n      )\n    )\n  ]\n})"
  },
  {
    "href": "docs\\interactive\\ojs\\ojs-cells.html#cell-layout",
    "title": "OJS Cells",
    "section": "Cell Layout",
    "text": "There are additional panel and layout options which you can add to OJS cells to customize how their output is presented. Here’s a version of some of the previous examples we’ve used presented with a sidebar and tabset:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe created this layout by first adding the panel: sidebar option to the cell with our inputs:\n```{ojs}\n//| panel: sidebar\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n```\nWe then added a tabset (div of class .panel-tabset) with Plot and Data tabs (headings within the div define the tabs):\n::: {.panel-tabset}\n\n## Plot\n\n```{ojs}\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\n\n## Data\n\n```{ojs}\nInputs.table(filtered)\n```\n\n:::\nSee the Layout example for the full source code.\nLearn more in the article on Layout for interactive documents."
  },
  {
    "href": "docs\\interactive\\ojs\\ojs-cells.html#cell-figures",
    "title": "OJS Cells",
    "section": "Cell Figures",
    "text": "OJS cells can also be rendered as numbered, cross-referenceable figures. To do this, add the label and fig-cap options to the cell. For example:\n```{ojs}\n//| label: fig-penguin-body-mass\n//| fig-cap: \"Penguin body mass by sex and species\"\nThen to reference the figure use its label in a markdown cross reference:\nSee @fig-penguin-body-mass for further illustration.\nHere’s how the cross-reference and figure will render:\nSee fig. 1 for further illustration.\n\n\n\n\n\n\nFigure 1: Penguin body mass by sex and species"
  },
  {
    "href": "docs\\interactive\\ojs\\shiny.html#overview",
    "title": "Shiny Reactives",
    "section": "Overview",
    "text": "Earlier we described how to use the ojs_define() function to make data from Python and R available in OJS cells. In this scenario, data pre-processing is done once during render time then all subsequent interactions are handled on the client.\nBut what if you want to do data transformation dynamically in response to user inputs? This is also possible with ojs_define(), as it can be passed not just static values but also Shiny reactives (assuming it’s running inside a Shiny interactive document)."
  },
  {
    "href": "docs\\interactive\\ojs\\shiny.html#hello-shiny",
    "title": "Shiny Reactives",
    "section": "Hello, Shiny",
    "text": "Here is the K-Means Clustering example from the Shiny Gallery implemented with an OJS client and Shiny Server:\n\n\n\n\n\nYou can see the document deployed at https://jjallaire.shinyapps.io/kmeans-shiny-ojs/.\n\nSource Code\nLet’s take a look at the source code. On the client we have familiar looking OJS inputs and a plot laid out using panel: sidebar and panel: fill:\n```{ojs}\n//| panel: sidebar\nvars = [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]\nviewof xcol = Inputs.select(vars, {label: \"X Variable\"})\nviewof ycol = Inputs.select(vars, {label: \"Y Variable\", value: vars[1]})\nviewof count = Inputs.range([1, 9], {label: \"Cluster Count\", step: 1, value: 3})\n```\n\n```{ojs}\n//| panel: fill\nPlot.plot({\n  color: {\n    type: \"ordinal\",\n    scheme: \"category10\"\n  },\n  marks: [\n    Plot.dot(transpose(selectedData), {\n      x: xcol,\n      y: ycol,\n      fill: (d, i) => clusters.cluster[i],\n    }),\n    Plot.dot(clusters.centers, { \n      x: d => d[0],\n      y: d => d[1],\n      r: 10,\n      stroke: \"black\",\n      fill: (d, i) => i + 1\n    }),\n  ]\n})\n```\nNote that the plotting code references the variables selectedData and clusters. These will be provided by reactive expressions within the Shiny server code. Note also that we use the transpose() function to reshape the data into the row-oriented format that the Plot library expects.\nHere is the server code:\n```{r}\n#| context: server\n\nselectedData <- reactive({\n  iris[, c(input$xcol, input$ycol)]\n})\n\nclusters <- reactive({\n  kmeans(selectedData(), input$count)\n})\n\nojs_define(selectedData, clusters)\n```\nWe designate this code as running on the server via the context: server option.\nNote that we reference several inputs that were defined by viewof expressions on the client (e.g. input$xcol). When these inputs change they will cause the appropriate server side reactives to re-execute.\nWe create two reactive values (selectedData and clusters) and provide them to the client using ojs_define(). The plot will be automatically re-drawn on the client side when these values change."
  },
  {
    "href": "docs\\interactive\\ojs\\shiny.html#examples",
    "title": "Shiny Reactives",
    "section": "Examples",
    "text": "Here are some examples that demonstrate various ways to use OJS with Shiny:\n\n\n\n\n\n\n\n\nExample\nSource\nDescription\n\n\n\n\nK-Means\nCode\nSimple example of binding OJS inputs to Shiny inputs and shiny reactives to OJS plots.\n\n\nBinning\nCode\nDemonstrates fast binning of a medium sized dataset (32mb) on the server.\n\n\nData Binding\nCode\nDemonstrates importing a notebook from https://observablehq.com and binding it’s data field to a Shiny reactive."
  },
  {
    "href": "docs\\interactive\\ojs\\shiny.html#bindings",
    "title": "Shiny Reactives",
    "section": "Bindings",
    "text": "OJS to Shiny\nIn the example above we took advantage of the fact that by default OJS viewof expressions are automatically propagated to Shiny inputs (e.g input$xcol). This provides a reasonable separation of concerns, and prevents excess network traffic in the case that you have large OJS variables.\nHowever, if you want to use other OJS variables as Shiny inputs this is also possible using the ojs-export option. The default behavior maps to the following configuration:\n---\nserver:\n  type: shiny\n  ojs-export: viewof\n---\nYou can also specify ojs-export: all to cause all OJS reactives to be bound to Shiny inputs:\n---\nserver:\n  type: shiny\n  ojs-export: all\n---\nAlternatively, you can specify a list of OJS reactives by name (including using ~ to filter out reactives), and optionally combine this with the viewof and/or all options. For example:\n---\nserver:\n  type: shiny\n  ojs-export: [all, ~large_dataset]\n---\n\n\nShiny to OJS\nLess common but occasionally useful is the ability to bind Shiny inputs into OJS. By default no such bindings occur, however you can use the ojs-import option to opt-in for specific Shiny inputs. For example:\n---\nserver: \n  type: shiny\n  ojs-import: [minimum, maximum]\n---"
  },
  {
    "href": "docs\\interactive\\shiny\\execution.html#overview",
    "title": "Execution Contexts",
    "section": "Overview",
    "text": "Shiny interactive documents can contain both code that executes at render time as well as code that executes on the server in response to user actions and changes in input values. A solid understanding of these execution contexts is important both to have the right mental model during development as well as to optimize the performance of your document."
  },
  {
    "href": "docs\\interactive\\shiny\\execution.html#render-server-contexts",
    "title": "Execution Contexts",
    "section": "Render & Server Contexts",
    "text": "To break this down more clearly, let’s revisit the “Hello, Shiny” document we started with in the introduction to interactive documents:\n---\ntitle: \"Old Faithful\"\nformat: html\nserver: shiny\n---\n\n```{r}\nsliderInput(\"bins\", \"Number of bins:\", \n            min = 1, max = 50, value = 30)\nplotOutput(\"distPlot\")\n```\n\n```{r}\n#| context: server\noutput$distPlot <- renderPlot({\n  x <- faithful[, 2]  # Old Faithful Geyser data\n  bins <- seq(min(x), max(x), length.out = input$bins + 1)\n  hist(x, breaks = bins, col = 'darkgray', border = 'white')\n})\n```\nHere is how execution breaks down for this document:\n\nThe first code chunk that contains the calls to sliderInput() and plotOutput() will execute when you render the document (e.g. quarto render old-faithful.qmd).\nThe second code chunk with the context: server option will not execute at render time, but rather will execute only when the document is served.\n\nIt’s critical to understand that the two chunks are run in completely separate R sessions. That means that you cannot access variables created in the first chunk within the second, and vice-versa. The is analogous to the ui.R and server.R scripts that compose most normal Shiny applications.\nOf course, it’s quite useful to be able to re-use code between contexts, and we’ll cover some ways to do this in the Sharing Code section below.\n\n\n\n\n\n\nIn order to make the code of interactive documents straightforward to understand and work with, we strongly recommend that your server contexts (there can be more than one) be located at the bottom of the document. This makes the separate execution environments more clear in the flow of the document source code.\n\n\n\n\nserver.R\nThere is one other option if you prefer to have a stronger separation. You can restrict your .qmd file to only code that will execute at render time, and then split out the server code into a separate server.R file.\nRe-writing our example in this fashion would look like this:\n\nold-faithful.qmd\n---\ntitle: \"Old Faithful\"\nformat: html\nserver: shiny\n---\n\n```{r}\nsliderInput(\"bins\", \"Number of bins:\", \n            min = 1, max = 50, value = 30)\nplotOutput(\"distPlot\")\n```\n\n\nserver.R\nfunction(input, output, session) {\n  output$distPlot <- renderPlot({\n    x <- faithful[, 2]  # Old Faithful Geyser data\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x, breaks = bins, col = 'darkgray', border = 'white')\n  })\n}\nThis is perhaps a bit less convenient but does align better with the traditional ui.R / server.R separation that exists in traditional Shiny applications."
  },
  {
    "href": "docs\\interactive\\shiny\\execution.html#sharing-code",
    "title": "Execution Contexts",
    "section": "Sharing Code",
    "text": "Sharing code between rendering contexts works a bit differently depending on if your code is in a single .qmd file or if it uses server.R. We’ll cover both scenarios below.\n\nSingle File\n\ncontext: setup\nTo have code execute in both rendering and serving contexts, create a code chunk with context: setup. For example:\n```{r}\n#| context: setup\n#| include: false\n\n# load libraries\nlibrary(dplyr)\n\n# load data\ndataset <- import_data(\"data.csv\")\ndataset <- sample_n(dataset, 1000)\n```\nThis code will execute at both render time as well as when the server is created for each new user session. Note that we also specify include: false to make sure that code, warnings, and output from the chunk are not included in the rendered document.\n\n\ncontext: data\nThe loading and manipulation of data often dominates the startup time of Shiny applications. Since interactive documents are executed in two phases (the initial render and then the serving of the document to users) we can perform the expensive data manipulations during rendering and then simply load the data when starting up the application.\nYou can define prerendered data by adding the context: data option to an R code chunk. The chunk will be executed during render and any R objects it creates will be saved to an .RData file, which will then be loaded during Shiny server startup. For example, we could take the the setup chunk illustrated above and factor out the data loading into its own chunk:\n```{r}\n#| context: data\n#| include: false\n\ndataset <- import_data(\"data.csv\")\ndataset <- sample_n(dataset, 1000)\n```\nNote that R objects created within a context: data chunk are available to both the UI rendering and server contexts.\n\n\nKnitr cache\nYou can further improve the performance of data rendering by adding the cache: true option to the data chunk. This will cause the code chunk to be re-executed only when required. For example:\n```{r}\n#| context: data\n#| include: false\n#| cache: true\n#| cache.extra: !expr file.info(\"data.csv\")$mtime\n\ndataset <- import_data(\"data.csv\")\ndataset <- sample_n(dataset, 1000)\n```\nIn this example the cache will be invalidated if either the R code in the chunk changes or the modification time of the “data.csv” file changes (this is accomplished using the cache.extra option).\nYou can also invalidate an existing cache by removing the _cache directory alongside with your interactive document.\n\n\ncontext: server-start\nThere is one additional execution context that enables you to share code and data across multiple user sessions. Chunks with context: server-start executee once when the Shiny document is first run and are not re-executed for each new user of the document. Using context: server-start is appropriate for several scenarios including:\n\nEstablishing shared connections to remote servers (e.g. databases, Spark contexts, etc.).\nCreating reactive values intended to be shared across sessions (e.g. with reactivePoll or reactiveFileReader).\n\nFor example:\n```{r}\n#| context: server-start\n\nlibrary(DBI)\ndb <- dbConnect(...)\n```\n\n\n\nMultiple Files\nIf your interactive document uses a .qmd file to define the user-interface and a server.R file for the server, you can put shared code in a file named global.R. Functions and variables defined within global.R will be available both during render as well as during execution of the server.\nIn this scenario your interactive document consists of 3 source files:\n\n\n\n\n\n\n\nFile\nDescription\n\n\n\n\ndoc.qmd\nMarkdown content as well as Shiny inputs and outputs (e.g. sliderInput(), plotOutput(), etc.)\n\n\nserver.R\nMain server function with reactive expressions, assignments to outputs, etc.\n\n\nglobal.R\nCode shared between doc.qmd and server.R."
  },
  {
    "href": "docs\\interactive\\shiny\\index.html#introduction",
    "title": "Shiny",
    "section": "Introduction",
    "text": "If you are an R user, you may already be familiar with Shiny, a package that makes it easy to build interactive web apps with R.\nWhen using the Knitr computation engine, Quarto documents can include embedded Shiny components (e.g. a plot with sliders that control its inputs) or even simple Shiny applications that include several components.\nThis section covers integrating Shiny with Quarto and assumes that you already have basic familiarity with Shiny. To learn more about Shiny please visit https://shiny.rstudio.com.\n\n\n\n\n\n\nIn order to run the examples below you will need the very latest version of the rmarkdown package (v2.10), which you can install with:\n install.packages(\"rmarkdown\")"
  },
  {
    "href": "docs\\interactive\\shiny\\index.html#hello-shiny",
    "title": "Shiny",
    "section": "Hello, Shiny",
    "text": "For example, here’s a document that contains a plot of the “Old Faithful” dataset along with a slider to control the number of bins:\n\nHere’s the source code for this example:\n---\ntitle: \"Old Faithful\"\nformat: html\nserver: shiny\n---\n\n```{r}\nsliderInput(\"bins\", \"Number of bins:\", \n            min = 1, max = 50, value = 30)\nplotOutput(\"distPlot\")\n```\n\n```{r}\n#| context: server\noutput$distPlot <- renderPlot({\n  x <- faithful[, 2]  # Old Faithful Geyser data\n  bins <- seq(min(x), max(x), length.out = input$bins + 1)\n  hist(x, breaks = bins, col = 'darkgray', border = 'white')\n})\n```\nThere are two important differences between this document and a normal static document:\n\nThe inclusion server: shiny within the document’s options, which instructs Quarto to run a Shiny Server behind the document:\n---\ntitle: \"Old Faithful\"\nformat: html\nserver: shiny\n---\nThe inclusion of context: server as an option in the second code chunk, which delineates this R code as running within the Shiny Server (this is the code you would typically put in server.R):\n```{r}\n#| context: server\n\n```\n\nWe’ll cover running and deploying Quarto documents with Shiny components in the article on Running Documents. Before that though, let’s cover a more in-depth example."
  },
  {
    "href": "docs\\interactive\\shiny\\index.html#custom-layout",
    "title": "Shiny",
    "section": "Custom Layout",
    "text": "Here’s an example that includes multiple inputs as well as a more application like page layout with a sidebar:\n\nHere’s the source code for this example:\n---\ntitle: \"Iris K-Means Clustering\"\nformat: \n  html:\n    page-layout: custom\nserver: shiny\n---\n\n```{r}\n#| panel: sidebar\nvars <- setdiff(names(iris), \"Species\")\nselectInput('xcol', 'X Variable', vars)\nselectInput('ycol', 'Y Variable', vars, selected = vars[[2]])\nnumericInput('clusters', 'Cluster count', 3, min = 1, max = 9)\n```\n\n```{r}\n#| panel: fill\nplotOutput('plot1')\n```\n\n```{r}\n#| context: server\nselectedData <- reactive({\n    iris[, c(input$xcol, input$ycol)]\n  })\n\nclusters <- reactive({\n  kmeans(selectedData(), input$clusters)\n})\n\noutput$plot1 <- renderPlot({\n  palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n    \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n\n  par(mar = c(5.1, 4.1, 0, 1))\n  plot(selectedData(),\n       col = clusters()$cluster,\n       pch = 20, cex = 3)\n  points(clusters()$centers, pch = 4, cex = 4, lwd = 4)\n})\n```\nThere are a few things worth noting in this example:\n\nThe YAML front-matter includes the page-layout: custom option (to indicate we want our content to occupy the entire page rather than being centered with padding).\nWe add panel: sidebar and panel: fill to the two code chunks that define the user-interface to specify that we want them laid out in special panel containers.\nWe again use context: server on the last R code chunk to indicate that it contains the Shiny Server code.\n\n\nPage Layout\nSome interactive documents you create will use narrative interspersed with Shiny components and some (like this example) will be full page applications. Some may even by hybrids—for example imagine a sidebar on the left containing inputs that control outputs interspersed with narrative in the main document body.\nSee the article on Component Layout to learn more about the available tools for managing the layout of interactive documents."
  },
  {
    "href": "docs\\interactive\\shiny\\index.html#examples",
    "title": "Shiny",
    "section": "Examples",
    "text": "Here are some deployed examples of Quarto documents that use Shiny:\n\n\n\n\n\n\n\n\nExample\nSource\nDescription\n\n\n\n\nOld Faithful\nCode\nDemonstrates incorporating an interactive plot into the main flow of a document.\n\n\nK-Means\nCode\nDemonstrates using a more “application-like” page layout (sidebar and main panel)\n\n\nDiamonds\nCode\nDemonstrates an alternate way to layout inputs (at the bottom of the page in three columns)."
  },
  {
    "href": "docs\\interactive\\shiny\\index.html#learning-more",
    "title": "Shiny",
    "section": "Learning More",
    "text": "To learn more about Shiny interactive documents see the following articles:\n\nRunning Documents covers how to run interactive documents both within RStudio and at the command line, as well as how to deploy them to end users.\nExecution Contexts goes in depth on when different code blocks (e.g. rendering vs. serving) run as well as how to cache expensive computations for more responsive documents.\nExternal Resources describes how to make sure that Shiny can locate resources (e.g. CSS, JS, images, etc.) that you include in your document.\nComponent Layout enumerates the various techniques you can use to layout interactive components within your documents.\n\nIf you are using both JavaScript and Shiny to create interactive documents, you might also be interested in the article on using Shiny Reactives with OJS."
  },
  {
    "href": "docs\\interactive\\shiny\\resources.html#overview",
    "title": "External Resources",
    "section": "Overview",
    "text": "There are two types of external resource file that might be referenced from within a Shiny interactive document:\n\nFiles referenced from R code (e.g. R scripts, datasets, configuration files, etc.); and\nStatic assets referenced from the web document (e.g. CSS style-sheets, images, etc.)\n\nBelow we’ll describe how each of these resource types are handled within interactive documents."
  },
  {
    "href": "docs\\interactive\\shiny\\resources.html#code-resources",
    "title": "External Resources",
    "section": "Code Resources",
    "text": "For files referenced from R code, you can reference anything located within the directory of (or sub-directories of) the main .qmd file. This is no different than with any other .qmd file or even R script.\nSimilarly, files created by executing R code (e.g. figures generated from code chunks) are automatically located in the document _files directory alongside the HTML output file. No special handling is required for these files."
  },
  {
    "href": "docs\\interactive\\shiny\\resources.html#asset-resources",
    "title": "External Resources",
    "section": "Asset Resources",
    "text": "Many interactive documents will consist of only the generated HTML and figures located in the _files directory. However, in some cases you may want to add static images, CSS files, or other assets to your document.\nIn these cases, you need to be sure to locate the files within one of the following specially named sub-directories to ensure they can be located by the Shiny server:\n\n\n\nDirectory\nDescription\n\n\n\n\nimages/\nImage files (e.g. PNG, JPEG, etc.)\n\n\ncss/\nCSS stylesheets\n\n\njs/\nJavaScript scripts\n\n\nwww/\nAny other files (e.g. downloadable datasets)\n\n\n\nThe reason that all files within the directory of the main .qmd can’t be referenced from within the web document is that many of these files are application source code and data, which may not be something you want to be downloadable by end users. By restricting the files which can be referenced to the above directories you can control which files are downloadable and which are not."
  },
  {
    "href": "docs\\interactive\\shiny\\running.html#overview",
    "title": "Running Documents",
    "section": "Overview",
    "text": "There are a number of ways to run Shiny interactive documents:\n\nUse Run Document within the RStudio IDE.\nUse the quarto run command line interface.\nDeploy them to a server for use by a wider audience.\n\nWe’ll cover all of these scenario in depth here. Note that in order to run interactive Shiny documents you will to intall the very latest version of the rmarkdown package (v2.10) which you can install as follows:\ninstall.packages(\"rmarkdown\")"
  },
  {
    "href": "docs\\interactive\\shiny\\running.html#rstudio-ide",
    "title": "Running Documents",
    "section": "RStudio IDE",
    "text": "While you are developing an interactive document it will likely be most convenient to run within RStudio.\nNote that you need the daily build of RStudio in order to run Quarto interactive documents, which you can download here https://dailies.rstudio.com.\nClick the Run Document button while editing a Shiny interactive document to render and view the document within the IDE:\n\nWhen you make changes, just click Run Document again to see them reflected in the document preview.\nTwo options you may want to consider enabling are Run on Save and Preview in Viewer Pane (by default previews occur in an external window). You can access these options on the editor toolbar:"
  },
  {
    "href": "docs\\interactive\\shiny\\running.html#command-line",
    "title": "Running Documents",
    "section": "Command Line",
    "text": "You can also run Shiny interactive documents from the command line via quarto run. For example:\nquarto run document.qmd\nThere are a number of options to the run command to control the port and host of the document server as well as whether a browser is automatically opened for the running document. You can learn more about these options with quarto run help.\nIf you are within an R session you can also use the quarto R package to run a document:\nlibrary(quarto)\nquarto_run(\"document.qmd\")"
  },
  {
    "href": "docs\\interactive\\shiny\\running.html#deployment",
    "title": "Running Documents",
    "section": "Deployment",
    "text": "ShinyApps\nYou can publish Shiny interactive documents to the ShinyApps hosted service. To do this you should ensure that you have:\n\nAn account on ShinyApps (use the signup form to create an account).\nThe very latest versions of the rsconnect and quarto R packages. You can install them as follows:\ninstall.packages(\"rsconnect\")\ninstall.packages(\"quarto\")\n\nYou can then deploy your interactive document using the quarto_publish_app() function of the quarto package. You can do this as follows (working from the directory that contains your document):\nlibrary(quarto)\nquarto_publish_app(server = \"shinyapps.io\")\nIf you are using RStudio you can also use the Publish button  available when working with an interactive document:\n\nNote that you should always Run Document locally prior to publishing your document (as this will create the .html file that is served on ShinyApps.\n\n\nRStudio Connect\nRStudio Connect is a server product from RStudio for secure sharing of applications, reports, and plots. You can publish Shiny interactive documents to RStudio Connect in much the same way as described above for ShinyApps.\nFirst, make sure you very latest development versions of the rsconnect and quarto R packages. You can install them as follows:\ninstall.packages(\"rsconnect\")\ninstall.packages(\"quarto\")\nNext, deploy your interactive document using the quarto_publish_app() function of the quarto package, providing the domain name or IP address of your RStudio Connect installation via the server parameter. You can do this as follows (working from the directory that contains your document):\nlibrary(quarto)\nquarto_publish_app(server = \"rsc.example.com\")\nIf you are using RStudio you can also use the Publish button  as described above in the ShinyApps documentation:\n\nAs with ShinyApps, you should always Run Document locally prior to publishing your document (as this will create the .html file that is served by RStudio Connect)."
  },
  {
    "href": "docs\\interactive\\widgets\\htmlwidgets.html#overview",
    "title": "htmlwidgets for R",
    "section": "Overview",
    "text": "The htmlwidgets package enables you to use JavaScript visualization libraries like Leaflet, Plotly, dygraphs, and threejs directly from R.\nIf you are uisng the Knitr engine with Quarto this is a great way to incorporate interactivity without learning JavaScript or requiring a Shiny Server to view your document."
  },
  {
    "href": "docs\\interactive\\widgets\\htmlwidgets.html#usage",
    "title": "htmlwidgets for R",
    "section": "Usage",
    "text": "Including htmlwidgets within a Quarto document is as easy as including an R plot. For example, here is how we embed a Leaflet map:\n```{r}\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```\n\n\n\n{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"http://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"http://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[-36.852,174.768,null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"The birthplace of R\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[-36.852,-36.852],\"lng\":[174.768,174.768]}},\"evals\":[],\"jsHooks\":[]}"
  },
  {
    "href": "docs\\interactive\\widgets\\htmlwidgets.html#layout",
    "title": "htmlwidgets for R",
    "section": "Layout",
    "text": "You can also use layout options with htmlwidgets. For example, here we provide a custom layout to arrange three dygraph time series plots:\n```{r}\n#| layout: [[1,1], [1]]\nlibrary(dygraphs)\ndygraph(fdeaths, \"Female Deaths\")\ndygraph(mdeaths, \"Male Deaths\")\ndygraph(ldeaths, \"All Deaths\")\n```\n\n\n\n\n{\"x\":{\"attrs\":{\"title\":\"Female Deaths\",\"labels\":[\"month\",\"V1\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60}}},\"scale\":\"monthly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"1974-01-01T00:00:00.000Z\",\"1974-02-01T00:00:00.000Z\",\"1974-03-01T00:00:00.000Z\",\"1974-04-01T00:00:00.000Z\",\"1974-05-01T00:00:00.000Z\",\"1974-06-01T00:00:00.000Z\",\"1974-07-01T00:00:00.000Z\",\"1974-08-01T00:00:00.000Z\",\"1974-09-01T00:00:00.000Z\",\"1974-10-01T00:00:00.000Z\",\"1974-11-01T00:00:00.000Z\",\"1974-12-01T00:00:00.000Z\",\"1975-01-01T00:00:00.000Z\",\"1975-02-01T00:00:00.000Z\",\"1975-03-01T00:00:00.000Z\",\"1975-04-01T00:00:00.000Z\",\"1975-05-01T00:00:00.000Z\",\"1975-06-01T00:00:00.000Z\",\"1975-07-01T00:00:00.000Z\",\"1975-08-01T00:00:00.000Z\",\"1975-09-01T00:00:00.000Z\",\"1975-10-01T00:00:00.000Z\",\"1975-11-01T00:00:00.000Z\",\"1975-12-01T00:00:00.000Z\",\"1976-01-01T00:00:00.000Z\",\"1976-02-01T00:00:00.000Z\",\"1976-03-01T00:00:00.000Z\",\"1976-04-01T00:00:00.000Z\",\"1976-05-01T00:00:00.000Z\",\"1976-06-01T00:00:00.000Z\",\"1976-07-01T00:00:00.000Z\",\"1976-08-01T00:00:00.000Z\",\"1976-09-01T00:00:00.000Z\",\"1976-10-01T00:00:00.000Z\",\"1976-11-01T00:00:00.000Z\",\"1976-12-01T00:00:00.000Z\",\"1977-01-01T00:00:00.000Z\",\"1977-02-01T00:00:00.000Z\",\"1977-03-01T00:00:00.000Z\",\"1977-04-01T00:00:00.000Z\",\"1977-05-01T00:00:00.000Z\",\"1977-06-01T00:00:00.000Z\",\"1977-07-01T00:00:00.000Z\",\"1977-08-01T00:00:00.000Z\",\"1977-09-01T00:00:00.000Z\",\"1977-10-01T00:00:00.000Z\",\"1977-11-01T00:00:00.000Z\",\"1977-12-01T00:00:00.000Z\",\"1978-01-01T00:00:00.000Z\",\"1978-02-01T00:00:00.000Z\",\"1978-03-01T00:00:00.000Z\",\"1978-04-01T00:00:00.000Z\",\"1978-05-01T00:00:00.000Z\",\"1978-06-01T00:00:00.000Z\",\"1978-07-01T00:00:00.000Z\",\"1978-08-01T00:00:00.000Z\",\"1978-09-01T00:00:00.000Z\",\"1978-10-01T00:00:00.000Z\",\"1978-11-01T00:00:00.000Z\",\"1978-12-01T00:00:00.000Z\",\"1979-01-01T00:00:00.000Z\",\"1979-02-01T00:00:00.000Z\",\"1979-03-01T00:00:00.000Z\",\"1979-04-01T00:00:00.000Z\",\"1979-05-01T00:00:00.000Z\",\"1979-06-01T00:00:00.000Z\",\"1979-07-01T00:00:00.000Z\",\"1979-08-01T00:00:00.000Z\",\"1979-09-01T00:00:00.000Z\",\"1979-10-01T00:00:00.000Z\",\"1979-11-01T00:00:00.000Z\",\"1979-12-01T00:00:00.000Z\"],[901,689,827,677,522,406,441,393,387,582,578,666,830,752,785,664,467,438,421,412,343,440,531,771,767,1141,896,532,447,420,376,330,357,445,546,764,862,660,663,643,502,392,411,348,387,385,411,638,796,853,737,546,530,446,431,362,387,430,425,679,821,785,727,612,478,429,405,379,393,411,487,574]]},\"evals\":[],\"jsHooks\":[]}\n\n\n\n{\"x\":{\"attrs\":{\"title\":\"Male Deaths\",\"labels\":[\"month\",\"V1\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60}}},\"scale\":\"monthly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"1974-01-01T00:00:00.000Z\",\"1974-02-01T00:00:00.000Z\",\"1974-03-01T00:00:00.000Z\",\"1974-04-01T00:00:00.000Z\",\"1974-05-01T00:00:00.000Z\",\"1974-06-01T00:00:00.000Z\",\"1974-07-01T00:00:00.000Z\",\"1974-08-01T00:00:00.000Z\",\"1974-09-01T00:00:00.000Z\",\"1974-10-01T00:00:00.000Z\",\"1974-11-01T00:00:00.000Z\",\"1974-12-01T00:00:00.000Z\",\"1975-01-01T00:00:00.000Z\",\"1975-02-01T00:00:00.000Z\",\"1975-03-01T00:00:00.000Z\",\"1975-04-01T00:00:00.000Z\",\"1975-05-01T00:00:00.000Z\",\"1975-06-01T00:00:00.000Z\",\"1975-07-01T00:00:00.000Z\",\"1975-08-01T00:00:00.000Z\",\"1975-09-01T00:00:00.000Z\",\"1975-10-01T00:00:00.000Z\",\"1975-11-01T00:00:00.000Z\",\"1975-12-01T00:00:00.000Z\",\"1976-01-01T00:00:00.000Z\",\"1976-02-01T00:00:00.000Z\",\"1976-03-01T00:00:00.000Z\",\"1976-04-01T00:00:00.000Z\",\"1976-05-01T00:00:00.000Z\",\"1976-06-01T00:00:00.000Z\",\"1976-07-01T00:00:00.000Z\",\"1976-08-01T00:00:00.000Z\",\"1976-09-01T00:00:00.000Z\",\"1976-10-01T00:00:00.000Z\",\"1976-11-01T00:00:00.000Z\",\"1976-12-01T00:00:00.000Z\",\"1977-01-01T00:00:00.000Z\",\"1977-02-01T00:00:00.000Z\",\"1977-03-01T00:00:00.000Z\",\"1977-04-01T00:00:00.000Z\",\"1977-05-01T00:00:00.000Z\",\"1977-06-01T00:00:00.000Z\",\"1977-07-01T00:00:00.000Z\",\"1977-08-01T00:00:00.000Z\",\"1977-09-01T00:00:00.000Z\",\"1977-10-01T00:00:00.000Z\",\"1977-11-01T00:00:00.000Z\",\"1977-12-01T00:00:00.000Z\",\"1978-01-01T00:00:00.000Z\",\"1978-02-01T00:00:00.000Z\",\"1978-03-01T00:00:00.000Z\",\"1978-04-01T00:00:00.000Z\",\"1978-05-01T00:00:00.000Z\",\"1978-06-01T00:00:00.000Z\",\"1978-07-01T00:00:00.000Z\",\"1978-08-01T00:00:00.000Z\",\"1978-09-01T00:00:00.000Z\",\"1978-10-01T00:00:00.000Z\",\"1978-11-01T00:00:00.000Z\",\"1978-12-01T00:00:00.000Z\",\"1979-01-01T00:00:00.000Z\",\"1979-02-01T00:00:00.000Z\",\"1979-03-01T00:00:00.000Z\",\"1979-04-01T00:00:00.000Z\",\"1979-05-01T00:00:00.000Z\",\"1979-06-01T00:00:00.000Z\",\"1979-07-01T00:00:00.000Z\",\"1979-08-01T00:00:00.000Z\",\"1979-09-01T00:00:00.000Z\",\"1979-10-01T00:00:00.000Z\",\"1979-11-01T00:00:00.000Z\",\"1979-12-01T00:00:00.000Z\"],[2134,1863,1877,1877,1492,1249,1280,1131,1209,1492,1621,1846,2103,2137,2153,1833,1403,1288,1186,1133,1053,1347,1545,2066,2020,2750,2283,1479,1189,1160,1113,970,999,1208,1467,2059,2240,1634,1722,1801,1246,1162,1087,1013,959,1179,1229,1655,2019,2284,1942,1423,1340,1187,1098,1004,970,1140,1110,1812,2263,1820,1846,1531,1215,1075,1056,975,940,1081,1294,1341]]},\"evals\":[],\"jsHooks\":[]}\n\n\n\n\n\n{\"x\":{\"attrs\":{\"title\":\"All Deaths\",\"labels\":[\"month\",\"V1\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60}}},\"scale\":\"monthly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"1974-01-01T00:00:00.000Z\",\"1974-02-01T00:00:00.000Z\",\"1974-03-01T00:00:00.000Z\",\"1974-04-01T00:00:00.000Z\",\"1974-05-01T00:00:00.000Z\",\"1974-06-01T00:00:00.000Z\",\"1974-07-01T00:00:00.000Z\",\"1974-08-01T00:00:00.000Z\",\"1974-09-01T00:00:00.000Z\",\"1974-10-01T00:00:00.000Z\",\"1974-11-01T00:00:00.000Z\",\"1974-12-01T00:00:00.000Z\",\"1975-01-01T00:00:00.000Z\",\"1975-02-01T00:00:00.000Z\",\"1975-03-01T00:00:00.000Z\",\"1975-04-01T00:00:00.000Z\",\"1975-05-01T00:00:00.000Z\",\"1975-06-01T00:00:00.000Z\",\"1975-07-01T00:00:00.000Z\",\"1975-08-01T00:00:00.000Z\",\"1975-09-01T00:00:00.000Z\",\"1975-10-01T00:00:00.000Z\",\"1975-11-01T00:00:00.000Z\",\"1975-12-01T00:00:00.000Z\",\"1976-01-01T00:00:00.000Z\",\"1976-02-01T00:00:00.000Z\",\"1976-03-01T00:00:00.000Z\",\"1976-04-01T00:00:00.000Z\",\"1976-05-01T00:00:00.000Z\",\"1976-06-01T00:00:00.000Z\",\"1976-07-01T00:00:00.000Z\",\"1976-08-01T00:00:00.000Z\",\"1976-09-01T00:00:00.000Z\",\"1976-10-01T00:00:00.000Z\",\"1976-11-01T00:00:00.000Z\",\"1976-12-01T00:00:00.000Z\",\"1977-01-01T00:00:00.000Z\",\"1977-02-01T00:00:00.000Z\",\"1977-03-01T00:00:00.000Z\",\"1977-04-01T00:00:00.000Z\",\"1977-05-01T00:00:00.000Z\",\"1977-06-01T00:00:00.000Z\",\"1977-07-01T00:00:00.000Z\",\"1977-08-01T00:00:00.000Z\",\"1977-09-01T00:00:00.000Z\",\"1977-10-01T00:00:00.000Z\",\"1977-11-01T00:00:00.000Z\",\"1977-12-01T00:00:00.000Z\",\"1978-01-01T00:00:00.000Z\",\"1978-02-01T00:00:00.000Z\",\"1978-03-01T00:00:00.000Z\",\"1978-04-01T00:00:00.000Z\",\"1978-05-01T00:00:00.000Z\",\"1978-06-01T00:00:00.000Z\",\"1978-07-01T00:00:00.000Z\",\"1978-08-01T00:00:00.000Z\",\"1978-09-01T00:00:00.000Z\",\"1978-10-01T00:00:00.000Z\",\"1978-11-01T00:00:00.000Z\",\"1978-12-01T00:00:00.000Z\",\"1979-01-01T00:00:00.000Z\",\"1979-02-01T00:00:00.000Z\",\"1979-03-01T00:00:00.000Z\",\"1979-04-01T00:00:00.000Z\",\"1979-05-01T00:00:00.000Z\",\"1979-06-01T00:00:00.000Z\",\"1979-07-01T00:00:00.000Z\",\"1979-08-01T00:00:00.000Z\",\"1979-09-01T00:00:00.000Z\",\"1979-10-01T00:00:00.000Z\",\"1979-11-01T00:00:00.000Z\",\"1979-12-01T00:00:00.000Z\"],[3035,2552,2704,2554,2014,1655,1721,1524,1596,2074,2199,2512,2933,2889,2938,2497,1870,1726,1607,1545,1396,1787,2076,2837,2787,3891,3179,2011,1636,1580,1489,1300,1356,1653,2013,2823,3102,2294,2385,2444,1748,1554,1498,1361,1346,1564,1640,2293,2815,3137,2679,1969,1870,1633,1529,1366,1357,1570,1535,2491,3084,2605,2573,2143,1693,1504,1461,1354,1333,1492,1781,1915]]},\"evals\":[],\"jsHooks\":[]}\n\n\n\nSee the article on Figures & Layout for additional documentation on custom layouts.\nTo learn about available htmlwidgets see the showcase page and the htmlwidget gallery."
  },
  {
    "href": "docs\\interactive\\widgets\\jupyter.html#overview",
    "title": "Jupyter Widgets",
    "section": "Overview",
    "text": "Jupyter Widgets enable you to use JavaScript visualization libraries like Leaflet, Plotly, and threejs directly from Python.\nIf you are uisng the Jupyter engine with Quarto this is a great way to incorporate interactivity without learning JavaScript."
  },
  {
    "href": "docs\\interactive\\widgets\\jupyter.html#usage",
    "title": "Jupyter Widgets",
    "section": "Usage",
    "text": "Including Jupyter Widgets within a Quarto document is as easy as including a plot. For example, here is how we embed a Leaflet map:\n\nfrom ipyleaflet import Map, Marker, basemaps, basemap_to_tiles\nm = Map(\n  basemap=basemap_to_tiles(\n    basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"\n  ),\n  center=(52.204793, 360.121558),\n  zoom=4\n)\nm.add_layer(Marker(location=(52.204793, 360.121558)))\nm\n\n\n{\"model_id\":\"0eabcbd83b884a248183ab42a7f8c198\",\"version_major\":2,\"version_minor\":0}\n\n\n\nHere’s an example of using Plotly:\n\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", \n                 marginal_y=\"violin\", marginal_x=\"box\", \n                 trendline=\"ols\", template=\"simple_white\")\nfig.show()\n\n                                                        require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"18571eb1-e190-4f1d-ae11-604617c03869\")) {                    Plotly.newPlot(                        \"18571eb1-e190-4f1d-ae11-604617c03869\",                        [{\"hovertemplate\":\"species=setosa<br>sepal_width=%{x}<br>sepal_length=%{y}<extra></extra>\",\"legendgroup\":\"setosa\",\"marker\":{\"color\":\"#1F77B4\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"setosa\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"scatter\",\"x\":[3.5,3.0,3.2,3.1,3.6,3.9,3.4,3.4,2.9,3.1,3.7,3.4,3.0,3.0,4.0,4.4,3.9,3.5,3.8,3.8,3.4,3.7,3.6,3.3,3.4,3.0,3.4,3.5,3.4,3.2,3.1,3.4,4.1,4.2,3.1,3.2,3.5,3.1,3.0,3.4,3.5,2.3,3.2,3.5,3.8,3.0,3.8,3.2,3.7,3.3],\"xaxis\":\"x\",\"y\":[5.1,4.9,4.7,4.6,5.0,5.4,4.6,5.0,4.4,4.9,5.4,4.8,4.8,4.3,5.8,5.7,5.4,5.1,5.7,5.1,5.4,5.1,4.6,5.1,4.8,5.0,5.0,5.2,5.2,4.7,4.8,5.4,5.2,5.5,4.9,5.0,5.5,4.9,4.4,5.1,5.0,4.5,4.4,5.0,5.1,4.8,5.1,4.6,5.3,5.0],\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"species=setosa<br>sepal_width=%{x}<extra></extra>\",\"legendgroup\":\"setosa\",\"marker\":{\"color\":\"#1F77B4\",\"symbol\":\"circle\"},\"name\":\"setosa\",\"notched\":true,\"offsetgroup\":\"setosa\",\"showlegend\":false,\"type\":\"box\",\"x\":[3.5,3.0,3.2,3.1,3.6,3.9,3.4,3.4,2.9,3.1,3.7,3.4,3.0,3.0,4.0,4.4,3.9,3.5,3.8,3.8,3.4,3.7,3.6,3.3,3.4,3.0,3.4,3.5,3.4,3.2,3.1,3.4,4.1,4.2,3.1,3.2,3.5,3.1,3.0,3.4,3.5,2.3,3.2,3.5,3.8,3.0,3.8,3.2,3.7,3.3],\"xaxis\":\"x3\",\"yaxis\":\"y3\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"species=setosa<br>sepal_length=%{y}<extra></extra>\",\"legendgroup\":\"setosa\",\"marker\":{\"color\":\"#1F77B4\",\"symbol\":\"circle\"},\"name\":\"setosa\",\"offsetgroup\":\"setosa\",\"scalegroup\":\"y\",\"showlegend\":false,\"type\":\"violin\",\"xaxis\":\"x2\",\"y\":[5.1,4.9,4.7,4.6,5.0,5.4,4.6,5.0,4.4,4.9,5.4,4.8,4.8,4.3,5.8,5.7,5.4,5.1,5.7,5.1,5.4,5.1,4.6,5.1,4.8,5.0,5.0,5.2,5.2,4.7,4.8,5.4,5.2,5.5,4.9,5.0,5.5,4.9,4.4,5.1,5.0,4.5,4.4,5.0,5.1,4.8,5.1,4.6,5.3,5.0],\"yaxis\":\"y2\"},{\"hovertemplate\":\"<b>OLS trendline</b><br>sepal_length = 0.690854 * sepal_width + 2.64466<br>R<sup>2</sup>=0.557681<br><br>species=setosa<br>sepal_width=%{x}<br>sepal_length=%{y} <b>(trend)</b><extra></extra>\",\"legendgroup\":\"setosa\",\"marker\":{\"color\":\"#1F77B4\",\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"setosa\",\"showlegend\":false,\"type\":\"scatter\",\"x\":[2.3,2.9,3.0,3.0,3.0,3.0,3.0,3.0,3.1,3.1,3.1,3.1,3.1,3.2,3.2,3.2,3.2,3.2,3.3,3.3,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.5,3.5,3.5,3.5,3.5,3.5,3.6,3.6,3.7,3.7,3.7,3.8,3.8,3.8,3.8,3.9,3.9,4.0,4.1,4.2,4.4],\"xaxis\":\"x\",\"y\":[4.233624785627936,4.648137423036916,4.717222862605079,4.717222862605079,4.717222862605079,4.717222862605079,4.717222862605079,4.717222862605079,4.786308302173243,4.786308302173243,4.786308302173243,4.786308302173243,4.786308302173243,4.8553937417414055,4.8553937417414055,4.8553937417414055,4.8553937417414055,4.8553937417414055,4.92447918130957,4.92447918130957,4.9935646208777325,4.9935646208777325,4.9935646208777325,4.9935646208777325,4.9935646208777325,4.9935646208777325,4.9935646208777325,4.9935646208777325,4.9935646208777325,5.062650060445896,5.062650060445896,5.062650060445896,5.062650060445896,5.062650060445896,5.062650060445896,5.131735500014059,5.131735500014059,5.200820939582222,5.200820939582222,5.200820939582222,5.269906379150386,5.269906379150386,5.269906379150386,5.269906379150386,5.338991818718549,5.338991818718549,5.4080772582867125,5.477162697854876,5.546248137423039,5.6844190165593655],\"yaxis\":\"y\"},{\"hovertemplate\":\"species=versicolor<br>sepal_width=%{x}<br>sepal_length=%{y}<extra></extra>\",\"legendgroup\":\"versicolor\",\"marker\":{\"color\":\"#FF7F0E\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"versicolor\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"scatter\",\"x\":[3.2,3.2,3.1,2.3,2.8,2.8,3.3,2.4,2.9,2.7,2.0,3.0,2.2,2.9,2.9,3.1,3.0,2.7,2.2,2.5,3.2,2.8,2.5,2.8,2.9,3.0,2.8,3.0,2.9,2.6,2.4,2.4,2.7,2.7,3.0,3.4,3.1,2.3,3.0,2.5,2.6,3.0,2.6,2.3,2.7,3.0,2.9,2.9,2.5,2.8],\"xaxis\":\"x\",\"y\":[7.0,6.4,6.9,5.5,6.5,5.7,6.3,4.9,6.6,5.2,5.0,5.9,6.0,6.1,5.6,6.7,5.6,5.8,6.2,5.6,5.9,6.1,6.3,6.1,6.4,6.6,6.8,6.7,6.0,5.7,5.5,5.5,5.8,6.0,5.4,6.0,6.7,6.3,5.6,5.5,5.5,6.1,5.8,5.0,5.6,5.7,5.7,6.2,5.1,5.7],\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"species=versicolor<br>sepal_width=%{x}<extra></extra>\",\"legendgroup\":\"versicolor\",\"marker\":{\"color\":\"#FF7F0E\",\"symbol\":\"circle\"},\"name\":\"versicolor\",\"notched\":true,\"offsetgroup\":\"versicolor\",\"showlegend\":false,\"type\":\"box\",\"x\":[3.2,3.2,3.1,2.3,2.8,2.8,3.3,2.4,2.9,2.7,2.0,3.0,2.2,2.9,2.9,3.1,3.0,2.7,2.2,2.5,3.2,2.8,2.5,2.8,2.9,3.0,2.8,3.0,2.9,2.6,2.4,2.4,2.7,2.7,3.0,3.4,3.1,2.3,3.0,2.5,2.6,3.0,2.6,2.3,2.7,3.0,2.9,2.9,2.5,2.8],\"xaxis\":\"x3\",\"yaxis\":\"y3\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"species=versicolor<br>sepal_length=%{y}<extra></extra>\",\"legendgroup\":\"versicolor\",\"marker\":{\"color\":\"#FF7F0E\",\"symbol\":\"circle\"},\"name\":\"versicolor\",\"offsetgroup\":\"versicolor\",\"scalegroup\":\"y\",\"showlegend\":false,\"type\":\"violin\",\"xaxis\":\"x2\",\"y\":[7.0,6.4,6.9,5.5,6.5,5.7,6.3,4.9,6.6,5.2,5.0,5.9,6.0,6.1,5.6,6.7,5.6,5.8,6.2,5.6,5.9,6.1,6.3,6.1,6.4,6.6,6.8,6.7,6.0,5.7,5.5,5.5,5.8,6.0,5.4,6.0,6.7,6.3,5.6,5.5,5.5,6.1,5.8,5.0,5.6,5.7,5.7,6.2,5.1,5.7],\"yaxis\":\"y2\"},{\"hovertemplate\":\"<b>OLS trendline</b><br>sepal_length = 0.865078 * sepal_width + 3.53973<br>R<sup>2</sup>=0.276582<br><br>species=versicolor<br>sepal_width=%{x}<br>sepal_length=%{y} <b>(trend)</b><extra></extra>\",\"legendgroup\":\"versicolor\",\"marker\":{\"color\":\"#FF7F0E\",\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"versicolor\",\"showlegend\":false,\"type\":\"scatter\",\"x\":[2.0,2.2,2.2,2.3,2.3,2.3,2.4,2.4,2.4,2.5,2.5,2.5,2.5,2.6,2.6,2.6,2.7,2.7,2.7,2.7,2.7,2.8,2.8,2.8,2.8,2.8,2.8,2.9,2.9,2.9,2.9,2.9,2.9,2.9,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.1,3.1,3.1,3.2,3.2,3.2,3.3,3.4],\"xaxis\":\"x\",\"y\":[5.26989015544041,5.4429056994818605,5.4429056994818605,5.529413471502586,5.529413471502586,5.529413471502586,5.615921243523311,5.615921243523311,5.615921243523311,5.702429015544037,5.702429015544037,5.702429015544037,5.702429015544037,5.7889367875647615,5.7889367875647615,5.7889367875647615,5.875444559585487,5.875444559585487,5.875444559585487,5.875444559585487,5.875444559585487,5.961952331606212,5.961952331606212,5.961952331606212,5.961952331606212,5.961952331606212,5.961952331606212,6.048460103626938,6.048460103626938,6.048460103626938,6.048460103626938,6.048460103626938,6.048460103626938,6.048460103626938,6.134967875647662,6.134967875647662,6.134967875647662,6.134967875647662,6.134967875647662,6.134967875647662,6.134967875647662,6.134967875647662,6.221475647668388,6.221475647668388,6.221475647668388,6.307983419689114,6.307983419689114,6.307983419689114,6.394491191709839,6.480998963730563],\"yaxis\":\"y\"},{\"hovertemplate\":\"species=virginica<br>sepal_width=%{x}<br>sepal_length=%{y}<extra></extra>\",\"legendgroup\":\"virginica\",\"marker\":{\"color\":\"#2CA02C\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"virginica\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"scatter\",\"x\":[3.3,2.7,3.0,2.9,3.0,3.0,2.5,2.9,2.5,3.6,3.2,2.7,3.0,2.5,2.8,3.2,3.0,3.8,2.6,2.2,3.2,2.8,2.8,2.7,3.3,3.2,2.8,3.0,2.8,3.0,2.8,3.8,2.8,2.8,2.6,3.0,3.4,3.1,3.0,3.1,3.1,3.1,2.7,3.2,3.3,3.0,2.5,3.0,3.4,3.0],\"xaxis\":\"x\",\"y\":[6.3,5.8,7.1,6.3,6.5,7.6,4.9,7.3,6.7,7.2,6.5,6.4,6.8,5.7,5.8,6.4,6.5,7.7,7.7,6.0,6.9,5.6,7.7,6.3,6.7,7.2,6.2,6.1,6.4,7.2,7.4,7.9,6.4,6.3,6.1,7.7,6.3,6.4,6.0,6.9,6.7,6.9,5.8,6.8,6.7,6.7,6.3,6.5,6.2,5.9],\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"species=virginica<br>sepal_width=%{x}<extra></extra>\",\"legendgroup\":\"virginica\",\"marker\":{\"color\":\"#2CA02C\",\"symbol\":\"circle\"},\"name\":\"virginica\",\"notched\":true,\"offsetgroup\":\"virginica\",\"showlegend\":false,\"type\":\"box\",\"x\":[3.3,2.7,3.0,2.9,3.0,3.0,2.5,2.9,2.5,3.6,3.2,2.7,3.0,2.5,2.8,3.2,3.0,3.8,2.6,2.2,3.2,2.8,2.8,2.7,3.3,3.2,2.8,3.0,2.8,3.0,2.8,3.8,2.8,2.8,2.6,3.0,3.4,3.1,3.0,3.1,3.1,3.1,2.7,3.2,3.3,3.0,2.5,3.0,3.4,3.0],\"xaxis\":\"x3\",\"yaxis\":\"y3\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"species=virginica<br>sepal_length=%{y}<extra></extra>\",\"legendgroup\":\"virginica\",\"marker\":{\"color\":\"#2CA02C\",\"symbol\":\"circle\"},\"name\":\"virginica\",\"offsetgroup\":\"virginica\",\"scalegroup\":\"y\",\"showlegend\":false,\"type\":\"violin\",\"xaxis\":\"x2\",\"y\":[6.3,5.8,7.1,6.3,6.5,7.6,4.9,7.3,6.7,7.2,6.5,6.4,6.8,5.7,5.8,6.4,6.5,7.7,7.7,6.0,6.9,5.6,7.7,6.3,6.7,7.2,6.2,6.1,6.4,7.2,7.4,7.9,6.4,6.3,6.1,7.7,6.3,6.4,6.0,6.9,6.7,6.9,5.8,6.8,6.7,6.7,6.3,6.5,6.2,5.9],\"yaxis\":\"y2\"},{\"hovertemplate\":\"<b>OLS trendline</b><br>sepal_length = 0.901534 * sepal_width + 3.90684<br>R<sup>2</sup>=0.209057<br><br>species=virginica<br>sepal_width=%{x}<br>sepal_length=%{y} <b>(trend)</b><extra></extra>\",\"legendgroup\":\"virginica\",\"marker\":{\"color\":\"#2CA02C\",\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"virginica\",\"showlegend\":false,\"type\":\"scatter\",\"x\":[2.2,2.5,2.5,2.5,2.5,2.6,2.6,2.7,2.7,2.7,2.7,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.9,2.9,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.1,3.1,3.1,3.1,3.2,3.2,3.2,3.2,3.2,3.3,3.3,3.3,3.4,3.4,3.6,3.8,3.8],\"xaxis\":\"x\",\"y\":[5.8902123150582755,6.160672658058943,6.160672658058943,6.160672658058943,6.160672658058943,6.250826105725833,6.250826105725833,6.340979553392723,6.340979553392723,6.340979553392723,6.340979553392723,6.431133001059611,6.431133001059611,6.431133001059611,6.431133001059611,6.431133001059611,6.431133001059611,6.431133001059611,6.431133001059611,6.521286448726501,6.521286448726501,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.70159334406028,6.70159334406028,6.70159334406028,6.70159334406028,6.791746791727169,6.791746791727169,6.791746791727169,6.791746791727169,6.791746791727169,6.881900239394058,6.881900239394058,6.881900239394058,6.9720536870609475,6.9720536870609475,7.152360582394726,7.332667477728505,7.332667477728505],\"yaxis\":\"y\"}],                        {\"legend\":{\"title\":{\"text\":\"species\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"rgb(36,36,36)\"},\"error_y\":{\"color\":\"rgb(36,36,36)\"},\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"rgb(36,36,36)\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"rgb(36,36,36)\"},\"baxis\":{\"endlinecolor\":\"rgb(36,36,36)\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"rgb(36,36,36)\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.6}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"rgb(237,237,237)\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"rgb(217,217,217)\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"colorscale\":{\"diverging\":[[0.0,\"rgb(103,0,31)\"],[0.1,\"rgb(178,24,43)\"],[0.2,\"rgb(214,96,77)\"],[0.3,\"rgb(244,165,130)\"],[0.4,\"rgb(253,219,199)\"],[0.5,\"rgb(247,247,247)\"],[0.6,\"rgb(209,229,240)\"],[0.7,\"rgb(146,197,222)\"],[0.8,\"rgb(67,147,195)\"],[0.9,\"rgb(33,102,172)\"],[1.0,\"rgb(5,48,97)\"]],\"sequential\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"sequentialminus\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]]},\"colorway\":[\"#1F77B4\",\"#FF7F0E\",\"#2CA02C\",\"#D62728\",\"#9467BD\",\"#8C564B\",\"#E377C2\",\"#7F7F7F\",\"#BCBD22\",\"#17BECF\"],\"font\":{\"color\":\"rgb(36,36,36)\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"white\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"},\"bgcolor\":\"white\",\"radialaxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"rgb(232,232,232)\",\"gridwidth\":2,\"linecolor\":\"rgb(36,36,36)\",\"showbackground\":true,\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"},\"yaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"rgb(232,232,232)\",\"gridwidth\":2,\"linecolor\":\"rgb(36,36,36)\",\"showbackground\":true,\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"},\"zaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"rgb(232,232,232)\",\"gridwidth\":2,\"linecolor\":\"rgb(36,36,36)\",\"showbackground\":true,\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"}},\"shapedefaults\":{\"fillcolor\":\"black\",\"line\":{\"width\":0},\"opacity\":0.3},\"ternary\":{\"aaxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"},\"baxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"},\"bgcolor\":\"white\",\"caxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"title\":{\"standoff\":15},\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"title\":{\"standoff\":15},\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.7363],\"title\":{\"text\":\"sepal_width\"}},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.7413,1.0],\"matches\":\"x2\",\"showline\":false,\"showticklabels\":false,\"ticks\":\"\"},\"xaxis3\":{\"anchor\":\"y3\",\"domain\":[0.0,0.7363],\"matches\":\"x\",\"showticklabels\":false},\"xaxis4\":{\"anchor\":\"y4\",\"domain\":[0.7413,1.0],\"matches\":\"x2\",\"showline\":false,\"showticklabels\":false,\"ticks\":\"\"},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,0.7326],\"title\":{\"text\":\"sepal_length\"}},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.0,0.7326],\"matches\":\"y\",\"showticklabels\":false},\"yaxis3\":{\"anchor\":\"x3\",\"domain\":[0.7426,1.0],\"matches\":\"y3\",\"showline\":false,\"showticklabels\":false,\"ticks\":\"\"},\"yaxis4\":{\"anchor\":\"x4\",\"domain\":[0.7426,1.0],\"matches\":\"y3\",\"showline\":false,\"showticklabels\":false,\"ticks\":\"\"}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('18571eb1-e190-4f1d-ae11-604617c03869');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });                    \n\n\nTo learn about available Jupyter Widgets visit https://jupyter.org/widgets."
  },
  {
    "href": "docs\\output-formats\\gfm.html#overview",
    "title": "GFM",
    "section": "Overview",
    "text": "While markdown is the input format for Quarto, it can also in some cases be an output format (for example, if you have a website or CMS that accepts markdown as input and want to incorporate computations from Python or R).\nThis article covers using Quarto to generate GitHub Flavored Markdown (GFM). You might want to do this in order to:\n\nGenerate a GitHub README.md from a Jupyter notebook\nCreate pages for a GitHub wiki that include computations (e.g. plot output)."
  },
  {
    "href": "docs\\output-formats\\gfm.html#gfm-format",
    "title": "GFM",
    "section": "GFM Format",
    "text": "Use the gfm format to create GitHub Flavored Markdown from Quarto. For example:\n---\ntitle: \"My Project\"\nformat: gfm\n---\nTo create a README.md using Quarto, start with a notebook (.ipynb) or computational markdown file (.qmd) that has README as its file name stem, for example:\nREADME.qmd\n---\ntitle: \"My Project\"\nformat: gfm\njupyter: python3\n---\n\nThis is a GitHub README that has content dynamically generated from Python:\n  \n```{python}\n1 + 1\n```\nRender the README with:\nquarto render README.qmd\nWhich will create README.md alongside your input file."
  },
  {
    "href": "docs\\output-formats\\gfm.html#github-wikis",
    "title": "GFM",
    "section": "GitHub Wikis",
    "text": "If you want to use Quarto to incorporate computations into a GitHub wiki start by cloning the wiki for local editing.\nThen, simply create a computational markdown file (.ipynb, .qmd) for each page in the wiki. You can render all of these files at once into their corresponding .md files using Quarto Projects. For example:\nquarto render\nYou don’t even strictly need a Quarto project file to do this as quarto render will render all input files in a directory by default if there is no project file."
  },
  {
    "href": "docs\\output-formats\\html-basics.html#overview",
    "title": "HTML Basics",
    "section": "Overview",
    "text": "Use the html format to create HTML output. For example:\n---\ntitle: \"My document\"\nformat:\n  html:\n    toc: true\n    html-math-method: katex\n    css: styles.css\n---\nThis example highlights a few of the options available for HTML output. This document covers these and other options in detail."
  },
  {
    "href": "docs\\output-formats\\html-basics.html#table-of-contents",
    "title": "HTML Basics",
    "section": "Table of Contents",
    "text": "Use the toc option to include an automatically generated table of contents in the output document. Use the toc-depth option to specify the number of section levels to include in the table of contents. The default is 3 (which means that level-1, 2, and 3 headings will be listed in the contents). For example:\ntoc: true\ntoc-depth: 2\nYou can customize the title used for the table of contents using the toc-title option:\ntoc-title: Contents\nIf you want to exclude a heading from the table of contents, add both the .unnumbered and .unlisted classes to it:\n### More Options {.unnumbered .unlisted}\nThe HTML format by default uses a floating table of contents. You can revert to a standard table of contents that appears at the top using the following:\nformat:\n  html:\n    toc: true\n    toc-float: false\nThe floating table of contents can be used to navigate to sections of the document and also will automatically highlight the appropriate section as the user scrolls. The table of contents is responsive and will become hidden once the viewport becomes too narrow. See an example on the right of this page."
  },
  {
    "href": "docs\\output-formats\\html-basics.html#section-numbering",
    "title": "HTML Basics",
    "section": "Section Numbering",
    "text": "Use the number-sections option to number section headings in the output document. For example:\nnumber-sections: true\nUse the number-depth option to specify the deepest level of heading to add numbers to (by default all headings are numbered). For example:\nnumber-depth: 3\nTo exclude an individual heading from numbering, add the .unnumbered class to it:\n### More Options {.unnumbered}"
  },
  {
    "href": "docs\\output-formats\\html-basics.html#css-styles",
    "title": "HTML Basics",
    "section": "CSS Styles",
    "text": "To add a CSS stylesheet to your document, just provide the css option. For example:\nformat:\n  html: \n    css: styles.css\nUsing the css option works well for simple tweaks to document appearance. If you want to do more extensive customization see the documentation on HTML Themes."
  },
  {
    "href": "docs\\output-formats\\html-basics.html#latex-equations",
    "title": "HTML Basics",
    "section": "LaTeX Equations",
    "text": "By default, LaTeX equations are rendered using MathJax. Use the html-math-method option to choose another method. For example:\nformat:\n  html:\n    html-math-method: katex\nYou can also specify a url for the library to load for a given method:\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\nAvailable math rendering methods include:\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nmathjax\nUse MathJax to display embedded TeX math in HTML output.\n\n\nkatex\nUse KaTeX to display embedded TeX math in HTML output.\n\n\nwebtex\nConvert TeX formulas to <img> tags that link to an external script that converts formulas to images.\n\n\ngladtex\nEnclose TeX math in <eq> tags in HTML output. The resulting HTML can then be processed by GladTeX to produce images of the typeset formulas and an HTML file with links to these images.\n\n\nmathml\nConvert TeX math to MathML (note that currently only Firefox and Safari natively support MathML)\n\n\nplain\nNo special processing (formulas are put inside a span with class=\"math\").\n\n\n\nNote that this is more detailed documentation on each of these options in the Pandoc Math Rendering in HTML documentation."
  },
  {
    "href": "docs\\output-formats\\html-basics.html#tabsets",
    "title": "HTML Basics",
    "section": "Tabsets",
    "text": "You can use tabsets to present content that will vary in interest depending on the audience. For example, here we provide some example code in a variety of languages:\n\nRPythonJavaJulia\n\n\nfizz_buzz <- function(fbnums = 1:50) {\n  output <- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n\n\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n\n\npublic class FizzBuzz\n{\n  public static void fizzBuzz(int num)\n  {\n    if (num % 15 == 0) {\n      System.out.println(\"FizzBuzz\");\n    } else if (num % 5 == 0) {\n      System.out.println(\"Buzz\");\n    } else if (num % 3 == 0) {\n      System.out.println(\"Fizz\");\n    } else {\n      System.out.println(num);\n    }\n  }\n}\n\n\nfunction FizzBuzz(num)\n  if num % 15 == 0\n    println(\"FizzBuzz\")\n  elseif num % 5 == 0\n    println(\"Buzz\")\n  elseif num % 3 == 0\n    println(\"Fizz\")\n  else\n    println(num)\n  end\nend\n\n\n\nCreate a tabset via a markdown div with the class name panel-tabset (e.g. ::: {.panel-tabset}). Each top-level heading within the div creates a new tab. For example, here is the markdown used to implement the first two tabs displayed above:\n::: {.panel-tabset}\n## R\n\n``` {.r}\nfizz_buzz <- function(fbnums = 1:50) {\n  output <- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n```\n\n## Python\n\n``` {.python}\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n```\n\n:::"
  },
  {
    "href": "docs\\output-formats\\html-basics.html#self-contained",
    "title": "HTML Basics",
    "section": "Self Contained",
    "text": "HTML documents typically have a number of external dependencies (e.g. images, CSS style sheets, JavaScript, etc.). By default these dependencies are placed in a _files directory alongside your document. For example, if you render report.md to HTML:\nquarto render report.md --to html\nThen the following output is produced:\nreport.html\nreport_files/\nYou might alternatively want to create an entirely self-contained HTML document (with images, css, etc. embedded into the HTML file). You can do this by specifying the self-contained option:\nformat:\n  html:\n    self-contained: true\nThis will produce a standalone HTML file with no external dependencies, using data: URIs to incorporate the contents of linked scripts, style sheets, images, and videos. The resulting file should be “self-contained,” in the sense that it needs no external files and no net access to be displayed properly by a browser."
  },
  {
    "href": "docs\\output-formats\\html-basics.html#anchor-sections",
    "title": "HTML Basics",
    "section": "Anchor Sections",
    "text": "Hover over a section title to see an anchor link. Enable/disable this behavior with:\nformat:\n  html:\n    anchor-sections: true\nAnchor links are also automatically added to figures and tables that have a cross reference defined."
  },
  {
    "href": "docs\\output-formats\\html-basics.html#external-links",
    "title": "HTML Basics",
    "section": "External Links",
    "text": "By default external links (i.e. links that don’t target the current site) receive no special visual adornment or navigation treatment (the current page is navigated). You can use the following options to modify this behavior:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nlink-external-icon\ntrue to show an icon next to the link to indicate that it’s external (e.g. external)\n\n\nlink-external-newwindow\ntrue to open external links in a new browser window or tab (rather than navigating the current tab).\n\n\n\nFor example, here we enable both options:\nformat:\n  html:\n    link-external-icon: true\n    link-external-newwindow: true\nYou can also specify one or both of these behaviors for an individual link using the .external class and target attribute. For example:\n[example](https://example.com){.external target=\"_blank\"}"
  },
  {
    "href": "docs\\output-formats\\html-basics.html#reference-popups",
    "title": "HTML Basics",
    "section": "Reference Popups",
    "text": "If you hover your mouse over the citation and footnote in this sentence you’ll see a popup displaying the reference contents:\n   Hover over Xie (2015) to see a reference to the definitive book on knitr1.\nThis behavior is enabled by default. You can disable it with the following options:\nformat:\n  html:\n    hover-citations: false\n    hover-footnotes: false"
  },
  {
    "href": "docs\\output-formats\\html-basics.html#commenting",
    "title": "HTML Basics",
    "section": "Commenting",
    "text": "This page has commenting with Hypothes.is enabled via the following YAML option:\ncomments:\n  hypothesis: true\nYou can see the Hypothesis UI at the far right of the page. Rather than true, you can specify any of the available Hypothesis embedding options as a sub-key of hypothesis. For example:\ncomments:\n  hypothesis: \n    theme: clean\nYou can enable Utterances commenting using the utterances option. Here you need to specify at least the Git repo you want to use for storing comments:\ncomments:\n  utterances:\n    repo: quarto-dev/quarto-docs\nYou can also specify the other options documented here."
  },
  {
    "href": "docs\\output-formats\\html-basics.html#includes",
    "title": "HTML Basics",
    "section": "Includes",
    "text": "If you want to include additional content in your document from another file, you can use the include-in options:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ninclude-in-header\nInclude contents of file, verbatim, at the end of the header. This can be used, for example, to include special CSS or JavaScript in HTML documents or to inject commands into the LaTeX preamble.\n\n\ninclude-before-body\nInclude contents of file, verbatim, at the beginning of the document body (e.g. after the <body> tag in HTML, or the \\begin{document} command in LaTeX). This can be used to include navigation bars or banners in HTML documents.\n\n\ninclude-after-body\nInclude contents of file, verbatim, at the end of the document body (before the </body> tag in HTML, or the \\end{document} command in LaTeX).\n\n\n\nYou can specify a single file for multiple files for each of these options. For example:\nformat:\n  html:\n    include-in-header:\n      - analytics.html\n      - comments.html\n    include-before-body: header.html\nThere are also a set of options you can use for inline includes (i.e. specifying the included content right within YAML):\n\n\n\nOption\nDescription\n\n\n\n\nheader-includes\nInline version of include-in-header\n\n\ninclude-before\nInline version of include-before-body\n\n\ninclude-after\nInline version include-after-body\n\n\n\nFor example:\nformat:\n  pdf: \n    header-includes: |\n      \\usepackage{eplain}\n      \\usepackage{easy-todo}"
  },
  {
    "href": "docs\\output-formats\\html-basics.html#references",
    "title": "HTML Basics",
    "section": "References",
    "text": "Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://yihui.name/knitr/."
  },
  {
    "href": "docs\\output-formats\\html-code.html#overview",
    "title": "HTML Code Blocks",
    "section": "Overview",
    "text": "There are wide variety of options available to customize the display of source code within HTML documents, including:\n\nHiding some or all code that was executed by Knitr or Jupyter.\nCode folding for executed code (hidden by default and expandable by readers).\nHandling code that overflows the available horizontal display space.\nView the source code of the markdown file used to generate the document.\nSyntax highlighting themes and other options to control the appearance of code.\nCopy to clipboard button for code blocks.\nGenerating hyperlinks to online documentation for functions used within code blocks via the downlit package (note that this option currently only works when using the Knitr engine).\n\nDetails on using all of these options are provided below."
  },
  {
    "href": "docs\\output-formats\\html-code.html#hiding-code",
    "title": "HTML Code Blocks",
    "section": "Hiding Code",
    "text": "For many documents you may want to hide all of the executable source code used to produce dynamic outputs. You can do this by specifying echo: false in the document execute options. For example:\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\njupyter: python3\n---\nNote that we can override this option on a per code-block basis. For example:\n```{python}\n#| echo: true\n\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n```\nCode block options are included in a special comment at the top of the block (lines at the top prefaced with #| are considered options)."
  },
  {
    "href": "docs\\output-formats\\html-code.html#folding-code",
    "title": "HTML Code Blocks",
    "section": "Folding Code",
    "text": "Use the code-fold option to include code but have it hidden by default using the HTML <details> tag. For example, click the Code button to see the code that produced this plot.\n\n\nCode\nlibrary(ggplot2)\ndat <- data.frame(cond = rep(c(\"A\", \"B\"), each=10),\n                  xvar = 1:20 + rnorm(20,sd=3),\n                  yvar = 1:20 + rnorm(20,sd=3))\n\nggplot(dat, aes(x=xvar, y=yvar)) +\n    geom_point(shape=1) + \n    geom_smooth() \n\n\n\n\n\nHere we specify both code-fold: true as well as custom summary text (the default is just “Code” as shown above):\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\nValid values for code-fold include:\n\n\n\nValue\nBehavior\n\n\n\n\nfalse\nNo folding (default)\n\n\ntrue\nFold code (initially hidden)\n\n\nshow\nFold code (initially shown)\n\n\n\nUse the code-fold and code-summary chunk attributes to control this on a chunk-by-chunk basis:\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\n```"
  },
  {
    "href": "docs\\output-formats\\html-code.html#code-overflow",
    "title": "HTML Code Blocks",
    "section": "Code Overflow",
    "text": "In some cases the width of source code will overflow the available horizontal display space. By default, this will result in a horizontal scroll bar for the code block. However if you prefer not to have scrollbars you can have the longer lines wrap instead.\nTo set the global default behavior use the code-overflow option. For example:\nformat:\n  html:\n    code-overflow: wrap\nValid values for code-overflow are:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nscroll\nScroll code blocks that exceed available width (default, corresponds to white-space: pre).\n\n\nwrap\nWrap lines of code that exceed available width (corresponds to white-space: pre-wrap).\n\n\n\nYou can also override the global default on a per-code-block basis. For computational cells you do this with the code-overflow cell option:\n```{python}\n#| code-overflow: wrap\n\n# very long line of code....\n```\nFor a static code block, add the .code-overflow-scroll or .code-overflow-wrap CSS class:\n```{.python .code-overflow-wrap}\n# very long line of code....\n```\nNote that irrespective of these options, code will always wrap within printed HTML output (as it would otherwise be clipped off the edge of the page)."
  },
  {
    "href": "docs\\output-formats\\html-code.html#code-tools",
    "title": "HTML Code Blocks",
    "section": "Code Tools",
    "text": "You can include a Code menu in the header of your document that provides various tools for readers to interact with the source code. Specify code-tools: true to activate these tools:\nformat:\n  html:\n    code-fold: true\n    code-tools: true\nIf you have a document that includes folded code blocks then the Code menu will present options to show and hide the folded code as well as view the full source code of the document:\n\nThis document specifies code-tools: true in its options so you should see the Code menu above next to the main header.\nYou can control which of these options are made available as well as the “Code” caption text using sub-options of code-tools. For example, here we specify that we want only “View Source” (no toggling of code visibility) and no caption on the code menu:\nformat:\n  html: \n    code-tools:\n      source: true\n      toggle: false\n      caption: none\nBy default, the source code is embedded in the document and shown in a popup window like this:\n\nYou can alternatively specify a URL for the value of source:\nformat:\n  html: \n    code-tools:\n      source: https://github.com/quarto-dev/quarto-web/blob/main/index.md\nIf you are within a project and have specified a repo-url option then you can just use repo and the correct link to your source file will be generated:\nformat:\n  html: \n    code-tools:\n      source: repo"
  },
  {
    "href": "docs\\output-formats\\html-code.html#appearance",
    "title": "HTML Code Blocks",
    "section": "Appearance",
    "text": "By default code blocks are rendered with a left border whose color is derived from the currently theme. You can customize code chunk appearance with some simple options that control the background color and left border. Options can either be booleans to enable or disable the treatment or can be legal CSS color strings (or they could even be SASS variable names!).\nHere is the default appearance for code blocks (code-background: true):\n\nYou can instead use a left border treatment using the code-border-left option:\ncode-border-left: true\n\nYou can combine a background and border treatment as well as customize the left border color:\ncode-background: true\ncode-border-left: \"#31BAE9\""
  },
  {
    "href": "docs\\output-formats\\html-code.html#highlighting",
    "title": "HTML Code Blocks",
    "section": "Highlighting",
    "text": "You can specify the code highlighting style using highlight-style and specifying one of the supported themes. Supported themes include all the themes included in Pandoc:\n\npygments\ntango\nespresso\nzenburn\nkate\nmonochrome\nbreezedark\nhaddock\n\nAs well as an additional set of extended themes including:\n\narrow\natom-one\nayu\nbreeze\ndracula\ngithub\ngruvbox\nmokokai\nnord\noblivion\nprinting\nradical\nsolarized\nvim-dark\n\nFor example:\nhighlight-style: github\nHighlighting themes can provide either a single highlighting definition or two definitions, one optimized for a light colored background and another optimized for a dark color background. When available, Quarto will automatically select the appropriate style based upon the code chunk background color’s darkness. Users may always opt to specify the full name (e.g. atom-one-dark) to by pass this automatic behavior.\nBy default, code is highlighted using the arrow theme, which optimized for accessibility. We’ve additionally introduced the arrow-dark theme which is designed to provide accessible highlighting against dark backgrounds.\nExamples of the light and dark themes:\n\nArrow (light)\n\n\n\nArrow (dark)\n\n\n\nAyu (light)\n\n\n\nAyu (dark)"
  },
  {
    "href": "docs\\output-formats\\html-code.html#copy-button",
    "title": "HTML Code Blocks",
    "section": "Copy Button",
    "text": "Hover over the code block below and you will see a copy icon in the top-right corner:\n\nlibrary(dygraphs)\ndygraph(nhtemp, main = \"New Haven Temperatures\") %>% \n  dyRangeSelector(dateWindow = c(\"1920-01-01\", \"1960-01-01\"))\n\nThis behavior is enabled by default but you configure it using the code-copy option:\nformat:\n  html:\n    code-copy: false\nValid values for code-copy include:\n\n\n\nhover\nShow button on hover (default)\n\n\ntrue\nAlways show code copy button\n\n\nfalse\nNever show code copy button"
  },
  {
    "href": "docs\\output-formats\\html-code.html#code-linking",
    "title": "HTML Code Blocks",
    "section": "Code Linking",
    "text": "The code-link option enables hyper-linking of functions within code blocks to their online documentation:\nformat:\n  html:\n    code-link: true\nCode linking is currently implemented only for the knitr engine (via the downlit package).\n\n\nSource Code\n---\ntitle: \"HTML Code Blocks\"\ndescription: \"Quarto options for customizing the display of source code in HTML output.\"\nformat: \n  html:\n    code-tools: true\nexecute:\n  warning: false\n---\n\n## Overview\n\nThere are wide variety of options available to customize the display of source code within HTML documents, including:\n\n1.  Hiding some or all code that was executed by [Knitr](https://yihui.name/knitr) or [Jupyter](https://jupyter.org).\n2.  Code folding for executed code (hidden by default and expandable by readers).\n3.  Handling code that overflows the available horizontal display space.\n4.  View the source code of the markdown file used to generate the document.\n5.  Syntax highlighting themes and other options to control the appearance of code.\n6.  Copy to clipboard button for code blocks.\n7.  Generating hyperlinks to online documentation for functions used within code blocks via the [downlit](https://downlit.r-lib.org/) package (note that this option currently only works when using the Knitr engine).\n\nDetails on using all of these options are provided below.\n\n## Hiding Code\n\nFor many documents you may want to hide all of the executable source code used to produce dynamic outputs. You can do this by specifying `echo: false` in the document `execute` options. For example:\n\n``` yaml\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\njupyter: python3\n---\n```\n\nNote that we can override this option on a per code-block basis. For example:\n\n```` markdown\n```{python}\n#| echo: true\n\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n```\n````\n\nCode block options are included in a special comment at the top of the block (lines at the top prefaced with `#|` are considered options).\n\n## Folding Code\n\nUse the `code-fold` option to include code but have it hidden by default using the HTML `<details>` tag. For example, click the **Code** button to see the code that produced this plot.\n\n```{r}\n#| fig-alt: \"A polynomial regression line fit to randomly generated x and y values with a confidence interval. There are 20 points labeled on the plot. The x axis is labeled xvar and ranges from 0 to 20. The y axis is labeled yvar and ranges from -5 to 20. The polynomial regression fit is shown as a blue line that begins at approximately x = 0, y = 3, monotonically increases until approximately x = 16, y = 17, and monotonically decreases until approximately x = 20, y = 15. The confidence interval is indicated as a gray region that roughly follows the fit line.\"\n#| code-fold: true\n\nlibrary(ggplot2)\ndat <- data.frame(cond = rep(c(\"A\", \"B\"), each=10),\n                  xvar = 1:20 + rnorm(20,sd=3),\n                  yvar = 1:20 + rnorm(20,sd=3))\n\nggplot(dat, aes(x=xvar, y=yvar)) +\n    geom_point(shape=1) + \n    geom_smooth() \n```\n\nHere we specify both `code-fold: true` as well as custom summary text (the default is just \"Code\" as shown above):\n\n``` yaml\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n```\n\nValid values for `code-fold` include:\n\n| Value   | Behavior                     |\n|---------|------------------------------|\n| `false` | No folding (default)         |\n| `true`  | Fold code (initially hidden) |\n| `show`  | Fold code (initially shown)  |\n\nUse the `code-fold` and `code-summary` chunk attributes to control this on a chunk-by-chunk basis:\n\n```` python\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\n```\n````\n\n## Code Overflow\n\nIn some cases the width of source code will overflow the available horizontal display space. By default, this will result in a horizontal scroll bar for the code block. However if you prefer not to have scrollbars you can have the longer lines wrap instead.\n\nTo set the global default behavior use the `code-overflow` option. For example:\n\n``` yaml\nformat:\n  html:\n    code-overflow: wrap\n```\n\nValid values for `code-overflow` are:\n\n| Option   | Description                                                                                  |\n|----------|----------------------------------------------------------------------------------------------|\n| `scroll` | Scroll code blocks that exceed available width (default, corresponds to `white-space: pre`). |\n| `wrap`   | Wrap lines of code that exceed available width (corresponds to `white-space: pre-wrap`).     |\n\nYou can also override the global default on a per-code-block basis. For computational cells you do this with the `code-overflow` cell option:\n\n```` python\n```{python}\n#| code-overflow: wrap\n\n# very long line of code....\n```\n````\n\nFor a static code block, add the `.code-overflow-scroll` or `.code-overflow-wrap` CSS class:\n\n```` python\n```{.python .code-overflow-wrap}\n# very long line of code....\n```\n````\n\nNote that irrespective of these options, code will always wrap within printed HTML output (as it would otherwise be clipped off the edge of the page).\n\n## Code Tools\n\nYou can include a **Code** menu in the header of your document that provides various tools for readers to interact with the source code. Specify `code-tools: true` to activate these tools:\n\n``` yaml\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n```\n\nIf you have a document that includes folded code blocks then the **Code** menu will present options to show and hide the folded code as well as view the full source code of the document:\n\n![](images/code-tools-01.png){.border fig-alt=\"A screen shot of the header of a rendered Quarto document showing the result of setting both the code-fold and code-tools option to true. There is a drop-down menu labeled 'Code' to the right of the page title with a triangle pointing down. The menu is open and there are three options listed vertically beneath it: 'Hide All Code,' 'Show All Code,' and 'View Source.'\"}\n\nThis document specifies `code-tools: true` in its options so you should see the **Code** menu above next to the main header.\n\nYou can control which of these options are made available as well as the \"Code\" caption text using sub-options of `code-tools`. For example, here we specify that we want only \"View Source\" (no toggling of code visibility) and no caption on the code menu:\n\n``` yaml\nformat:\n  html: \n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n```\n\nBy default, the source code is embedded in the document and shown in a popup window like this:\n\n![](images/code-tools-source.png){fig-alt=\"A screenshot of this webpage with a pop-up window labeled 'Source Code' over it. This 'Source Code' window contains the raw markdown and R code used to write this page. There is an 'X' on the upper right corner of the 'Source Code' pop up to close it.\"}\n\nYou can alternatively specify a URL for the value of `source`:\n\n``` yaml\nformat:\n  html: \n    code-tools:\n      source: https://github.com/quarto-dev/quarto-web/blob/main/index.md\n```\n\nIf you are within a project and have specified a `repo-url` option then you can just use `repo` and the correct link to your source file will be generated:\n\n``` yaml\nformat:\n  html: \n    code-tools:\n      source: repo\n```\n\n## Appearance\n\nBy default code blocks are rendered with a left border whose color is derived from the currently theme. You can customize code chunk appearance with some simple options that control the background color and left border. Options can either be booleans to enable or disable the treatment or can be legal CSS color strings (or they could even be SASS variable names!).\n\nHere is the default appearance for code blocks (`code-background: true`):\n\n![](images/code-bg.png){fig-alt=\"A block of code with a gray background.\"}\n\nYou can instead use a left border treatment using the `code-border-left` option:\n\n``` yaml\ncode-border-left: true\n```\n\n![](images/code-default.png){fig-alt=\"A block of code with a gray vertical stripe running along its left border. This code block has no background.\"}\n\nYou can combine a background and border treatment as well as customize the left border color:\n\n``` yaml\ncode-background: true\ncode-border-left: \"#31BAE9\"\n```\n\n![](images/code-custom.png){fig-alt=\"A block of code with a gray background and a blue vertical stripe running along its left border.\"}\n\n## Highlighting\n\nYou can specify the code highlighting style using `highlight-style` and specifying one of the supported themes. Supported themes include all the themes included in Pandoc:\n\n-   pygments\n-   tango\n-   espresso\n-   zenburn\n-   kate\n-   monochrome\n-   breezedark\n-   haddock\n\nAs well as an additional set of extended themes including:\n\n-   arrow\n-   atom-one\n-   ayu\n-   breeze\n-   dracula\n-   github\n-   gruvbox\n-   mokokai\n-   nord\n-   oblivion\n-   printing\n-   radical\n-   solarized\n-   vim-dark\n\nFor example:\n\n``` yaml\nhighlight-style: github\n```\n\nHighlighting themes can provide either a single highlighting definition or two definitions, one optimized for a light colored background and another optimized for a dark color background. When available, Quarto will automatically select the appropriate style based upon the code chunk background color's darkness. Users may always opt to specify the full name (e.g. `atom-one-dark`) to by pass this automatic behavior.\n\nBy default, code is highlighted using the `arrow` theme, which optimized for accessibility. We've additionally introduced the `arrow-dark` theme which is designed to provide accessible highlighting against dark backgrounds.\n\nExamples of the light and dark themes:\n\n#### Arrow (light)\n\n![](images/arrow.png){fig.alt=\"A block of code showcasing the Arrow (light) theme.\"}\n\n#### Arrow (dark)\n\n![](images/arrow-dark.png){fig.alt=\"A block of code showcasing the Arrow (dark) theme.\"}\n\n#### Ayu (light)\n\n![](images/ayu.png){fig.alt=\"A block of code showcasing the Ayu (light) theme.\"}\n\n#### Ayu (dark)\n\n![](images/ayu-dark.png){.preview-image fig.alt=\"A block of code showcasing the Ayu (dark) theme.\"}\n\n## Copy Button\n\nHover over the code block below and you will see a copy icon in the top-right corner:\n\n```{r eval=FALSE}\nlibrary(dygraphs)\ndygraph(nhtemp, main = \"New Haven Temperatures\") %>% \n  dyRangeSelector(dateWindow = c(\"1920-01-01\", \"1960-01-01\"))\n```\n\nThis behavior is enabled by default but you configure it using the `code-copy` option:\n\n``` yaml\nformat:\n  html:\n    code-copy: false\n```\n\nValid values for `code-copy` include:\n\n|         |                                |\n|---------|--------------------------------|\n| `hover` | Show button on hover (default) |\n| `true`  | Always show code copy button   |\n| `false` | Never show code copy button    |\n\n## Code Linking\n\nThe `code-link` option enables hyper-linking of functions within code blocks to their online documentation:\n\n``` yaml\nformat:\n  html:\n    code-link: true\n```\n\nCode linking is currently implemented only for the knitr engine (via the [downlit](https://downlit.r-lib.org) package)."
  },
  {
    "href": "docs\\output-formats\\html-publishing.html#github-pages",
    "title": "Publishing HTML",
    "section": "GitHub Pages",
    "text": "GitHub Pages is a service that lets you publish a website from any GitHub repository. While the service supports publishing full websites, it’s also a perfectly suitable place to publish a single Quarto document.\nHere are the steps required to publish a Quarto article to GitHub Pages:\n\nCreate a new Git repository that will be used to host your article.\nConfigure your repository to publish the contents of the main branch (you can do this from the Pages section of your repository settings:\n\nNote that the Source is set to the root directory of the main branch.\nCreate a Quarto document named index.qmd within the repository (using this name will allow your article to be served as the default web page for the repository).\nWrite and render your article using Quarto.\nPush the article (including the HTML file generated when you rendered it) to GitHub. Your article is now published!\n\nGitHub Pages are served on the github.io domain (with your GitHub account as a sub-domain). For example, if your GitHub username is jsmith and your repository is named quarto-article then the article will be available at https://jsmith.github.io/quarto-article."
  },
  {
    "href": "docs\\output-formats\\html-publishing.html#rpubs-and-rsc",
    "title": "Publishing HTML",
    "section": "RPubs & RStudio Connect",
    "text": "RPubs is a free service from RStudio for sharing documents on the web. RStudio Connect is a server product from RStudio for secure sharing of applications, reports, and plots.\nNote that all documents published to RPubs are publicly visible, so you should only publish content you want to share publicly. Unlike RPubs, RStudio Connect is a server that you run inside an organization, so is suitable for publishing content that you only want visible within your organization’s network.\nYou can publish Quarto documents using the quarto_publish_doc() function from the R quarto package. For example, here we publish a document to both RPubs and an RStudio Connect server:\nlibrary(quarto)\nquarto_publish_doc(\"mydoc.qmd\", server = \"rpubs.com\")\nquarto_publish_doc(\"mydoc.qmd\", server = \"rsc.example.com\")\nNote that once you’ve published a document to a particular server you can omit the server argument when updating the document:\nquarto_publish_doc(\"mydoc.qmd\")\nYou can also publish to RPubs and RStudio Connect directly from within RStudio. To do this, just click the Publish button  on the editor toolbar or preview window:\n\nYou should be running the daily build of RStudio (version 1.5.184 or higher) if you want to publish Quarto documents. The daily build has many other Quarto related enhancements so is highly recommended even if you aren’t using the publishing features."
  },
  {
    "href": "docs\\output-formats\\html-publishing.html#standalone-html",
    "title": "Publishing HTML",
    "section": "Standalone HTML",
    "text": "You can optionally render Quarto documents into self-contained HTML, whereby all of the content required to render the article (images generated by plots, required CSS and JavaScript, etc.) are bundled into a single HTML file. Use the self-contained option to do this:\nformat:\n   html:\n     self-contained: true\nThen, you can share this HTML file using the same means you use to share other document types like spreadsheets, presentations, and PDFs (e.g by uploading it to Dropbox or any other file sharing service)."
  },
  {
    "href": "docs\\output-formats\\html-publishing.html#other-services",
    "title": "Publishing HTML",
    "section": "Other Services",
    "text": "Note that any web server or web host capable of hosting a static website can equally well host a single Quarto HTML document. See the article on publishing websites for details on publishing articles on a variety of other services including Netlify, Firebase, Site44, and Amazon S3."
  },
  {
    "href": "docs\\output-formats\\html-themes.html#overview",
    "title": "HTML Theming",
    "section": "Overview",
    "text": "HTML documents rendered with Quarto use Bootstrap 5 by default. This can be disabled or customized via the theme option:\ntheme: default # bootstrap 5 default\ntheme: cosmo   # cosmo bootswatch theme\ntheme: pandoc  # pandoc default html treatment\ntheme: none    # no css added to document\nNote that many features of Quarto HTML documents are only available when using a Bootstrap theme. Code folding, citation hover, and commenting are still available with theme: pandoc or theme: none, however most other features (e.g. floating toc, callouts, tabs) are only available for documents with Bootstrap.\nQuarto includes 25 themes from the Bootswatch project (for example, the website uses the cosmo theme). Below we describe how to use SASS to create your own themes."
  },
  {
    "href": "docs\\output-formats\\html-themes.html#basic-options",
    "title": "HTML Theming",
    "section": "Basic Options",
    "text": "Pandoc supports a set of basic metadata options for customizing document appearance without directly using CSS. These options are available for both the pandoc theme as well as for all Bootstrap themes.\nIf you are using a Bootstrap theme or the Pandoc theme, there are a set of options you can provide in document metadata to customize its appearance. These include:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nmax-width\nThe maximum width occupied by page content. Defaults to 1400px for bootstrap themes and 36em for the pandoc theme.\n\n\nmainfont\nSets the font-family property for the document.\n\n\nfontsize\nSets the base CSS font-size for the document.\n\n\nfontcolor\nSets the default text color for the document.\n\n\nlinkcolor\nSets the default text color for hyperlinks.\n\n\nmonofont\nSets the font-family property for <code> elements.\n\n\nmonobackgroundcolor\nSets the background-color property for <code> elements.\n\n\nlinestretch\nSets the CSS line-height property (affects distance between lines of text, defaults to 1.5).\n\n\nbackgroundcolor\nSets the background-color for the document.\n\n\nmargin-left, margin-right, margin-top, margin-bottom\nSets the CSS margin properties for the document body.\n\n\n\nFor example. here we set the font-size a bit larger and specify that we want a bit more space between lines of text:\ntitle: \"My Document\"\nformat:\n  html: \n    theme: cosmo\n    font-size: 1.1em\n    linestretch: 1.7"
  },
  {
    "href": "docs\\output-formats\\html-themes.html#theme-options",
    "title": "HTML Theming",
    "section": "Theme Options",
    "text": "While the basic customization described above handles many common requirements, you can do extensive additional customization using SASS theme files. Bootstrap defines over 1,400 variables that control fonts, colors, padding, borders, and much more. You can see all of the variables here:\nhttps://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/_variables.scss\nSASS theme files can define both variables that globally set things like colors and fonts, as well as rules that define more fine grained behavior. To customize an existing Bootstrap theme with your own set of variables and/or rules, just provide the base theme and then your custom theme file(s):\ntheme:\n  - cosmo\n  - custom.scss\nYour custom.scss file might look something like this:\n/*-- scss:defaults --*/\n$h2-font-size:          1.6rem !default;\n$headings-font-weight:  500 !default;\n$body-color:            $gray-700 !default;\n\n/*-- scss:rules --*/\nh1, h2, h3, h4, h5, h6 {\n  text-shadow: -1px -1px 0 rgba(0, 0, 0, .3);\n}\nNote that the variables section is denoted by the /*-- scss:defaults --*/ comment and the rules section (where normal CSS rules go) is denoted by the /*-- scss:rules --*/ comment."
  },
  {
    "href": "docs\\output-formats\\html-themes.html#custom-themes",
    "title": "HTML Theming",
    "section": "Custom Themes",
    "text": "You can naturally also create an entirely custom theme and provide only that (in this case you will inherit from the default Bootstrap theme):\ntheme: custom.scss\nFor example, here are the theme files for the 25 built-in Bootswatch themes:\nhttps://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/html/bootstrap/themes\nYou can read more about the custom theming design here:\nhttps://github.com/quarto-dev/quarto-cli/blob/main/design/quarto-themes.md"
  },
  {
    "href": "docs\\output-formats\\html-themes.html#dark-and-light-themes",
    "title": "HTML Theming",
    "section": "Dark and Light Themes",
    "text": "In addition to providing a single theme for your html output, you may also provide a light and dark theme. For example:\ntheme:\n  light: flatly\n  dark: darkly\nSetting the above themes in your _quarto.yml results in both a dark and light version of your output being available. For example:\n\n\nFlatly Themed Output\n\n\n\n\nDarkly Themed Output\n\n\nWhen providing both a dark and light mode for your html output, Quarto will automatically create a toggle to allow your reader to select the desired dark or light appearance. The toggle will automatically appear in the top right corner of your html output. When possible, the toggle will use browser local storage to maintain the user’s preference across sessions.\nThe first appearance (light or dark) elements in the theme to determine the default appearance for your html output. For example, since the light option appears first in the above example, a reader will see the light appearance by default.\n\n\nCustomizing Themes\nAs when providing a single theme, you may provide a custom theme for dark and light mode, or a list of scss files to customize the light and dark appearance. This website, for example uses the following to use a light cosmo theme and then customizes the cosmo theme with additional Sass variables when in dark mode:\ntheme:\n  light: cosmo\n  dark: [cosmo, theme-dark.scss]\nThe contents of theme-dark.scss which is customizing the cosmo appearance is:\n/*-- scss:defaults --*/\n$body-bg: #181818;\n$body-color: white;\n$link-color: #75AADB;\n$sidebar-bg: #303030;\n$code-background-alpha: -.8;\n$popover-bg: #242424;\n$input-bg: #242424;\n\n\nSyntax Highlighting\nQuarto will automatically select the appropriate light or dark version of the text highlighter that you have specified when possible. For more information, see Code Highlighting."
  },
  {
    "href": "docs\\output-formats\\hugo.html#overview",
    "title": "Hugo",
    "section": "Overview",
    "text": "Hugo is a very popular open source website publishing system. Pages in Hugo websites are typically written in plain markdown, so don’t have a straightforward way to automatically and reproducibly incorporate computational output.\nUsing the Quarto hugo format, you can incorporate computational output (e.g. R or Python code that produces plots) into Hugo websites. This article explains how."
  },
  {
    "href": "docs\\output-formats\\hugo.html#creating-a-page",
    "title": "Hugo",
    "section": "Creating a Page",
    "text": "Hugo articles and posts that use Quarto should live in their own directory (taking advantage of the Hugo Page Bundles feature). This allows any content generated/referenced by the page (e.g. plot output) to live right alongside the markdown source.\nTo create a new page that uses Quarto:\n\nCreate a new directory at the location in your site’s content directory where you want the article to live.\nAdd a markdown file to that directory (usually with the same name as the directory). This file should use the .qmd extension (to prevent Hugo from rendering it).\nAdd the requisite Hugo metadata to the document’s front matter, then also specify format: hugo and any other required Quarto options.\n\nFor example, let’s say we wanted to create a new article named hello-quarto within the content directory. The filesystem would look like this:\nmysite/\n  content/\n    hello-quarto/\n      hello-quarto.qmd\nHere’s what the source code hello-quarto.qmd might look like:\n---\ntitle: Hello, Quarto\nformat: hugo\njupyter: python3\n---\n\n## Polar Axis\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n```{python}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```"
  },
  {
    "href": "docs\\output-formats\\hugo.html#workflow",
    "title": "Hugo",
    "section": "Workflow",
    "text": "Generating pages for Hugo requires just a simple Quarto render:\nquarto render hello-quarto.qmd\nWhenever your render the hello-quarto.qmd file, Quarto will execute the code in the file (writing any generated plots, etc. into the article’s directory) and then generate an index.md file that is subsequently processed by Hugo.\nIf you are running the hugo server command for live preview, you will see the updated version of your page whenever you render.\nNote that the index.md file is only updated when you explicitly render with Quarto. Running the hugo command to build your site just renders the index.md file — if you want to regenerate this file based on updated code or data you need to explicitly quarto render it."
  },
  {
    "href": "docs\\output-formats\\more-formats.html#overview",
    "title": "More Formats",
    "section": "Overview",
    "text": "Pandoc support a huge array of output formats, all of which can be used with Quarto. To use any Pandoc format just use the format option or the --to command line option.\nFor example, here’s some YAML that specifies the use of the odt format as well as a couple of format options:\n---\ntitle: \"My Document\"\nformat: \n  odt:\n    toc: true\n    reference-doc: reference.odt\n---\nAlternatively you can specify the use of a format on the command line:\nquarto render document.md --to odt"
  },
  {
    "href": "docs\\output-formats\\more-formats.html#formats",
    "title": "More Formats",
    "section": "Formats",
    "text": "All Pandoc output formats currently available are listed below (the format “name” on the left is what you specify in the format YAML key).\nTo learn more about the specific options available for all of Pandoc’s formats, see the Pandoc User Guide.\n\n\n\n\n\n\n\nName\nDetails\n\n\n\n\nasciidoc\nhttps://asciidoc.org/\n\n\nasciidoctor\nhttps://asciidoctor.org/\n\n\nbeamer\nhttps://ctan.org/pkg/beamer\n\n\ncommonmark\ncommonmark_x\nhttp://commonmark.org/\n\n\ncontext\nhttp://www.pragma-ade.nl/\n\n\ncsljson\nhttps://citationstyles.org/\n\n\ndocbook\ndocbook4\ndocbook5\nhttp://www.docbook.org/\n\n\ndocx\nhttps://en.wikipedia.org/wiki/Office_Open_XML\n\n\ndokuwiki\nhttps://www.dokuwiki.org/wiki:syntax\n\n\ndzslides\nhttp://paulrouget.com/dzslides/\n\n\nepub\nepub2\nepub3\nhttp://en.wikipedia.org/wiki/EPUB\n\n\nfb2\nhttps://en.wikipedia.org/wiki/FictionBook\n\n\ngfm\nhttps://github.github.com/gfm/\n\n\nhaddock\nhttp://www.haskell.org/haddock/doc/html/ch03s08.html\n\n\nhtml\nhtml4\nhtml5\nhttps://en.wikipedia.org/wiki/HTML5\n\n\nicml\nhttps://wwwimages.adobe.com/content/dam/acom/en/devnet/indesign/sdk/cs6/idml/idml-specification.pdf\n\n\nipynb\nhttps://nbformat.readthedocs.io/en/latest/\n\n\njats\njats_archiving\njats_articleauthoring\njats_publishing\nhttps://jats.nlm.nih.gov/publishing/\n\n\njira\nhttps://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all\n\n\njson\nhttps://pandoc.org/filters.html\n\n\nlatex\nhttps://www.latex-project.org/\n\n\nman\nhttp://www.gnu.org/software/groff/groff.html\n\n\nmarkdown\nmarkdown_github\nmarkdown_mmd\nmarkdown_phpextra\nmarkdown_strict\nhttps://pandoc.org/MANUAL.html#markdown-variants\n\n\nmediawiki\nhttp://www.mediawiki.org/wiki/Help:Formatting\n\n\nms\nhttp://www.gnu.org/software/groff/groff.html\n\n\nmuse\nhttps://www.gnu.org/software/emacs-muse/manual/\n\n\nnative\nhttps://pandoc.org/using-the-pandoc-api.html\n\n\nodt\nhttp://en.wikipedia.org/wiki/OpenDocument\n\n\nopendocument\nhttp://opendocument.xml.org/\n\n\nopml\nhttp://dev.opml.org/spec2.html\n\n\norg\nhttp://orgmode.org/\n\n\npdf\nhttps://en.wikipedia.org/wiki/PDF\n\n\nplain\nPlain text\n\n\npptx\nhttps://en.wikipedia.org/wiki/Microsoft_PowerPoint\n\n\nrevealjs\nhttp://lab.hakim.se/reveal-js/\n\n\nrst\nhttp://docutils.sourceforge.net/docs/ref/rst/introduction.html\n\n\nrtf\nhttps://en.wikipedia.org/wiki/Rich_Text_Format\n\n\ns5\nhttp://meyerweb.com/eric/tools/s5/\n\n\nslideous\nhttp://goessner.net/articles/slideous/\n\n\nslidy\nhttp://www.w3.org/Talks/Tools/Slidy\n\n\ntei\nhttps://github.com/TEIC/TEI-Simple\n\n\ntexinfo\nhttp://www.gnu.org/software/texinfo/\n\n\ntextile\nhttp://redcloth.org/textile\n\n\nxwiki\nhttps://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiSyntax/\n\n\nzimwik\nhttp://zim-wiki.org/manual/Help/Wiki_Syntax.html"
  },
  {
    "href": "docs\\output-formats\\ms-word-templates.html#using-templates",
    "title": "Word Templates",
    "section": "Using Templates",
    "text": "If you want to customize the appearance of MS Word output, Pandoc supports a special type of template called a reference document. Here’s an example of specifying a custom reference document for docx:\nformat:\n  docx:\n    reference-doc: custom-reference-doc.docx\nReference documents include sample text that uses all of the output styles used by Pandoc.\nTo use a reference doc template, just copy it to your document’s directory and reference it as shown above."
  },
  {
    "href": "docs\\output-formats\\ms-word-templates.html#creating-templates",
    "title": "Word Templates",
    "section": "Creating Templates",
    "text": "To create a new reference doc based on the Pandoc default, execute the following command:\n$ quarto pandoc -o custom-reference-doc.docx \\\n   --print-default-data-file reference.docx\nThen, open custom-reference-doc.docx in MS Word and modify styles as you wish:\n\n\n\nYou can open the Styles pane from the HOME tab in the MS Word toolbar.\n\n\nWhen you move the cursor to a specific element in the document, an item in the styles list will be highlighted. If you want to modify the style of any type of element, you can click the drop-down menu on the highlighted item, and you will see a dialog box like this:\n\nAfter you finish modifying the styles, you can save the document and use it as the template for future Word documents."
  },
  {
    "href": "docs\\output-formats\\ms-word.html#overview",
    "title": "Word Basics",
    "section": "Overview",
    "text": "Use the docx format to create MS Word output. For example:\n---\ntitle: \"My Document\"\nformat:\n  docx:\n    toc: true\n    section-numbers: true\n    highlight-style: github\n---\nThis example highlights a few of the options available for MS Word output. This document covers these and other options in detail.\nTo learn about creating custom templates for use with the docx format, see the article on Word Templates."
  },
  {
    "href": "docs\\output-formats\\ms-word.html#table-of-contents",
    "title": "Word Basics",
    "section": "Table of Contents",
    "text": "Use the toc option to include an automatically generated table of contents in the output document. Use the toc-depth option to specify the number of section levels to include in the table of contents. The default is 3 (which means that level-1, 2, and 3 headings will be listed in the contents). For example:\ntoc: true\ntoc-depth: 2\nYou can customize the title used for the table of contents using the toc-title option:\ntoc-title: Contents\nIf you want to exclude a heading from the table of contents, add both the .unnumbered and .unlisted classes to it:\n### More Options {.unnumbered .unlisted}"
  },
  {
    "href": "docs\\output-formats\\ms-word.html#section-numbering",
    "title": "Word Basics",
    "section": "Section Numbering",
    "text": "Use the number-sections option to number section headings in the output document. For example:\nnumber-sections: true\nUse the number-depth option to specify the deepest level of heading to add numbers to (by default all headings are numbered). For example:\nnumber-depth: 3\nTo exclude an individual heading from numbering, add the .unnumbered class to it:\n### More Options {.unnumbered}"
  },
  {
    "href": "docs\\output-formats\\ms-word.html#syntax-highlighting",
    "title": "Word Basics",
    "section": "Syntax Highlighting",
    "text": "Pandoc will automatically highlight syntax in fenced code blocks that are marked with a language name.\nYou can specify the code highlighting style using highlight-style and specifying one of the supported themes. Supported themes include: arrow, pygments, tango, espresso, zenburn, kate, monochrome, breezedark, haddock, atom-one, ayu, breeze, dracula, github, gruvbox, monokai, nord, oblivion, printing, radical, solarized, and vim.\nFor example:\nhighlight-style: github\nHighlighting themes can provide either a single highlighting definition or two definitions, one optimized for a light colored background and another optimized for a dark color background. When available, Quarto will automatically select the appropriate style based upon the code chunk background color’s darkness. You may may always opt to specify the full name (e.g. atom-one-dark) to bypass this automatic behavior.\nBy default, code is highlighted using the arrow theme, which is optimized for accessibility. Here are examples of the arrow light and dark themes:\n\nLightDark"
  },
  {
    "href": "docs\\output-formats\\pdf-basics.html#overview",
    "title": "PDF Basics",
    "section": "Overview",
    "text": "Use the pdf format to create PDF output. For example:\n---\ntitle: \"My document\"\nformat:\n  pdf:\n    toc: true\n    number-sections: true\n    colorlinks: true\n---\nThis example highlights a few of the options available for PDF output. This article covers these and other options in detail.\nIf you want to produce raw LaTeX output (a .tex file) rather than a PDF, all of the options documented here are still available (see the LaTeX Output section below for additional details).\n\n\n\n\n\n\nNote\n\n\n\nNote that while we will focus here exclusively on the use LaTeX to create PDFs, Pandoc also has support for creating PDFs using ConTeXt, roff ms, or HTML (via wkhtmltopdf). See the Pandoc documentation on Creating a PDF for additional details.\n\n\n\nPrerequisites\nIn order to create PDFs you will need to install a recent distribution of TeX. We recommend the use of TinyTeX (which is based on TexLive), which you can install with the following command:\nquarto tools install tinytex\nSee the article on PDF Engines for details on using other TeX distributions and PDF compilation engines."
  },
  {
    "href": "docs\\output-formats\\pdf-basics.html#document-class",
    "title": "PDF Basics",
    "section": "Document Class",
    "text": "Quarto uses KOMA Script document classes by default for PDF documents and books. KOMA-Script classes are drop-in replacements for the standard classes with an emphasis on typography and versatility.\nFor PDF documents this results in the following Pandoc options set by default:\nformat:\n  pdf:\n    documentclass: scrartcl\n    papersize: letter\nYou can set documentclass to the standard article, report or book classes, to the KOMA Script equivalents scrartcl, scrbook, and scrreprt, or to any other class made available by LaTeX packages you have installed.\nSee the Output Options section below for additional details on customizing LaTeX document options."
  },
  {
    "href": "docs\\output-formats\\pdf-basics.html#table-of-contents",
    "title": "PDF Basics",
    "section": "Table of Contents",
    "text": "Use the toc option to include an automatically generated table of contents in the output document. Use the toc-depth option to specify the number of section levels to include in the table of contents. The default is 3 (which means that level-1, 2, and 3 headings will be listed in the contents). For example:\ntoc: true\ntoc-depth: 2\nYou can customize the title used for the table of contents using the toc-title option:\ntoc-title: Contents\nIf you want to exclude a heading from the table of contents, add both the .unnumbered and .unlisted classes to it:\n### More Options {.unnumbered .unlisted}"
  },
  {
    "href": "docs\\output-formats\\pdf-basics.html#section-numbering",
    "title": "PDF Basics",
    "section": "Section Numbering",
    "text": "Use the number-sections option to number section headings in the output document. For example:\nnumber-sections: true\nUse the number-depth option to specify the deepest level of heading to add numbers to (by default all headings are numbered). For example:\nnumber-depth: 3\nTo exclude an individual heading from numbering, add the .unnumbered class to it:\n### More Options {.unnumbered}"
  },
  {
    "href": "docs\\output-formats\\pdf-basics.html#syntax-highlighting",
    "title": "PDF Basics",
    "section": "Syntax Highlighting",
    "text": "Pandoc will automatically highlight syntax in fenced code blocks that are marked with a language name.\nYou can specify the code highlighting style using highlight-style and specifying one of the supported themes. Supported themes include: arrow, pygments, tango, espresso, zenburn, kate, monochrome, breezedark, haddock, atom-one, ayu, breeze, dracula, github, gruvbox, monokai, nord, oblivion, printing, radical, solarized, and vim.\nFor example:\nhighlight-style: github\nHighlighting themes can provide either a single highlighting definition or two definitions, one optimized for a light colored background and another optimized for a dark color background. When available, Quarto will automatically select the appropriate style based upon the code chunk background color’s darkness. You may may always opt to specify the full name (e.g. atom-one-dark) to bypass this automatic behavior.\nBy default, code is highlighted using the arrow theme, which is optimized for accessibility. Here are examples of the arrow light and dark themes:\n\nLightDark"
  },
  {
    "href": "docs\\output-formats\\pdf-basics.html#output-options",
    "title": "PDF Basics",
    "section": "Output Options",
    "text": "There are numerous options available for customizing PDF output, including:\n\nSpecifying document classes and their options\nIncluding lists of figures and tables\nUsing the geometry and hyperref packages\nNumerous options for customizing fonts and colors.\n\nFor example, here we use a few of these options:\n---\ntitle: \"My Document\"\nformat: \n  pdf: \n    documentclass: report\n    classoption: [twocolumn, landscape]\n    lof: true\n    lot: true\n    geometry:\n      - top=30mm\n      - left=20mm\n      - heightrounded\n    fontfamily: libertinus\n    colorlinks: true\n---\nSee the Pandoc documentation on metadata variables for LaTeX for documentation on all available options."
  },
  {
    "href": "docs\\output-formats\\pdf-basics.html#citations",
    "title": "PDF Basics",
    "section": "Citations",
    "text": "When creating PDFs, you can choose to use either the default Pandoc citation handling based on citeproc, or alternatively use natbib or BibLaTeX. This can be controlled using the cite-method option. For example:\nformat:\n  pdf: \n    cite-method: biblatex\nThe default is to use citeproc (Pandoc’s built in citation processor).\nSee the main article on using Citations with Quarto for additional details on citation syntax, available bibliography formats, etc.\n\nOptions\nWhen using natbib or biblatex you can specify the following additional options to affect how bibliographies are rendered:\n\n\n\nOption\nDescription\n\n\n\n\nbiblatexoptions\nList of options for biblatex\n\n\nnatbiboptions\nList of options for natbib\n\n\nbiblio-title\nTitle for bibliography\n\n\nbiblio-style\nStyle for bibliography"
  },
  {
    "href": "docs\\output-formats\\pdf-basics.html#raw-latex",
    "title": "PDF Basics",
    "section": "Raw LaTeX",
    "text": "When creating a PDF document, Pandoc allows the use of raw LaTeX directives intermixed with markdown. For example:\n\\begin{tabular}{|l|l|}\\hline\nAge & Frequency \\\\ \\hline\n18--25  & 15 \\\\\n26--35  & 33 \\\\\n36--45  & 22 \\\\ \\hline\n\\end{tabular}\nRaw LaTeX commands will be preserved and passed unchanged to the LaTeX writer.\n\n\n\n\n\n\nWarning\n\n\n\nWhile it’s very convenient to use raw LaTeX, raw LaTeX is ignored when rendering to other formats like HTML and MS Word. If you plan on rendering to other formats then the example above would be better written using native markdown tables.\n\n\nIn some cases raw LaTeX will require additional LaTeX packages. The LaTeX Includes section below describes how to include \\usepackage commands for these packages in your document."
  },
  {
    "href": "docs\\output-formats\\pdf-basics.html#latex-includes",
    "title": "PDF Basics",
    "section": "LaTeX Includes",
    "text": "If you want to include additional content in your document from another file, you can use the include-in options:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ninclude-in-header\nInclude contents of file, verbatim, into the LaTeX preamble.\n\n\ninclude-before-body\nInclude contents of file, verbatim, at the beginning of the document body (e.g. after the \\begin{document} command).\n\n\ninclude-after-body\nInclude contents of file, verbatim, at the end of the document body (before the the \\end{document}).\n\n\n\nYou can specify a single file for multiple files for each of these options. For example:\nformat:\n  html:\n    include-in-header:\n      - packages.tex\n      - macros.tex\n    include-before-body: before.tex\nThere are also a set of options you can use for inline includes (i.e. specifying the included content right within YAML):\n\n\n\nOption\nDescription\n\n\n\n\nheader-includes\nInline version of include-in-header\n\n\ninclude-before\nInline version of include-before-body\n\n\ninclude-after\nInline version include-after-body\n\n\n\nFor example:\nformat:\n  pdf: \n    header-includes: |\n      \\usepackage{eplain}\n      \\usepackage{easy-todo}\nNote the use of the | character on the line with header-includes to indicate that the value is a multi-line string.\nIf you don’t already have these packages installed locally, then Quarto will automatically install them during rendering of the document."
  },
  {
    "href": "docs\\output-formats\\pdf-basics.html#latex-output",
    "title": "PDF Basics",
    "section": "LaTeX Output",
    "text": "If you want Quarto to produce a LaTeX file (.tex) rather than a PDF (for example, if you want to do your own processing of the PDF) there are two ways to accomplish this:\n\nUse the latex format rather than the pdf format. For example:\nformat:\n  latex:\n    documentclass: report\n    classoption: [twocolumn, landscape]\n    lof: true\n    lot: true\nNote that all of the PDF format options documented above will also work for the latex format.\nUse the pdf format along with the keep-tex option. For example:\nformat:\n  pdf:\n    documentclass: report\n    keep-tex: true\nThis technique will produce a PDF file for preview, but will also create a .tex file alongside it that you can do subsequent processing on."
  },
  {
    "href": "docs\\output-formats\\pdf-engine.html#overview",
    "title": "PDF Engines",
    "section": "Overview",
    "text": "Pandoc supports the use of a wide range of TeX distributions and PDF compilation engines including pdflatex, xelatex, lualatex, tectonic, and latexmk.\nWhile you can employ whatever toolchain you like for LaTeX compilation, we strongly recommend the use of TinyTeX, which is a distribution of TeX Live that provides a reasonably sized initial download (~100 MB) that includes the 200 or so most commonly used TeX packages for Pandoc documents.\nWe also recommend the use of Quarto’s built in PDF compilation engine, which among other things performs automatic installation of any missing TeX packages."
  },
  {
    "href": "docs\\output-formats\\pdf-engine.html#installing-tex",
    "title": "PDF Engines",
    "section": "Installing TeX",
    "text": "To install TinyTeX, use the following command:\nquarto tools install tinytex\nIf you prefer TeX Live, you can find instructions for installing it here: https://tug.org/texlive/.\nNote that Quarto’s automatic installation of missing TeX packages will work for TinyTeX and TeX Live, but not for other TeX distributions (as it relies on TeX Live’s tlmgr command)."
  },
  {
    "href": "docs\\output-formats\\pdf-engine.html#quarto-pdf-engine",
    "title": "PDF Engines",
    "section": "Quarto PDF Engine",
    "text": "Quarto’s built-in PDF compilation engine handles running LaTeX multiple times to resolve index and bibliography entries, and also performs automatic LaTeX package installation. This section describes customizing the built-in engine (see the Alternate PDF Engines section below for docs on using other engines).\n\nPDF Compilation\nThe following options are available for customizing PDF compilation:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nlatex-min-runs\nNumber (minimum number of compilation passes)\n\n\nlatex-max-runs\nNumber (maximum number of compilation passes)\n\n\nlatex-clean\nBoolean (clean intermediates after compilation, defaults to true)\n\n\nlatex-output-dir\nString (output directory for intermediates and PDF)\n\n\nlatex-makeindex\nString (program to use for makeindex)\n\n\nlatex-makeindex-opts\nArray (options for makeindexprogram)\n\n\n\n\n\nPackage Installation\nThe following options are available for customizing automatic package installation:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nlatex-auto-install\nBoolean (enable/disable automatic package installation)\n\n\nlatex-tlmgr-opts\nArray (options for tlmgr)"
  },
  {
    "href": "docs\\output-formats\\pdf-engine.html#alternate-pdf-engines",
    "title": "PDF Engines",
    "section": "Alternate PDF Engines",
    "text": "To disable Quarto’s built in PDF engine, set the latex-auto-mk option to false:\ntitle: \"My Document\"\nlatex-auto-mk: false\nThe above configuration will result in Pandoc’s default behavior for PDF compilation (pdf-engine: pdflatex ). You can then use the pdf-engine and pdf-engine-opts to further customize Pandoc compilation. For example:\ntitle: \"My Document\"\nlatex-auto-mk: false\npdf-engine: xelatex\npdf-engine-opt: -outdir=out"
  },
  {
    "href": "docs\\output-formats\\presentations.html#overview",
    "title": "Presentations",
    "section": "Overview",
    "text": "Pandoc markdown supports a wide variety of formats for creating presentations, including:\n\npptx — PowerPoint (MS Office)\nbeamer — Beamer (LaTeX/PDF)\nrevealjs — reveal.js (HTML)\n\nThis article covers the core syntax for presentations (slides, incremental bullets, columns, etc.). This documentation is an edited version of the complete Pandoc documentation on slide shows. After you learn the basics here you should consult the full documentation to learn about all available options."
  },
  {
    "href": "docs\\output-formats\\presentations.html#slide-markdown",
    "title": "Presentations",
    "section": "Slide Markdown",
    "text": "Here’s an example of a simple markdown side show. The H1 headers are used to delimit sections; the H2 headers and horizontal rule are used to delimit slides:\n---\ntitle: \"Habits\"\nauthor: \"John Doe\"\ndate: \"March 22, 2005\"\nformat: revealjs\n---\n\n# In the morning\n\n## Getting up\n\n- Turn off alarm\n- Get out of bed\n\n## Breakfast\n\n- Eat eggs\n- Drink coffee\n\n# In the evening\n\n## Dinner\n\n- Eat spaghetti\n- Drink wine\n\n------------------\n\n![picture of spaghetti](images/spaghetti.jpg)\n\n## Going to sleep\n\n- Get in bed\n- Count sheep\nBy default, the slide level is the highest heading level in the hierarchy that is followed immediately by content, and not another heading, somewhere in the document.\nIn the example above, level-1 headings are always followed by level-2 headings, which are followed by content, so the slide level is 2. This default can be overridden using the slide-level option. See the Pandoc documentation on structuring the slide show for additional details."
  },
  {
    "href": "docs\\output-formats\\presentations.html#incremental-lists",
    "title": "Presentations",
    "section": "Incremental Lists",
    "text": "By default number and bullet lists within slides are displayed all at once. You can override this globally using the incremental option. For example:\ntitle: \"My Presentation\"\nformat:\n  revealjs:\n    incremental: true   \nYou can also explicitly make any list incremental or non-incremental by surrounding it in a div with an explicit class that determines the mode. To make a list incremental do this:\n::: {.incremental}\n\n- Eat spaghetti\n- Drink wine\n\n:::\nTo make a list non-incremental do this:\n::: {.nonincremental}\n\n- Eat spaghetti\n- Drink wine\n\n:::\nYou can also insert a pause within a slide (keeping the content after the pause hidden) by inserting three dots separated by spaces:\n## Slide with a pause\n\ncontent before the pause\n\n. . .\n\ncontent after the pause\n\n\n\n\n\n\nWarning\n\n\n\nThe incremental/nonincremental and pause markdown syntax described above do not currently work for PowerPoint output."
  },
  {
    "href": "docs\\output-formats\\presentations.html#multiple-columns",
    "title": "Presentations",
    "section": "Multiple Columns",
    "text": "To put material in side by side columns, you can use a native div container with class .columns, containing two or more div containers with class .column and a width attribute:\n:::: {.columns}\n\n::: {.column width=\"40%\"}\ncontents...\n:::\n\n::: {.column width=\"60%\"}\ncontents...\n:::\n\n::::"
  },
  {
    "href": "docs\\output-formats\\presentations.html#speaker-notes",
    "title": "Presentations",
    "section": "Speaker Notes",
    "text": "Speaker notes are supported in reveal.js and PowerPoint (pptx) output. You can add notes to your Markdown document thus:\n## Slide with speaker notes\n\nSlide content\n\n::: {.notes}\n\nSpeaker notes go here.\n\n:::\nTo show the notes window in reveal.js, press s while viewing the presentation. Speaker notes in PowerPoint will be available, as usual, in handouts and presenter view.\nNotes are not yet supported for other slide formats, but the notes will not appear on the slides themselves."
  },
  {
    "href": "docs\\projects\\code-execution.html#overview",
    "title": "Code Execution",
    "section": "Overview",
    "text": "Rendering a list of input files has the potential to be quite time consuming depending on the computations required. There are a number of techniques you can use to minimize the time required to rebuild a site that has expensive computations."
  },
  {
    "href": "docs\\projects\\code-execution.html#incremental-render",
    "title": "Code Execution",
    "section": "Incremental Render",
    "text": "When working on a project you are typically iterating on a single document at a time. You can render a single file (or single directory or list of files) incrementally by specifying it on the command-line:\nquarto render introduction.qmd\nquarto render subdir/\nEven though you are rendering only part of the project, any associated project-handling code is still executed. So for exmaple in a book project the entire book is still produced (using previously rendered versions of the other chapters)."
  },
  {
    "href": "docs\\projects\\code-execution.html#freeze",
    "title": "Code Execution",
    "section": "Freeze",
    "text": "You can use the freeze option to denote that computational documents should never be re-rendered during a global project render, or alternatively only be re-rendered when their source file changes:\nexecute:\n  freeze: true  # never re-render during project render\nexecute:\n  freeze: auto  # re-render only when source changes\nNote that freeze controls whether execution occurs during global project renders. If you do an incremental render of either a single document or a project sub-directory then code is always executed. For example:\n# render single document (always executes code)\nquarto render document.qmd\n\n# render project subdirectory (always executes code)\nquarto render articles\n\nUsing Freeze\nFreeze is generally used when you have either a large number of collaborators or many computational documents created over a longer period of time. In both cases it can be challenging to fully re-execute every document when you render the site. This could be because some documents have esoteric or environment-specific requirements (e.g. require access/authentication to a data source) or due to general fragility of dependencies over time. Using freeze ensures that you can always reproducibly render your site.\nThe computational results of documents executed with freeze are stored in the _freeze directory, and re-used when needed to fulfill document renders. You should check the contents of _freeze into version control so that others rendering the project don’t need to reproduce your computational environment to render it in their environment.\nNote that you’ll still want to take care to fully re-render your project when things outside of source code change (e.g. input data). You can remove previously frozen output by deleting the _freeze folder at the root of yourproject.\n\n\nVirtual Environments\nYou can also combine freeze with the use of virtual environments to divide your project into sub-directories that each have their own set of dependencies. This allows multiple collaborators to use a set of localized dependencies for the documents they are responsible for, but at the same time still be able to render the entire project without requiring all of its dependencies.\nTo learn how to create and use a virtual environment, see the full documentation on Virtual Environments\nHere’s an example workflow of using virtual environments with freeze:\n\nInclude freeze: true in the project execution options:\nexecute:\n  freeze: true\nCreate a sub-directory of documents (e.g. research), and initialize and use a virtual environment within it:\nresearch/\n  document1.qmd\n  document2.qmd\n  env/\n  requirements.txt\nWhen working wihtin this sub-directory, activate the virtual environment before rendering its documents. For example:\ncd research\nsource venv/bin/activate\nquarto render               # render all files in subdir\nquarto render document.qmd  # render a single-file\n\nThis sub-directory render won’t use the cached freeze results but instead will re-run all of the computations using the directory-specific virtual environment. You can of course also include sub-directories within this directory and their documents will also be rendered using the parent virtual environment."
  },
  {
    "href": "docs\\projects\\code-execution.html#cache",
    "title": "Code Execution",
    "section": "Cache",
    "text": "You can use the cache option to cache the results of computations (using the knitr cache for R documents, and Jupyter Cache for Jupyter documents):\nexecute:\n  cache: true\nNote that cache invalidation is triggered by changes in chunk source code (or other cache attributes you’ve defined). You may however need to manually refresh the cache if you know that some other input (or even time) has changed sufficiently to warrant an update. To do this, render either individual files or an entire project using the --cache-refresh option:\nquarto render mydoc.qmd --cache-refresh # single doc\nquarto render --cache-refresh           # entire project"
  },
  {
    "href": "docs\\projects\\code-execution.html#notebooks",
    "title": "Code Execution",
    "section": "Notebooks",
    "text": "Note that when rendering an .ipynb Quarto will not execute the cells within the notebook by default (the presumption being that you already executed them while editing the notebook). If you want to execute the cells you can pass the --execute flag to render:\nquarto render jupyter-document.ipynb --execute\nYou can also specify this behavior within the notebook’s YAML front matter:\n---\ntitle: \"My Document\"\nexecute: true\njupyter: python3\n---"
  },
  {
    "href": "docs\\projects\\code-execution.html#working-dir",
    "title": "Code Execution",
    "section": "Working Dir",
    "text": "By default, the working directory for rendering files within a project is the directory of the file itself. If you prefer to use the main project directory instead, you can add the execute-dir: project option to your config:\nproject:\n  execute-dir: project\nNote that from within your code you can always determine the location of the currently executing Quarto project using the QUARTO_PROJECT_DIR environment variable."
  },
  {
    "href": "docs\\projects\\quarto-projects.html#overview",
    "title": "Project Basics",
    "section": "Overview",
    "text": "Quarto projects are directories that provide:\n\nA way to render all or some of the files in a directory with a single command (e.g. quarto render myproject).\nA way to share YAML configuration across multiple documents.\nThe ability to redirect output artifacts to another directory.\nThe ability to freeze rendered output (i.e. don’t re-execute documents unless they have changed).\n\nIn addition, projects can have special “types” that introduce additional behavior (e.g. websites or books).\n\n\n\n\n\n\nNote\n\n\n\nIf you are just getting started with Quarto and/or you don’t have previous experience with markdown publishing systems, you probably want to skip learning about projects for now. Once you are comfortable with the basics, come back to this article to learn more."
  },
  {
    "href": "docs\\projects\\quarto-projects.html#creating-projects",
    "title": "Project Basics",
    "section": "Creating Projects",
    "text": "Use the quarto create-project command to create a new project. If you have an existing directory of documents that you want to treat as a project just invoke create-project with no arguments from within the directory:\nquarto create-project\nTo create a project in a new directory just provide a directory name on the command line:\nquarto create-project myproject"
  },
  {
    "href": "docs\\projects\\quarto-projects.html#shared-metadata",
    "title": "Project Basics",
    "section": "Shared Metadata",
    "text": "When you create a project, a _quarto.yml config file is created. Here is an example of what the _quarto.yml file might look like:\nproject:\n  output-dir: _output\n\ntoc: true\nnumber-sections: true\nbibliography: references.bib  \n  \nformat:\n  html:\n    css: styles.css\n    html-math-method: katex\n  pdf:\n    documentclass: report\n    margin-left: 30mm\n    margin-right: 30mm\nAny document rendered within the project directory will automatically inherit the metadata defined at the project level.\nNote that the project file contains both global options that apply to all formats (e.g. toc and bibliograph) as well as format-specific options."
  },
  {
    "href": "docs\\projects\\quarto-projects.html#rendering-projects",
    "title": "Project Basics",
    "section": "Rendering Projects",
    "text": "You can render files within a project either one-by-one or all at once (in either case, shared project metadata will be used).\nTo render all of the documents within a project, just use quarto render within the project directory (or target a specific directory with a command line argument):\n# render project in current dir\nquarto render \n\n# render project in 'myproject'\nquarto render myproject\nYou can also render only the files within a sub-directory of a project. For example, if the current directory contains a project with sub-directories tutorials, how-to, and articles, you can render just the contents of articles as follows:\n# render only documents in the 'articles' sub-directory\nquarto render articles\nNote that when rendering a project, command line arguments you pass to quarto render will be used for each file in the project. For example. this command will render each document in a project as a PDF:\nquarto render --to pdf\nquarto render myproject --to pdf\nIf you are working with Quarto from R, you can also render a project from the R console using the quarto R package.\nlibrary(quarto)\nquarto_render()"
  },
  {
    "href": "docs\\projects\\quarto-projects.html#render-targets",
    "title": "Project Basics",
    "section": "Render Targets",
    "text": "By default, all valid Quarto input files (.qmd, .ipynb, .md, .Rmd) in the project directory will be rendered, save for ones with a file or directory prefix of . (hidden files) or _ (typically used for non top-level files, e.g. ones included in other files).\nIf you don’t want to render all of the target documents in a project, or you wish to control the order of rendering more precisely, you can add a project: render: [files] entry to your project metadata. For example:\nproject:\n  render:\n    - section1.md\n    - section2.md\nNote that you can use wildcards when defining the render list. For example:\nproject:\n  render:\n    - section*.md"
  },
  {
    "href": "docs\\projects\\virtual-environments.html#using-venv",
    "title": "Virtual Environments",
    "section": "Using venv",
    "text": "Here we’ll provide a brief run through of creating a venv for a Quarto project. See the full documentation on using virtual environments with Python for additional details.\nTo create a new Python 3 virtual environment in the directory env:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m venv env\n\n\nMac/Linux\npython3 -m venv env\n\n\n\nTo use the environment you need to activate it. This differs slightly depending on which platform / shell you are using:\n\n\n\n\n\n\n\nShell\nCommand\n\n\n\n\nWindows\n(Command)\nenv\\Scripts\\activate.bat\n\n\nWindows\n(PowerShell)\nenv\\Scripts\\Activate.ps1\n\n\nMac/Linux\nsource env/bin/activate\n\n\n\n\n\n\n\n\n\nPowerShell Note\n\n\n\nNote that you may receive an error about running scripts being disabled when activating within PowerShell. If you get this error then execute the following command:\nSet-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser\n\n\nOnce you’ve activated the environment, you need to ensure that you have the packages required to render your documents. This will typically encompass jupyter / jupyterlab plus whatever other packages are used in your Python code. ip to install packages into your environment. For example:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m pip install matplotlib pandas\n\n\nMac/Linux\npython3 -m pip install matplotlib pandas\n\n\n\nAssuming you installed all of the required packages (likely more than just pandas and matplotlib) you should now be able to quarto render documents within the directory.\nTo deactivate an environment use the deactivate command:\ndeactivate\n\nSaving Environments\nTo make your environment reproducible, you need to create a requirements.txt file that enumerates all of the packages in use. To do this use the pip freeze command:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m pip freeze > requirements.txt\n\n\nMac/Linux\npython3 -m pip freeze > requirements.txt\n\n\n\nYou should generally check the requirements.txt file into version control.\n\n\nRestoring Environments\nTo reproduce the environment on another machine you create an empty environment, activate it, and then pip install using requirements.txt:\nFirst, follow the instructions above for creating and activating a virtual environment for your platform/shell.\nThen, install packages from requirements.txt:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m pip install -r requirements.txt\n\n\nMac/Linux\npython3 -m pip install -r requirements.txt"
  },
  {
    "href": "docs\\projects\\virtual-environments.html#using-conda",
    "title": "Virtual Environments",
    "section": "Using conda",
    "text": "This section will cover the basics of creating and using conda environments with Quarto projects. See this article on managing project specific environments with Conda for additional details.\nTo create a new environment in the directory env:\nconda create --prefix env python\nIf this is the first time you’ve used conda in your shell, you may need to execute one of the following commands before using other conda tools:\n\n\n\n\n\n\n\nShell\nCommand\n\n\n\n\nWindows\n(Command)\nconda init cmd.exe\n\n\nWindows\n(PowerShell)\nconda init powershell\n\n\nLinux / Older Mac\n(Bash)\nconda init bash\n\n\nNewer Mac\n(Zsh)\nconda init zsh\n\n\n\nYou will likely need to exit and restart your terminal for conda init to be reflected in your session.\nTo use the environment you need to activate it, which you do as follows:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\nconda activate .\\env\n\n\nMac/Linux\nconda activate ./env\n\n\n\nOnce you’ve activated the environment, you need to ensure that you have the packages required to render your documents. This will typically encompass jupyter / jupyterlab plus whatever other packages are used in your Python code. Use conda install to install packages into your environment. For example:\nconda install jupyterlab\nconda install pandas matplotlib \nAssuming you installed all of the required packages (likely more than just pandas and matplotlib) you should now be able to quarto render documents within the directory.\nUse conda deactivate to exit an activated environment:\nconda deactivate\n\nSaving Environments\nTo make your environment reproducible, you need to create a environment.yml file that enumerates all of the packages in use. Do this using the conda env export command:\nconda env export > environment.yml\nYou should generally check the environment.yml file into version control.\n\n\nRestoring Environments\nTo reproduce the environment on another machine you just pass the environment.yml file as an argument to conda create:\nconda create --prefix env -f environment.yml"
  },
  {
    "href": "docs\\projects\\virtual-environments.html#using-renv",
    "title": "Virtual Environments",
    "section": "Using renv",
    "text": "The renv package provides functionality similar to the venv and conda, but for R packages. To create a new renv environment, install the renv package from CRAN then call the renv::init() function:\ninstall.pacakges(\"renv\")\nrenv::init()\nAs part of initialization, your .Rprofile file is modified to ensure that the renv is activated automatically at the start of each R session.\nIf you plan on using both R and Python in your project, you can have renv automatically create and manage a Python virtual environment as follows:\nrenv::use_python()\nTo install R packages use the standard R install.packages function. You can also install GitHub packages using the renv::install function. For example:\ninstall.packages(\"ggplot2\")      # install from CRAN\nrenv::install(\"tidyverse/dplyr\") # install from GitHub\nTo install Python packages just use pip as described above from the built-in RStudio terminal.\n\nSaving Environments\nTo record the current versions of all R (and optionally Python) packages, use the renv::snapshot() function:\nrenv::snapshot()\nThis will record an renv.lock file for R packages and a requirements.txt file for Python packages). These files should be checked into version control.\n\n\nRestoring Environments\nTo reproduce the environment on another machine use the renv::restore() function:\nrenv::restore()"
  },
  {
    "href": "docs\\projects\\virtual-environments.html#jupyterlab",
    "title": "Virtual Environments",
    "section": "JupyterLab",
    "text": "To use Jupyter or JupyterLab within a Python virtual environment you just need to activate the environment and then launch the Jupyter front end. For example:\n\n\n\n\n\n\n\nShell\nCommand\n\n\n\n\nWindows\n(Command)\nenv\\Scripts\\activate.bat\npy -m jupyter lab\n\n\nWindows (PowerShell)\nenv\\Scripts\\Activate.ps1\npy -m jupyter lab\n\n\nMac/Linux\nsource env/bin/activate\npython3 -m jupyter lab\n\n\n\nAll of the Python packages installed within the env will be available in your Jupyter notebook session. The workflow is similar if you are using conda environments."
  },
  {
    "href": "docs\\projects\\virtual-environments.html#rstudio",
    "title": "Virtual Environments",
    "section": "RStudio",
    "text": "If you are using Quarto within RStudio it is strongly recommended that you use the daily build of RStudio from https://dailies.rstudio.com (the documentation below assumes you are using this build).\n\nrenv\nIf you are using renv, RStudio will automatically do the right thing in terms of binding Quarto to the R and/or Python packages in your project-local environments.\nIf you need to install R packages ust use install.packages; if you need to install Python packages simply use pip or conda within the Terminal as described above.\n\n\nvenv / condaenv\nRStudio will automatically activate any venv or condaenv that it finds within a project directory. Just be sure to create an RStudio project within the same directory where you created your env and things will work as expected with no additional configuration.\nIf you need to install Python packages simply use pip or conda within the Terminal as described above."
  },
  {
    "href": "docs\\projects\\virtual-environments.html#vs-code",
    "title": "Virtual Environments",
    "section": "VS Code",
    "text": "If you create a virtual environment in the env/ directory as described above, Visual Studio Code should automatically discover that environment when you load a workspace from the environment’s parent directory.\nNote that this applies only to venv not Conda environments (which have a separate mechansim for binding to the current VS Code session).\nYou can read more about VS Code support for virtual environments here: https://code.visualstudio.com/docs/python/environments."
  },
  {
    "href": "docs\\tools\\jupyter-lab.html#overview",
    "title": "JupyterLab",
    "section": "Overview",
    "text": "Quarto can render Jupyter notebooks represented as plain text (.qmd) or as a normal notebook file (.ipynb). One benefit of using .ipynb is that you can use JupyterLab as your editor.\nHere is the “Hello, Quarto” example from the homepage inside JupyterLab:\n\nIf you look at the source code you’ll note that YAML options were provided both at the top of the document and within the code cell. We’ll describe working with YAML options in more detail below."
  },
  {
    "href": "docs\\tools\\jupyter-lab.html#workflow",
    "title": "JupyterLab",
    "section": "Workflow",
    "text": "The ideal workflow for authoring Quarto notebooks in JupyterLab is to run the quarto preview command from within a terminal:\nquarto preview notebook.ipynb\nThe notebook will be rendered and a web browser with a “live preview” opened. Position this browser so that you can see it as you edit and save the notebook:\n\nEvery time you save within JupyterLab the preview will be automatically updated. You can use quarto preview for both HTML and PDF output.\nIn the screenshot above you’ll note that we ran quarto preview inside a JupyterLab terminal window—this is generally recommended so that you can see progress and error messages when renders occur.\n\n\n\n\n\n\nNote that if you are authoring a book or website you should use quarto serve instead, which will create a live preview for the entire project.\n\n\n\n\nRunning JupyterLab\nTo run JupyterLab, invoke the jupyter module from within the shell where you are using Quarto:\n\n\n\n\n\n\n\nPlatform\nCommand\n\n\n\n\nWindows\npy -m jupyter lab\n\n\nMac/Linux\npython3 -m jupyter lab\n\n\n\n\n\nRender without Preview\nYou can render a notebook (or group of notebooks) without previewing them using the quarto render command:\nquarto render notebook.ipynb\nUse the --to argument to render to different formats:\nquarto render notebook.ipynb --to docx"
  },
  {
    "href": "docs\\tools\\jupyter-lab.html#yaml-front-matter",
    "title": "JupyterLab",
    "section": "YAML Front Matter",
    "text": "The first cell of your notebook should be a Raw cell that contains the document title, author, and any other options you need to specify. Note that you can switch the type of a call to Raw using the notebook toolbar:\n\nIn this example we specify that we want code to appear collapsed by default. There are YAML options to control many other aspects of document rendering. See the documentation on Authoring and Output Formats for additional details."
  },
  {
    "href": "docs\\tools\\jupyter-lab.html#markdown-cells",
    "title": "JupyterLab",
    "section": "Markdown Cells",
    "text": "Here’s the underlying code for the markdown cell:\n\nNote that a Quarto cross-reference (@fig-polar) is included in the markdown. Any valid Pandoc markdown syntax can be included in markdown cells."
  },
  {
    "href": "docs\\tools\\jupyter-lab.html#output-options",
    "title": "JupyterLab",
    "section": "Output Options",
    "text": "Quarto uses leading comments with a special prefix (#|) to denote cell options. Here we specify the label and fig-cap options so that the plot generated from the cell can be cross-referenced.\n\nNote that options must appear at the very beginning of the cell. As with document front-matter, option names/values use YAML syntax.\nThere are many output options available, including options to optionally hide code, warnings, and/or output. See the documentation on Output Outputs for additional details."
  },
  {
    "href": "docs\\tools\\jupyter-lab.html#cell-execution",
    "title": "JupyterLab",
    "section": "Cell Execution",
    "text": "Note that when rendering an .ipynb Quarto will not execute the cells within the notebook by default (the presumption being that you already executed them while editing the notebook). If you want to execute the cells you can pass the --execute flag to render:\nquarto render jupyter-document.ipynb --execute\nYou can also specify this behavior within the notebook’s YAML front matter:\n---\ntitle: \"My Document\"\nexecute: true\njupyter: python3\n---\nThere are many other execution options available (e.g. to control caching, optimizing kernel start-up time, etc.). Learn more about these options in Execution Options."
  },
  {
    "href": "docs\\tools\\jupyter-lab.html#plain-text-editing",
    "title": "JupyterLab",
    "section": "Plain Text Editing",
    "text": "It’s also possible to edit Jupyter notebooks in a plain-text markdown format. You might prefer this if there is more narrative than code in your notebook or if you want to use a file format that is more version control friendly.\nHere is the plain text markdown version of the notebook used in the previous examples:\n---\ntitle: \"Matplotlib Demo\"\nauthor: \"Norah Smith\"\ndate: \"May 22nd, 2021\"\nformat: \n  html:\n    code-fold: true\njupyter: python3\n---\n\n## Polar Axis\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n```{python}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\nNote that we’ve added the jupyter: python3 option to the YAML front matter to indicate which Jupyter kernel to render with. You would render this document with:\nquarto render basics-jupyter.qmd\nMarkdown files with embedded code chunks should use the file extension .qmd.\n\n\n\n\n\n\nTip\n\n\n\nIf you are doing most of your work in .qmd files you should consider using RStudio, which includes full support for editing .qmd files that use Python and Jupyter (including code completion, cell-at-a-time execution, and side-by-side preview). See the article on using RStudio for additional details.\n\n\n\nConverting Notebooks\nYou can convert between .ipynb and .qmd representations of a notebook using the quarto convert command. For example:\nquarto convert basics-jupyter.ipynb --to markdown\nquarto convert basics-jupyter.qmd --to notebook\nSee quarto convert help for additional details on converting notebooks."
  },
  {
    "href": "docs\\tools\\rstudio.html#overview",
    "title": "RStudio IDE",
    "section": "Overview",
    "text": "The currently daily build of RStudio (v2021-07.0.275 or higher) includes support for editing and preview of Quarto documents. This works for plain markdown as well as both the Knitr and Jupyter engines.\nIf you are using Quarto within RStudio it is strongly recommended that you use this version (the documentation below assumes you are using this build).\nYou can download the RStudio daily build from https://dailies.rstudio.com.\n\nCreating Documents\nUse the File : New File : Quarto Doc… command to create new Quarto documents:\n\n\n\nRender and Preview\nUse the Render button to preview documents as you edit them:\n\nIf you prefer to automatically render whenever you save you can check the Render on Save option on the editor toolbar.\nThe preview will appear alongside the editor:\n\nThe preview will update whenever you re-render the document. Side-by-side preview works for both HTML and PDF output."
  },
  {
    "href": "docs\\tools\\rstudio.html#projects",
    "title": "RStudio IDE",
    "section": "Projects",
    "text": "If you want to create a new project for a Quarto document or set of documents, use the File : New Project… command, specify New Directory, then choose Quarto Project:\n\nYou can use this UI to create both vanilla projects as well as websites and books. Options are also provided for creating a git repository and initializing an renv environment for the project."
  },
  {
    "href": "docs\\tools\\rstudio.html#knitr-engine",
    "title": "RStudio IDE",
    "section": "Knitr Engine",
    "text": "Quarto is designed to be highly compatible with existing R Markdown documents. You should generally be able to use Quarto to render any existing Rmd document without changes.\nOne important difference between R Markdown documents and Quarto documents is that in Quarto chunk options are typically included in special comments at the top of code chunks rather than within the line that begins the chunk. For example:\n```{r}\n#| echo: false\n#| fig-cap: \"Air Quality\"\n\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n        geom_point() + \n        geom_smooth(method = \"loess\", se = FALSE)\n```\nQuarto uses this approach to both better accommodate longer options like fig-cap, fig-subcap, and fig-alt as well as to make it straightforward to edit chunk options within more structured editors that don’t have an easy way to edit chunk metadata (e.g. most traditional notebook UIs).\n\n\n\n\n\n\nNote\n\n\n\nNote that if you prefer it is still possible to include chunk options on the first line (e.g. ```{r, echo = FALSE}). That said, we recommend using the comment-based syntax to make documents more portable and consistent across execution engines.\n\n\nChunk options included this way use YAML syntax rather than R syntax for consistency with options provided in YAML front matter. You can still however use R code for option values by prefacing them with !expr. For example:\n#| fig-cap: !expr paste(\"Air\", \"Quality\")"
  },
  {
    "href": "docs\\tools\\rstudio.html#jupyter-engine",
    "title": "RStudio IDE",
    "section": "Jupyter Engine",
    "text": "You can also work with Quarto markdown documents that target the Jupyter engine within RStudio. These files will typically include a jupyter option in the YAML front matter indicating which kernel to use. For example:\n---\ntitle: \"Matplotlib Demo\"\nauthor: \"Norah Smith\"\njupyter: python3\n---\nIf you want to work within a virtual environment (venv), use the File : New Project… command, specify the Jupyter engine with a venv, and specify which packages you’d like to seed the venv with:\n\nRStudio will automatically activate this virtual environment whenever you open the project. You can install additional Python packages into the environment using the RStudio Terminal tab. For example:"
  },
  {
    "href": "docs\\tools\\rstudio.html#r-package",
    "title": "RStudio IDE",
    "section": "R Package",
    "text": "If you are not using RStudio and/or you prefer to render from the R console, you can do so using the quarto R package. To install the R package:\ninstall.packages(\"quarto\")\nThen, to render a document:\nlibrary(quarto)\nquarto_render(\"document.qmd\")\nTo live preview (automatically render & refresh the browser on save) for a document you are working on, use the quarto_preview() function:\nlibrary(quarto)\nquarto_preview(\"document.qmd\")\nIf you working on a website or book project, you can run the Quarto development server with:\nlibrary(quarto)\nquarto_serve()"
  },
  {
    "href": "docs\\tools\\text-editors.html#overview",
    "title": "Text Editors",
    "section": "Overview",
    "text": "If you are editing plain markdown documents (with no embedded computations) you may want to use your favorite text editor (Vim, Emacs, Sublime, etc.) to author Quarto documents. This articles provides some guidance on the optimal workflow when using text editors with Quarto.\nNote that if you are using either the Jupyter or Knitr computational engine you will likely be better off using JupyterLab or VS Code (for .ipynb notebooks) or RStudio (for .qmd documents) as these environments provide code-completion, incremental cell execution, and other useful tools for working with executable code."
  },
  {
    "href": "docs\\tools\\text-editors.html#workflow",
    "title": "Text Editors",
    "section": "Workflow",
    "text": "The ideal workflow for authoring Quarto markdown documents is to run the quarto preview command from within a terminal:\nquarto preview document.md\nThe document will be rendered and a web browser with a “live preview” opened. Position this browser so that you can see it as you edit and save the document:\n\nEvery time you save the preview will be automatically updated. You can use quarto preview for both HTML and PDF output.\n\n\n\n\n\n\nNote that if you are authoring a book or website you should use quarto serve instead, which will create a live preview for the entire project.\n\n\n\n\nRender without Preview\nYou can render a document (or group of documents) without previewing them using the quarto render command:\nquarto render document.md\nUse the --to argument to render to different formats:\nquarto render document.md --to docx"
  },
  {
    "href": "docs\\tools\\text-editors.html#file-extension",
    "title": "Text Editors",
    "section": "File Extension",
    "text": "You’ll likely find that it’s easier to use the .md file extension (rather than .qmd) when working with plain markdown documents. This enables you to take advantage of existing behaviors associated with .md in your text editor configuration (you can certainly also modify your editor configuration to recognize .qmd).\nNote that if you end up at some point including embedded computations in your document you should at that point change the extension to .qmd (and as discussed above possibly migrate to using a tool that has more built-in tools for working with executable code)."
  },
  {
    "href": "docs\\tools\\vscode.html#overview",
    "title": "VS Code",
    "section": "Overview",
    "text": "Quarto can render Jupyter notebooks represented as plain text (.qmd) or as a normal notebook file (.ipynb). One benefit of using .ipynb is that you can use the VS Code Jupyter Notebook UI as your editor.\nHere is the “Hello, Quarto” example from the homepage inside VSCode:\n\nIf you look at the source code you’ll note that YAML options were provided both at the top of the document and within the code cell. We’ll describe working with YAML options in more detail below."
  },
  {
    "href": "docs\\tools\\vscode.html#workflow",
    "title": "VS Code",
    "section": "Workflow",
    "text": "The ideal workflow for authoring Quarto notebooks in VS Code is to run the quarto preview command from within a terminal:\nquarto preview notebook.ipynb\nThe notebook will be rendered and a web browser with a “live preview” opened. Position this browser so that you can see it as you edit and save the notebook:\n\nEvery time you save within VS Code the preview will be automatically updated. You can use quarto preview for both HTML and PDF output.\nIn the screenshot above you’ll note that we ran quarto preview inside a VS Code terminal window—this is generally recommended so that you can see progress and error messages when renders occur.\n\n\n\n\n\n\nNote that if you are authoring a book or website you should use quarto serve instead, which will create a live preview for the entire project.\n\n\n\n\nRender without Preview\nYou can render a notebook (or group of notebooks) without previewing them using the quarto render command:\nquarto render notebook.ipynb\nUse the --to argument to render to different formats:\nquarto render notebook.ipynb --to docx"
  },
  {
    "href": "docs\\tools\\vscode.html#yaml-front-matter",
    "title": "VS Code",
    "section": "YAML Front Matter",
    "text": "The first cell of your notebook should be a Raw cell that contains the document title, author, and any other options you need to specify. Note that you can switch the type of a call to Raw using the cell type menu at the bottom right of the cell:\n\nIn this example we specify that we want code to appear collapsed by default. There are YAML options to control many other aspects of document rendering. See the documentation on Authoring and Output Formats for additional details."
  },
  {
    "href": "docs\\tools\\vscode.html#markdown-cells",
    "title": "VS Code",
    "section": "Markdown Cells",
    "text": "Here’s the underlying code for the markdown cell:\n\nNote that a Quarto cross-reference (@fig-polar) is included in the markdown. Any valid Pandoc markdown syntax can be included in markdown cells."
  },
  {
    "href": "docs\\tools\\vscode.html#output-options",
    "title": "VS Code",
    "section": "Output Options",
    "text": "Quarto uses leading comments with a special prefix (#|) to denote cell options. Here we specify the label and fig-cap options so that the plot generated from the cell can be cross-referenced.\n\nNote that options must appear at the very beginning of the cell. As with document front-matter, option names/values use YAML syntax.\nThere are many output options available, including options to optionally hide code, warnings, and/or output. See the documentation on Output Outputs for additional details."
  },
  {
    "href": "docs\\tools\\vscode.html#cell-execution",
    "title": "VS Code",
    "section": "Cell Execution",
    "text": "Note that when rendering an .ipynb Quarto will not execute the cells within the notebook by default (the presumption being that you already executed them while editing the notebook). If you want to execute the cells you can pass the --execute flag to render:\nquarto render jupyter-document.ipynb --execute\nYou can also specify this behavior within the notebook’s YAML front matter:\n---\ntitle: \"My Document\"\nexecute: true\njupyter: python3\n---\nThere are many other execution options available (e.g. to control caching, optimizing kernel start-up time, etc.). Learn more about these options in Execution Options."
  },
  {
    "href": "docs\\tools\\vscode.html#plain-text-editing",
    "title": "VS Code",
    "section": "Plain Text Editing",
    "text": "It’s also possible to edit Jupyter notebooks in a plain-text markdown format. You might prefer this if there is more narrative than code in your notebook or if you want to use a file format that is more version control friendly.\nHere is the plain text markdown version of the notebook used in the previous examples:\n---\ntitle: \"Matplotlib Demo\"\nauthor: \"Norah Smith\"\ndate: \"May 22nd, 2021\"\nformat: \n  html:\n    code-fold: true\njupyter: python3\n---\n\n## Polar Axis\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n```{python}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\nNote that we’ve added the jupyter: python3 option to the YAML front matter to indicate which Jupyter kernel to render with. You would render this document with:\nquarto render basics-jupyter.qmd\nMarkdown files with embedded code chunks should use the file extension .qmd.\n\n\n\n\n\n\nTip\n\n\n\nIf you are doing most of your work in .qmd files you should consider using RStudio, which includes full support for editing .qmd files that use Python and Jupyter (including code completion, cell-at-a-time execution, and side-by-side preview). See the article on using RStudio for additional details.\n\n\n\nConverting Notebooks\nYou can convert between .ipynb and .qmd representations of a notebook using the quarto convert command. For example:\nquarto convert basics-jupyter.ipynb --to markdown\nquarto convert basics-jupyter.qmd --to notebook\nSee quarto convert help for additional details on converting notebooks."
  },
  {
    "href": "docs\\visual-editor\\content.html#editing-tables",
    "title": "Content Editing",
    "section": "Editing Tables",
    "text": "You can insert a table using the Table menu. You can then use either the main menu or a context menu to insert and delete table rows and columns:\n\nNote that if you select multiple rows or columns the insert or delete command will behave accordingly. For example, to insert 2 rows, first select 2 rows then use the insert command.\nWhen you make a selection of multiple rows and/or columns as illustrated above, you can also copy and paste groups of cells within the table."
  },
  {
    "href": "docs\\visual-editor\\content.html#editing-lists",
    "title": "Content Editing",
    "section": "Editing Lists",
    "text": "As described above, you can create a new list by just typing - or 1. at the beginning of an empty paragraph. To add items to the list, just press Enter within a list item. To exit the list, press Enter within an empty list item.\nWhile this covers many simple list editing tasks, there is a variety of other actions you may want to take within lists, including creating nested lists and adding paragraphs or code blocks to an exiting list item. From an empty list item (pictured at left), the following keyboard gestures can be used to do this:\n\n\n\n\n\n\n\n\nEmpty Item (enter to exit list)\nTab (add sublist)\nBackspace  (add block)\n\n\n\n\n\n\n\n\n\n\nYou can also use Shift+Tab to lift a list item into the previous level.\n\nTight Lists\nMarkdown distinguishes between normal and tight lists, where tight lists have less vertical spacing between items. In markdown source code, you designate a tight list by having no empty lines between your list items.\nVisual mode creates normal lists by default (you can change this behavior via Editor Options). You can toggle between normal and tight lists using the ⌥⌘ 9 keyboard shortcut. You can also change the list type using the Format -> Edit Attributes dialog (also accessible via the F4 shortcut). If you have existing tight lists in your markdown source files, they will remain so within the visual editor."
  },
  {
    "href": "docs\\visual-editor\\content.html#pandoc-attributes",
    "title": "Content Editing",
    "section": "Pandoc Attributes",
    "text": "Several of Pandoc’s block types (e.g. headings, code blocks, and divs) enable you to specify a set of custom attributes. Attributes include IDs and class names, as well as arbitrary key-value pairs that are passed through to output formats (e.g. as attributes for HTML tags). For these block types, an edit button will appear at the the top right when your cursor is within the block:\n\nNote that any ID as well as the first class specified within the attributes are also displayed. Click the edit button or use the F4 keyboard shortcut to edit the attributes."
  },
  {
    "href": "docs\\visual-editor\\content.html#special-characters",
    "title": "Content Editing",
    "section": "Special Characters",
    "text": "Hard Line Breaks\nYou can insert a hard line break using the Insert -> Special Characters -> Hard Line Break command or via the ⇧ Enter keyboard shortcut.\n\n\nNon-Breaking Spaces\nYou can insert a non-breaking space using the Insert -> Special Characters -> Non-Breaking Space command or via the ⌃ Space keyboard shortcut. Non-breaking spaces are displayed with an alternate background color to distinguish them from normal spaces.\nA markdown non-breaking space will result in the &nbsp; character within HTML output and a ~ character within LaTeX output.\n\n\nEmojis\nTo insert an emoji, you can use either the Insert menu or the requisite markdown shortcut plus auto-complete:\n\n\n\nInsert -> Special Characters -> Emoji…\nMarkdown Shortcut\n\n\n\n\n\n\n\n\n\nFor markdown formats that support text representations of emojis (e.g. :grinning:), the text version will be written. For other formats the literal emoji character will be written. Currently, the gfm and hugo (with enableEmjoi = true in the site config) formats both support text representation of emojis.\nIf you want to add support for markdown emoji output to another Quarto format, you can add the emoji extension to the from option in document metadata. For example:\n---\ntitle: \"My Document\"\nfrom: markdown+emoji\n---\n\n\nUnicode Symbols\nTo insert an arbitrary Unicode character, use Insert -> Special Characters -> Unicode…:\n\nYou can search for characters either by name or by entering an explicit Unicode code point (e.g. “U+0420”).\n\n\nSmart Punctuation\nWhen the Pandoc smart extension is enabled (which it is by default), straight quotes are interpreted as curly quotes, --- as em-dashes, -- as en-dashes, and ... as ellipses. In addition, non-breaking spaces are inserted after certain abbreviations, such as “Mr.”\nVisual mode supports these same transformations (so when you type --- it becomes an em-dash). If you didn’t intend for this transformation to occur just hit backspace and it will be reverted."
  },
  {
    "href": "docs\\visual-editor\\content.html#spell-checking",
    "title": "Content Editing",
    "section": "Spell-Checking",
    "text": "When RStudio real time spell-checking is enabled (you can do this using Spelling preferences), misspelled words will be underlined as you type:\n\nTo resolve a spelling error, right-click on the misspelled word, then either choose an alternate spelling, ignore the word (which applies to the current document only), or add the word to your user dictionary (which applies to all documents).\nIf you ignore a word by mistake, right-click it again to unignore it. If you want to edit your personal dictionary, use the Edit User Dictionary… button located within Spelling preferences."
  },
  {
    "href": "docs\\visual-editor\\content.html#commenting",
    "title": "Content Editing",
    "section": "Commenting",
    "text": "When reviewing a document you often want to provide inline comments with suggested revisions. This is possible in Quarto using HTML comments (which are ignored by all output formats). Visual mode includes a command for inserting HTML comments as well as special highlighting treatment to easily parse out editing comments from surrounding text.\n\nNote that the # prefix used in the comment is what triggers the special background highlighting. If you remove the # it will still be a valid HTML comment, but just won’t be highlighted as shown above.\nYou can insert an HTML comment using the Comment button on the toolbar or via the ⇧⌘ C keyboard shortcut. Remember, HTML comments won’t show up in rendered output so they are ideal both for review but also for leaving yourself to-do notes within a document."
  },
  {
    "href": "docs\\visual-editor\\content.html#css-styles",
    "title": "Content Editing",
    "section": "CSS Styles",
    "text": "One of the benefits of authoring with markdown is that your content can be easily published to a wide variety of formats. This is possible in significant measure because of the limitations that markdown imposes: you author in terms of the structure and semantics of your content, rather than worrying about specifically how things will appear.\nSometimes however you know that you’ll be publishing to HTML, and you want to exert more control over how things look. In this case, you can use CSS (Cascading Style Sheets) along with markdown to do custom formatting. This section covers how to:\n\nDefine CSS styles for your document; and\nApply those styles to entities within your document.\n\nIf you are new to CSS, you may want to brush up on the basics before proceeding.\n\n\n\n\n\n\nCSS styles apply only to HTML output, and will not have any impact on the formatting of other output types like PDF or MS Word.\n\n\n\n\nDefining Styles\nThe best way to include CSS styles is to create an external stylesheet (e.g. styles.css), then include it within the output options of your document. For example:\n---\ntitle: \"CSS Demo\"\noutput:\n  html_document:\n    css: styles.css\n---\nThe styles.css file might look something like this:\n.important {\n  color: maroon;\n}\n\n.illustration {\n  border: 1px solid rgb(230, 230, 230); \n}\nNote that it’s also possible to define styles inline with a CSS code chunk, but we recommend using an external file for easier manageability.\nWithin a markdown document you can apply one or more CSS classes to various document entities including headings, images, divs, and spans. CSS classes are applied using pandoc attributes. Once you’ve applied a class to an entity, it will derive its formatting from the CSS properties of the specified class.\n\n\nHeadings\nTo add a CSS class to a heading, use the edit button at the top right of the heading that appears when your cursor is within it (or use the F4 keyboard shortcut):\n\nNote the presence of the .important class within the Edit Attributes dialog.\nCSS classes applied to headings affect all content beneath the heading (an HTML <section> tag is wrapped around the content by Pandoc), so heading classes are a great way to provide custom styles for entire sections of your document.\n\n\n\n\n\n\nNote that the visual editor doesn’t currently render content using styles applied through CSS classes so you won’t see the custom formatting while editing. You will however see it when rendering and previewing the HTML version of the document.\n\n\n\n\n\nImages\nYou can apply CSS classes to images (for example, to give them a special border) using the standard Image dialog. To do this, double-click the image (or use the F4 shortcut with the image selected) and apply the desired classes:\n\nNote again that the visual editor won’t display your image with the applied CSS classes while editing, however when actually rendering the document to HTML you’ll see the styles reflected.\n\n\nDivs\nDivs are special entities that allow you to apply identifiers and/or styles to a region of a document. Divs are block elements (like paragraphs).\nYou can create divs using the Insert -> Div command, and you can apply attributes (including CSS classes) to divs the same way as you apply attributes to headings (clicking the edit button or using the F4 keyboard shortcut when you are within a div):\n\nNote the presence of the .important class within the Div Attributes dialog.\n\n\nSpans\nSpan are special entities that allow you to apply identifiers and/or styles to a region of text. Spans are inline formatting marks (like bold or italic).\nSpans can be created by selecting text and using the Format -> Span command:\n\nHere we’ve applied a span to the text “customize PDF reports” and we’ve used the span to apply the .important CSS class. Note that as with headings and images the formatting is not displayed in the visual editor, but will be visible when the document is rendered."
  },
  {
    "href": "docs\\visual-editor\\index.html#overview",
    "title": "Visual Editor",
    "section": "Overview",
    "text": "The Quarto visual editor provides a WYSIWYM editing interface for all of Pandoc markdown, including tables, citations, cross-references, footnotes, divs/spans, definition lists, attributes, raw HTML/TeX, and more. The visual editor also includes support for executing code cells and viewing their output inline:\n\nThe visual editor doesn’t attempt to abstract away or obscure the underlying markdown document. Rather, it aims to provide a highly productive writing interface for people that love markdown. The editor maintains a lightweight feel that emphasizes semantics over styling. You can also still use most markdown constructs (e.g., ## or bold) directly for formatting, and when switching between visual and source mode your editing location and undo/redo state are fully preserved."
  },
  {
    "href": "docs\\visual-editor\\index.html#getting-started",
    "title": "Visual Editor",
    "section": "Getting Started",
    "text": "The Quarto visual editor is currently available as a feature of the RStudio IDE. The visual editor will eventually also be made available in standalone form.\n\n\n\n\n\n\nNote that the visual editor being a feature of RStudio should not dissuade you from using it if you are working with Python/Jupyter: RStudio includes robust support for Python, including inline cell execution, auto-complete, a variable explorer, and more.\n\n\n\nTo get started with the visual editor, download the RStudio daily build for your platform from:\nhttps://dailies.rstudio.com\nNote that Quarto visual editing is only available in the daily build (the current stable release of RStudio v1.4 has an earlier version of the visual editor not tailored for use with Quarto).\n\nSwitching Modes\nMarkdown documents can be edited in either source or visual mode. To switch into visual mode for a given document, use the  button at the top-right of the document toolbar (or alternatively the ⌘⇧ F4 keyboard shortcut):\n\nNote that you can switch between source and visual mode at any time (editing location and undo/redo state will be preserved when you switch)."
  },
  {
    "href": "docs\\visual-editor\\index.html#using-the-editor",
    "title": "Visual Editor",
    "section": "Using the Editor",
    "text": "Keyboard Shortcuts\nThere are keyboard shortcuts for all basic editing tasks. Visual mode supports both traditional keyboard shortcuts (e.g. ⌘ B for bold) as well as markdown shortcuts (using markdown syntax directly). For example, enclose **bold** text in asterisks or type ## and press space to create a second level heading. Here are some of the most commonly used shortcuts:\n\n\n\nCommand\nKeyboard Shortcut\nMarkdown Shortcut\n\n\n\n\nBold\n⌘ B\n**bold**\n\n\nItalic\n⌘ I\n*italic*\n\n\nCode\n⌘ D\n`code`\n\n\nLink\n⌘ K\n<href>\n\n\nHeading 1\n⌥⌘ 1\n#\n\n\nHeading 2\n⌥⌘ 2\n##\n\n\nHeading 3\n⌥⌘ 3\n###\n\n\nR Code Chunk\n⌥⌘ I\n```{r}\n\n\n\nSee the editing shortcuts article for a complete list of all shortcuts.\n\n\nInsert Anything\nYou can also use the catch-all ⌘ / shortcut to insert just about anything. Just execute the shortcut then type what you want to insert. For example:\n\n\n\n\n\n\n\n\n\n\nIf you are at the beginning of a line (as displayed above), you can also enter plain / to invoke the shortcut.\n\n\nEditor Toolbar\nThe editor toolbar includes buttons for the most commonly used formatting commands:\n\nAdditional commands are available on the Format, Insert, and Table menus:\n\n\n\nFormat\nInsert\nTable"
  },
  {
    "href": "docs\\visual-editor\\index.html#learning-more",
    "title": "Visual Editor",
    "section": "Learning More",
    "text": "Check out the following articles to learn more about visual markdown editing:\n\nTechnical Writing covers features commonly used in scientific and technical writing, including citations, cross-references, footnotes, equations, embedded code, and LaTeX.\nContent Editing provides more depth on visual editor support for tables, lists, pandoc attributes, CSS styles, comments, symbols/emojis, etc.\nShortcuts & Options documents the two types of shortcuts you can use with the editor: standard keyboard shortcuts and markdown shortcuts and describes various options for configuring the editor.\nMarkdown Output describes how the visual editor parses and writes markdown and describes various ways you can customize this."
  },
  {
    "href": "docs\\visual-editor\\markdown.html#overview",
    "title": "Markdown Output",
    "section": "Overview",
    "text": "The Quarto visual editor generates markdown using Pandoc. This means that in some cases your markdown will be rewritten to conform to standard Pandoc idioms. For example, Pandoc inserts 3 spaces after list bullets and automatically escapes characters that might be used for markdown syntax.\nHere is a list of conventions for Pandoc generated markdown that might differ from your own markdown writing style:\n\n*text* is used in preference to _text_\nBacktick code blocks are written as ``` {.md} rather than ```md\nBacktick code blocks with no attributes are rendered as 4-space indented code blocks\nHorizontal rules are written as dashes spanning the full width of the document\nPlain links are written as <https://yihui.org> rather than https://yihui.org\nBullet and numbered lists use additional leading spaces before list item content\nThe blockquote character (>) is included on each new line of a blockquote\nTable captions are written below rather than above tables\nMultiline HTML and TeX blocks use the explicit raw attribute (e.g. ```{=tex})\nInline footnotes are replaced with footnotes immediately below the paragraph\nNested divs use ::: at all levels so long as their attributes are distinct\nUnnumbered sections are designated with {.unnumbered} rather than {-}\nCharacters used for markdown syntax (e.g. *, _, or #) are always escaped\n\nWhile some of this behavior might be bothersome at first, if you decide that visual editing mode is useful for your workflow it’s probably best to just adapt to writing your own markdown the same way that Pandoc does. Note that you can also configure source mode to write markdown using these conventions, ensuring that the same markdown is written no matter which mode edits originate from."
  },
  {
    "href": "docs\\visual-editor\\markdown.html#writer-options",
    "title": "Markdown Output",
    "section": "Writer Options",
    "text": "Some aspects of markdown output can be customized via global, project, or file-level options, including:\n\nHow to wrap / break lines (fixed column, sentence-per-line, etc.).\nWhere to write footnotes (below the current paragraph or section, or at the end of the document).\nWhether to use the visual mode markdown writer when saving markdown from source mode (to ensure consistency between documents saved from either mode).\n\nYou can set these options within the R Markdown Global Options or Project Options, or can alternatively set them on a per-file basis using YAML (as described below).\n\nLine Wrapping\nBy default, the visual editor writes Markdown with no line wrapping (paragraphs all occupy a single line). This matches the behavior of markdown source editing mode within RStudio.\nHowever, if you prefer to insert line breaks at a particular column (e.g. 72 or 80), or to insert a line break after each sentence, you can set a global or per-project editor option to this effect.\nYou can also set this behavior on a per-document basis via the wrap option. For example, to wrap lines after 72 characters you would use this:\n---\neditor_options:\n  markdown:\n    wrap: 72\n---\nTo insert a line break after each sentence, use wrap: sentence. For example:\n---\neditor_options:\n  markdown:\n    wrap: sentence\n---\n\n\n\n\n\n\nThe algorithm used for sentence wrapping will handle English and Japanese text well, but may not detect the end of sentences accurately for other languages.\n\n\n\nIf you have enabled a global line wrapping option and want to turn off wrapping for a given document, use wrap: none.\n\n\nReferences\nBy default, references are written at the end of the block where their corresponding footnote appears. You can override this behavior using the references option.\nFor example, to write references at the end of sections rather than blocks you would use:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    references: \n      location: block\n---\nValid values for the references option are block, section, and document.\nNote that you can also set a global or per-project editor option to control reference writing behavior.\nIf you are aggregating a set of markdown documents into a larger work, you may want to make sure that reference identifiers are unique across all of your documents (e.g. you don’t want to have [^1] appear multiple times). You can ensure uniqueness via the prefix option. For example:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    references: \n      location: block\n      prefix: \"mydoc\"\n---\nThis will result in footnotes in this document using the specified prefix (e.g. [^mydoc-1]), ensuring they are globally unique across the manuscript.\n\n\n\n\n\n\nNote that if you are within a Quarto book project then a references prefix is applied automatically so no changes to editor_options are required.\n\n\n\n\n\nCanonical Mode\nIf you have a workflow that involves editing in both visual and source mode, you may want to ensure that the same markdown is written no matter which mode edits originate from. You can accomplish this using the canonical option. For example:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    wrap: 72\n    references: \n      location: block\n    canonical: true\n---\nWith canonical: true, edits in visual mode and source mode will result in identical markdown output. This is especially useful if you have multiple authors collaborating using version control, with a mixture of source and visual mode editing among the authors."
  },
  {
    "href": "docs\\visual-editor\\markdown.html#known-limitations",
    "title": "Markdown Output",
    "section": "Known Limitations",
    "text": "There are a handful of Pandoc markdown extensions not currently supported by visual editing. These are infrequently used extensions, so in all likelihood they won’t affect documents you edit, but are still worth noting.\n\n\n\nExtension(s)\nExample\nBehavior\n\n\n\n\nInline footnotes\n[^1]\nConverted to numeric footnote.\n\n\nFootnote identifiers\n[^longnote]\nConverted to numeric footnote.\n\n\nExample lists\n(@) First example\nRead/written as ordinary numbered lists.\n\n\nAuto-list numbers\n#. First item\nRead/written as ordinary numbered lists.\n\n\nReference links\nThis is a [link]\nConverted to ordinary links.\n\n\nMultiMarkdown attributes\n# Heading [id]\nConverted to Pandoc attributes.\n\n\n\nThe visual editor is unable to parse non-YAML title blocks (e.g. old-style % titles or MultiMarkdown titles) and also unable to parse non top-level YAML metadata blocks. If these forms of metadata are encountered, visual mode will fail to load with a warning."
  },
  {
    "href": "docs\\visual-editor\\options.html#shortcuts",
    "title": "Shortcuts & Options",
    "section": "Shortcuts",
    "text": "Visual mode supports both traditional keyboard shortcuts (e.g. ⌘ B for bold) as well as markdown shortcuts (using markdown syntax directly). For example, enclose **bold** text in asterisks or type ## and press space to create a second level heading.\nHere are the available keyboard and markdown shortcuts:\n\n\n\nCommand\nKeyboard Shortcut\nMarkdown Shortcut\n\n\n\n\nBold\n⌘ B\n**bold**\n\n\nItalic\n⌘ I\n*italic*\n\n\nCode\n⌘ D\n`code`\n\n\nStrikeout\n\n~~strike~~\n\n\nSubscript\n\n~sub~\n\n\nSuperscript\n\n^super^\n\n\nHeading 1\n⌥⌘ 1\n#\n\n\nHeading 2\n⌥⌘ 2\n##\n\n\nHeading 3\n⌥⌘ 3\n###\n\n\nHeading Attributes\n\n{#id .class}\n\n\nBlockquote\n\n>\n\n\nCode Block\n⇧⌘ \\\n```\n\n\nR Code Chunk\n⌥⌘ I\n```{r}\n\n\nRaw Block\n\n```{=html}\n\n\nDiv\n\n:::\n\n\nBullet List\n\n-\n\n\nOrdered List\n\n1.\n\n\nTight List\n⌥⌘ 9\n\n\n\nList Check\n\n[x]\n\n\nLink\n⌘ K\n<href>\n\n\nEmoji\n\n:smile:\n\n\nDefinition\n\n:\n\n\nNon-Breaking Space\n⌃ Space\n\n\n\nHard Line Break\n⇧ Enter\n\n\n\nParagraph\n⌥⌘ 0\n\n\n\nImage\n⇧⌘ I\n\n\n\nFootnote\n⇧⌘ F7\n\n\n\nCitation\n⇧⌘ F8\n[@\n\n\nTable\n⌥⌘ T\n\n\n\nEditing Comment\n⇧⌘ C\n\n\n\nSelect All\n⌘ A\n\n\n\nClear Formatting\n⌘ \\\n\n\n\nEdit Attributes\nF4\n\n\n\nRun Code Chunk\n⇧⌘ Enter\n\n\n\nRun Previous Chunks\n⇧⌥⌘ P\n\n\n\n\n\n\n\n\n\n\nFor markdown shortcuts, if you didn’t intend to use a shortcut and want to reverse its effect, just press the backspace key."
  },
  {
    "href": "docs\\visual-editor\\options.html#insert-anything",
    "title": "Shortcuts & Options",
    "section": "Insert Anything",
    "text": "You can also use the catch-all ⌘ / shortcut to insert just about anything. Just execute the shortcut then type what you want to insert. For example:\n\n\n\n\n\n\n\n\n\n\nIf you are at the beginning of a line (as displayed above) you can also enter plain / to invoke the shortcut."
  },
  {
    "href": "docs\\visual-editor\\options.html#global-options",
    "title": "Shortcuts & Options",
    "section": "Global Options",
    "text": "You can customize visual editing options within R Markdown -> Visual (note that the visual editor was originally created for use with R Markdown so its options are located there — these options are also applicable to usage with Quarto):\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nUse visual editing by default\nSwitch to visual mode immediately when creating new documents.\n\n\nShow document outline by default\nShow the navigational outline when opening documents in visual mode.\n\n\nEditor content width\nMaximum width for editing content. This is intended to keep editing similar to the width that users will see.\n\n\nEditor font size\nBase font size for editor content (default: inherit from IDE settings).\n\n\nShow margin column indicator in code blocks\nShow vertical line that indicates location of editing margin column (e.g. 80).\n\n\nDefault spacing between list items\nWhether to use tight or normal spacing between list items by default. See Tight Lists for details.\n\n\nAutomatic text wrapping (line breaks)\nWhen writing markdown, automatically insert line breaks after sentences or at a specified column (default: flow text; no auto-wrapping). See Line Wrapping for details.\n\n\nWrite references at end of current\nWrite references (footnotes) at the end of the block or section where they appear, or at the end of the document. See References for details.\n\n\nWrite canonical visual mode markdown in source mode\nUse the visual mode markdown writer when saving markdown from source mode (ensure consistency between documents saved from either mode)."
  },
  {
    "href": "docs\\visual-editor\\options.html#citation-options",
    "title": "Shortcuts & Options",
    "section": "Citation Options",
    "text": "You can customize visual editor citation options within R Markdown -> Citations:\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nZotero Library\nLocation of Zotero citation library (Local or Web).\n\n\nZotero Data Directory\nLocation of Zotero local data directory.\n\n\nUse libraries\nZotero libraries to use as reference sources.\n\n\nUse Better BibTeX for citation keys and BibTeX export.\nOptionally use Better BibTeX to generate citation keys and export BibTeX from Zotero (this option appears only if Better BibTeX is installed)."
  },
  {
    "href": "docs\\visual-editor\\options.html#project-options",
    "title": "Shortcuts & Options",
    "section": "Project Options",
    "text": "Global options that affect the way markdown is written can also be customized on a per-project basis. You can do this using the R Markdown pane of the Project Options dialog:\n\nBy default projects inherit the current global settings for markdown writing and Zotero libraries."
  },
  {
    "href": "docs\\visual-editor\\options.html#file-options",
    "title": "Shortcuts & Options",
    "section": "File Options",
    "text": "Global and project options that affect the way markdown is written can also be customized on a per-file basis . You can do this by including an editor_options: markdown key in the YAML front matter of your document. For example:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\neditor_options:\n  markdown:\n    wrap: 72\n---\nYou might want to do this to ensure that multiple authors on different workstations use the same markdown writing options.\nYou can also instruct RStudio to use these same options when saving files from source mode. To do this add the canonical option. For example:\n---\neditor_options:\n  markdown:\n    wrap: 72\n    canonical: true\n---\nWith canonical: true, edits in visual mode and source mode will result in identical markdown output. This is especially useful if you have multiple authors collaborating using version control, with a mixture of source and visual mode editing among the authors.\nSee the documentation on Writer Options for additional details on markdown writing options."
  },
  {
    "href": "docs\\visual-editor\\technical.html#equations",
    "title": "Technical Writing",
    "section": "Equations",
    "text": "LaTeX equations are authored using standard Pandoc markdown syntax (the editor will automatically recognize the syntax and treat the equation as math). When you aren’t directly editing an equation it will appear as rendered math:\n\nAs shown above, when you select an equation with the keyboard or mouse you can edit the equation’s LaTeX. A preview of the equation will be shown below it as you type."
  },
  {
    "href": "docs\\visual-editor\\technical.html#cross-references",
    "title": "Technical Writing",
    "section": "Cross References",
    "text": "Cross References make it easier for readers to navigate your document by providing numbered references and hyperlinks to various entities like figures, tables, and equestions.\nEvery cross-referenceable entity requires a label (unique identifier) and caption (description). For example, this is a cross-referenceable figure:\n![Elephant](elephant.png){#fig-elephant}\nThe presence of the caption (“Elephant”) and label (#fig-elephant) make this figure referenceable. This enables you to use the following syntax to refer to it elsewhere in the document:\nSee @fig-elephant for an illustration.\nHere is what this would look like rendered to HTML:\n\nSee the article on Cross References for full documentation on creating cross references and customizing their display.\nUse the Insert -> Cross Reference… command to insert a cross reference:\n\nYou can also just type prefix of a cross reference label (e.g. @fig-env) and select it via auto-complete:\n\nSimilar to hyperlinks, you can also navigate to the location of a cross-reference by clicking the popup link that appears when it’s selected:\n\nYou can also navigate directly to any cross-reference using IDE global search:"
  },
  {
    "href": "docs\\visual-editor\\technical.html#footnotes",
    "title": "Technical Writing",
    "section": "Footnotes",
    "text": "You can include footnotes using the Insert -> Footnote command (or the ⇧⌘ F7 keyboard shortcut). Footnote editing occurs in a pane immediately below the main document:\n\n\n\n\n\n\n\nBy default footnotes will be written in markdown immediately below the block in which they appear. You can customize this behavior via editor options."
  },
  {
    "href": "docs\\visual-editor\\technical.html#embedded-code",
    "title": "Technical Writing",
    "section": "Embedded Code",
    "text": "Source code which you include in a Quarto document can either be for display only or can be executed by Jupyter or Knitr as part of rendering. Code can furthermore be either inline or block.\n\nDisplaying Code\nTo display but not execute code, either use the Insert -> Code Block menu item, or start a new line and type either:\n\n``` (for a plain code block); or\n```<lang> (where <lang> is a language) for a code block with syntax highlighting.\n\nThen press the Enter key. To display code inline, simply surround text with backticks (`code`), or use the Format -> Code menu item.\n\n\nCode Chunks\nTo insert an executable code chunk, use the Insert -> Code Chunk menu item, or start a new line and type:\n```{r}\nThen press the Enter key. Note that r could be another language supported by knitr (e.g. python or sql) and you can also include a chunk label and other chunk options.\nTo include inline R code, you just create normal inline code (e.g. by using backticks or the ⌘ D shortcut) but preface it with r. For example, this inline code will be executed by knitr: `r Sys.Date()`. Note that when the code displays in visual mode it won’t have the backticks (but they will still appear in source mode).\n\n\nRunning Chunks\nYou can execute the currently selected R or Python code chunk using either the run button at the top right of the code chunk or using the ⇧⌘ Enter keyboard shortcut:\n\nYou can execute code chunks up to the current one using the toolbar button or using the ⌥⌘ P keyboard shortcut."
  },
  {
    "href": "docs\\visual-editor\\technical.html#latex-and-html",
    "title": "Technical Writing",
    "section": "LaTeX and HTML",
    "text": "You can also include raw LaTeX commands or HTML tags when authoring in visual mode. The raw markup will be automatically recognized and syntax highlighted. For example:\n\nThe above examples utilize inline LaTex and HTML. You can also include blocks of raw content using the commands on the Format -> Raw menu. For example, here is a document with a raw LaTeX block:\n\n\n\n\n\n\n\nNote that Pandoc ignores LaTeX commands when not producing LaTeX based output, and ignores HTML tags when not producing HTML based output."
  },
  {
    "href": "docs\\visual-editor\\technical.html#citations",
    "title": "Technical Writing",
    "section": "Citations",
    "text": "Visual mode uses the standard Pandoc markdown representation for citations (e.g. [@citation]). Citations can be inserted from a variety of sources:\n\nYour document bibliography.\nZotero personal or group libraries.\nDOI (Document Object Identifier) references.\nSearches of Crossref, DataCite, or PubMed.\n\nIf you insert citations from Zotero, DOI look-up, or a search then they are automatically added to your document bibliography.\n\nBibliographies\nPandoc supports bibliographies in a wide variety of formats including BibTeX and CSL. Add a bibliography to your document using the bibliography YAML metadata field. For example:\n---\ntitle: \"My Document\"\nbibliography: references.bib\nlink-citations: true\n---\nNote that we’ve also specified the link-citations option, which will make your citations hyperlinks to the corresponding bibliography entries.\nSee the Pandoc Citations documentation for additional information on bibliography formats.\n\n\nInserting Citations\nYou insert citations by either using the Insert -> Citation command or by using markdown syntax directly (e.g. [@cite] or @cite) .\nCitations go inside square brackets and are separated by semicolons. Each citation must have a key, composed of ‘@’ + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix. The citation key must begin with a letter, digit, or _, and may contain alphanumerics, _, and internal punctuation characters (:.#$%&-+?<>~/). Here are some examples:\n\n  \n    Blah Blah [see @doe99, pp. 33-35; also @smith04, chap. 1].\n  \n\n\n  Blah Blah [@doe99, pp. 33-35, 38-39 and passim].\n  \n\n\n  Blah Blah [@smith04;\n  @doe99].\n\n  Smith says blah [-@smith04].\n  \n\nYou can also write in-text citations, as follows:\n\n  \n    @smith04 says blah.\n  \n  \n    @smith04 [p. 33] says blah.\n  \n\nSee the Pandoc Citations documentation for additional information on citation syntax.\nUse the  toolbar button or the ⇧⌘ F8 keyboard shortcut to show the Insert Citation dialog:\n\nNote that you can insert multiple citations by using the add button on the right side of the item display.\n\nMarkdown Syntax\nYou can also insert citations directly using markdown syntax (e.g. [@cite]). When you do this a completion interface is provided for searching available citations:\n\n\n\nCitation IDs\nBefore inserting a citation from an external source you will may wish to customize its ID. Within the Insert Citation dialog, click the edit button on the right side of citations to change their ID:\n\nIf you insert a new citation via code completion, you will also be provided with the opportunity to change its default citation ID.\nFor citations inserted from Zotero, you can also use the Better BibTeX plugin to generate citation IDs (this can be enabled via Citation Options if you have Better BibTeX installed).\n\n\nCitation Preview\nOnce you’ve inserted a citation, place the cursor over it to see a preview of it along with a link to the source if one is available:\n\n\n\n\nCitations from DOIs\nUse the From DOI pane of the Insert Citation dialog to insert a citation based on a DOI (e.g that you have retrieved from a PubMed or other search):\n\nIf you are using markdown syntax, you can also paste a DOI after the [@ and it will be looked up:\n\nOnce you’ve confirmed that it’s the correct work (and possibly modified the suggested ID), the citation will be inserted into the document and an entry for the work added to your bibliography.\n\n\nCitations from Search\nUse the Crossref, DataCite, and PubMed panes of the Insert Citation dialog to search one of those services for a citation:\n\nItems inserted from a search will automatically be added to your bibliography.\nNote that for PubMed queries you can use the full supported query syntax. For example, this query searches on the author and title fields: Peterson[Author] AND Embolism[Title]. You can learn more about building PubMed queries here: https://pubmed.ncbi.nlm.nih.gov/advanced/.\n\n\nCitations from Zotero\nZotero is a popular free and open source reference manager. If you use Zotero, you can also insert citations directly from your Zotero libraries. If you have Zotero installed locally its location will be detected automatically and citations from your main library (My Library) will be available:\n\nZotero references will also show up automatically in completions:\n\nItems from Zotero will appear alongside items from your bibliography with a small “Z” logo juxtaposed over them. If you insert a citation from Zotero that isn’t already in your bibliography then it will be automatically added to the bibliography.\nIf you are running both RStudio and Zotero on your desktop, then no additional configuration is required for connecting to your Zotero library. If however you using RStudio Server and/or want to access your Zotero library over the web, then a few more steps are required (see the Zotero Web API section for details).\n\nGroup Libraries\nZotero Groups provide a powerful way to share collections with a class or work closely with colleagues on a project. By default, Zotero Group Libraries are not included in the Insert Citation dialog or citation completions. However, there are options available to use group libraries at a global, per-project, or per-document level.\nFor example, here we specify a project-level option to use the Reproducible Research Series (Year 1) group library:\n\nYou can also specify one or more libraries within YAML. For example:\n---\ntitle: \"Reproducible Research\"\nzotero: \"Reproducible Research Series (Year 1)\"\n---\nNote that you can also turn off Zotero entirely for a document using zotero: false:\n---\ntitle: \"Reproducible Research\"\nzotero: false\n---\n\n\nZotero Web API\nIf you are using RStudio Server and/or don’t have Zotero installed locally, you can still access your Zotero library using the Zotero Web API (assuming you have a Zotero web account and have synced your libraries to your account).\n\n\n\n\n\n\nIf you are running RStudio Desktop, it’s generally easier to also run Zotero on your desktop and access your library locally. That said, it is possible to access Zotero web libraries from RStudio Desktop if you prefer that configuration.\n\n\n\n\nAPI Access Key\nRStudio accesses Zotero web libraries using the Zotero Web API, so the first step is to create a Zotero account and then configure Zotero to sync its data to your account. You can do this using the Sync tab of the Zotero preferences:\n\nOnce you’ve configured your library to sync, you need to create a Zotero API Key to use with RStudio:\n\nFollow the instructions to create a new access key. Note that if you want to use Group Libraries with RStudio that you should change the default to provide read-only access to groups (as illustrated above).\nBe sure to record your key after generating it (i.e. copy it to the clipboard and/or save it somewhere more permanent) as you won’t be able to view it again after you navigate away.\nFinally, go to the R Markdown -> Citations preferences to connect Zotero to RStudio using your key:\n\nSet the Zotero Library option to “Web,” then paste in your Zotero Web API Key. You can use Verify Key… button to confirm that your Zotero API key is working correctly.\nOnce you’ve confirmed your connection you are ready to start inserting citations from Zotero."
  },
  {
    "href": "docs\\websites\\publishing-websites.html#overview",
    "title": "Publishing Websites",
    "section": "Overview",
    "text": "There are a wide variety of ways to publish Quarto websites. Website content is by default written to the _site sub-directory (you can customize this using the output-dir option). Publishing is simply a matter of copying the output directory to a web server or web hosting service.\nBelow we describe several convenient options for Quarto website deployment including GitHub Pages, Netlify, RStudio Connect, Firebase, Site44, and Amazon S3. We’ll mostly defer to the documentation provided by the various services, but will note any Quarto website specific configuration required."
  },
  {
    "href": "docs\\websites\\publishing-websites.html#rendering-for-publish",
    "title": "Publishing Websites",
    "section": "Rendering for Publish",
    "text": "The most important thing you should be sure to do before publishing is a final render of your project:\nquarto render\nIf you are publishing a book you’ll want to add the --to all argument to ensure that all output formats (e.g. PDF, EPUB) have up to date content:\nquarto render --to all\nThis is particularly important to remember because incremental changes you make when using the development server aren’t rendered into the output directory. To ensure that your output is up to date before publishing you should always do a full quarto render."
  },
  {
    "href": "docs\\websites\\publishing-websites.html#github-pages",
    "title": "Publishing Websites",
    "section": "GitHub Pages",
    "text": "GitHub Pages is a service that lets you publish a website from any GitHub repository. There are a few configuration steps required to host a Quarto website using GitHub Pages:\n\nCreate a file named .nojekyll in your repository (this is required to disable some processing of HTML files that GitHub does by default). You can do this with the following:\ntouch .nojekyll\nSet the output-dir within your _quarto.yml project file to “docs”:\nproject:\n  type: site\n  output-dir: docs\nConfigure your gh-pages to serve content from the “docs” directory:\n\n\nSee the GitHub Pages documentation for additional details on creating and deploying websites with GitHub."
  },
  {
    "href": "docs\\websites\\publishing-websites.html#netlify",
    "title": "Publishing Websites",
    "section": "Netlify",
    "text": "Netlify is a popular website hosting service that allows for both direct upload of website files or integrated publishing from Git repositories (GitHub, GitLab, or Bitbucket) via commit-hooks.\nIf you are using Netlify Git integration, be sure to set the publish directory to the output directory of your website (_site by default but modifiable via the output-dir metadata value). For example:"
  },
  {
    "href": "docs\\websites\\publishing-websites.html#rstudio-connect",
    "title": "Publishing Websites",
    "section": "RStudio Connect",
    "text": "RStudio Connect is a server product from RStudio for secure sharing of websites, applications, reports, and plots.\nUnlike the other website publishing options described here, RStudio Connect is a server that you run inside an organization, so is suitable for publishing content that you only want visible within your organization’s network as opposed to visible to the entire internet.\nYou can deploy a Quarto website to RStudio Connect from the command line using the quarto_publish_site() function from the R quarto package. For example:\nlibrary(quarto)\nquarto_publish_site(server = \"https://rsc.example.com\")\nNote that once you’ve published the site for the first time you can omit the server argument:\nquarto_publish_site()\nYou can also publish to RStudio Connect directly from within RStudio. To do this, just click the Publish button  on the editor toolbar or preview window:\n\nFor the time being Publish finished website only is the only option supported for publishing Quarto websites to RStudio Connect. Support for publishing websites with source code (so they can be rendered on the server) will be added to an upcoming release of RStudio Connect.\n\n\n\n\n\n\nNote\n\n\n\nYou should be running the daily build of RStudio (version 1.5.184 or higher) if you want to publish Quarto websites. The daily build has many other Quarto related enhancements so is highly recommended even if you aren’t using the publishing features."
  },
  {
    "href": "docs\\websites\\publishing-websites.html#google-firebase",
    "title": "Publishing Websites",
    "section": "Google Firebase",
    "text": "Google Firebase has a web hosting service that enables easy deployment of websites using a set of command line tools.\nFirebase websites by default deploy content from the public directory of the Firebase project directory. This means that you should set the output-dir to \"public\" within _quarto.yml:\nproject:\n  type: site\n  output-dir: public"
  },
  {
    "href": "docs\\websites\\publishing-websites.html#site44",
    "title": "Publishing Websites",
    "section": "Site44",
    "text": "Site44 is a service that allows you to publish websites from within Dropbox folders. Site44 creates a Dropbox/Apps/site44 directory, and any folders within that directory are published as websites.\nThe recommended workflow for deploying Quarto websites to Site44 is to develop your website in a separate project directory, and then, when it’s ready for final publishing, copy the contents of the _site directory to the folder for your website."
  },
  {
    "href": "docs\\websites\\publishing-websites.html#amazon-s3",
    "title": "Publishing Websites",
    "section": "Amazon S3",
    "text": "If you are a user of Amazon Web Services you can serve your website directly from Amazon S3. Note however that this option is a bit more technically involved than GitHub Pages, Netlify, or Site44. See the article on Hosting a Static Website on Amazon S3 for additional details."
  },
  {
    "href": "docs\\websites\\publishing-websites.html#other-services",
    "title": "Publishing Websites",
    "section": "Other services",
    "text": "Any web server or web host can be used to deploy a Quarto website. Here’s a recent CNET roundup of other web hosts you could consider. You can also deploy a Quarto website on any internal (intranet) web server."
  },
  {
    "href": "docs\\websites\\index.html#overview",
    "title": "Creating a Website",
    "section": "Overview",
    "text": "Quarto Websites are a convenient way to publish groups of documents. Documents published as part of a website share navigational elements, rendering options, and visual style.\nWebsite navigation can be provided through a global navbar, a sidebar with links, or a combination of both for sites that have multiple levels of content. You can also enable full text search for websites.\nThis site is an example of a Quarto Website (you can see the source code for it here: https://github.com/quarto-dev/quarto-web)."
  },
  {
    "href": "docs\\websites\\index.html#getting-started",
    "title": "Creating a Website",
    "section": "Getting Started",
    "text": "To create a new website project, use the Quarto create-project command:\nquarto create-project mysite --type site\nThis will create the scaffolding for a simple website in the mysite sub-directory. Here is what the _quarto.yml config file will look like for the site:\nproject:\n  type: site\n\nsite:\n  title: \"mysite\"\n  navbar:\n    type: dark\n    background: primary\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\nTo render the website into the _site directory:\ncd mysite\nquarto render\nSee the Project Basics article to learn more about working with projects.\n\nRStudio\nIf you are using RStudio you can also create a Quarto website via the New Project command:\n\nRender documents within the site using the Render command, render the entire site using the Render Site command on the Build tab."
  },
  {
    "href": "docs\\websites\\index.html#workflow",
    "title": "Creating a Website",
    "section": "Workflow",
    "text": "Quarto includes a live-reloading development server that you will likely find convenient to use while working on websites. Start the server with:\nquarto serve\nThe browser will automatically refresh whenever you save a markdown file (.md) or Jupyter Notebook (.ipynb). The browser will also refresh whenever you render a .qmd file.\nChanges to configuration files (e.g. _quarto.yml) as well as site resources (e.g. theme or CSS files) will also cause an automatic refresh.\nIf you are using RStudio a site development server will be run automatically when you render a document or the site. You can also start the development server directly using the Serve Site command on the Build tab.\nNote that development server updates do not cause an update to the final site output. Consequently, you should always quarto render your site before deploying it, even if you have already previewed the changes with the development server."
  },
  {
    "href": "docs\\websites\\index.html#linking",
    "title": "Creating a Website",
    "section": "Linking",
    "text": "When creating links between pages in your site, you can provide the source file as the link target (rather than the .html file). You can also add hash identifiers (#) to the source file if you want to link to a particular section in the document. For example:\n[about](about.qmd)\n[about](about.qmd#section)\nOne benefit of using this style of link as opposed to targeting .html files directly is that if you at some point convert your site to a book the file-based links will automatically resolve to section links for formats that produce a single file (e.g. PDF or MS Word)."
  },
  {
    "href": "docs\\websites\\index.html#learning-more",
    "title": "Creating a Website",
    "section": "Learning More",
    "text": "Once you’ve got a basic website up and running check out these articles for various ways to enhance your site:\nWebsite Navigation describes various ways to add navigation to a website, including top-level navigation bars, sidebars, or hybrid designs that uses both. This article also covers adding full-text search as well as a site-wide footer.\nWebsite Tools covers adding social metadata (e.g. for Twitter Cards) and Google Analytics to your site, as well as enabling users to toggle between dark and light color schemes.\nCode Execution provides tips for optimizing the rendering of sites with large numbers of documents or expensive computations.\nPublishing Websites enumerates the various options for publishing websites including GitHub Pages, Netlify, Google Firebase, and RStudio Connect."
  },
  {
    "href": "docs\\websites\\website-navigation.html#overview",
    "title": "Website Navigation",
    "section": "Overview",
    "text": "There are a variety of options available for providing website navigation, including:\n\nUsing top navigation (a navbar) with optional sub-menus.\nUsing side navigation with a hierarchy of pages.\nCombining top and side navigation (where top navigation links to different sections of the site each with their own side navigation).\n\nIn addition, you can add full text search to either the top or side navigation interface."
  },
  {
    "href": "docs\\websites\\website-navigation.html#top-navigation",
    "title": "Website Navigation",
    "section": "Top Navigation",
    "text": "To add top-navigation to a website, add a navbar entry to the site config in _quarto.yml. For example, the following YAML:\nsite:\n  navbar:\n    type: dark\n    background: primary\n    search: true\n    left:\n      - text: \"Home\"\n        file: index.qmd\n      - talks.qmd\n      - about.qmd \nResults in a navigation bar that looks something like this:\n\nAbove we use the left option to specify items for the left side of the navigation bar. You can also use the right option to specify items for the right side.\nThe text for navigation bar items will be taken from the underlying target document’s title. Note that in the above example we provide a custom text: \"Home\" value for index.qmd.\nYou can also create a navigation bar menu by including a menu (which is a list of items much like left and right). For example:\nleft:\n  - text: \"More\"\n    menu:\n      - talks.qmd\n      - about.qmd \nHere are all of the options available for top navigation:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ntitle\nNavbar title (uses the site: title if none is specified). Use title: false to surpress the display of the title on the navbar.\n\n\nlogo\nLogo image to be displayed left of the title.\n\n\ntype\n“dark” or “light” (each Bootstrap theme has a light and dark variation of the navigation bar)\n\n\nbackground\nBackground color (“primary,” “secondary,” “success,” “danger,” “warning,” “info,” “light,” or “dark”)\n\n\nsearch\nInclude a search box (true or false)\n\n\nleft / right\nLists of navigation items for left and right side of navbar\n\n\npinned\nAlways show the navbar (true or false). Defaults to false, and uses headroom.js to automatically show the navbar when the user scrolls up on the page.\n\n\ncollapse\nCollapse the navbar items into a hamburger menu when the display gets narrow (defaults to true)\n\n\ncollapse-below\nResponsive breakpoint at which to collapse navbar items to a hamburger menu (“sm,” “md,” “lg,” “xl,” or “xxl,” defaults to “lg”)\n\n\n\nHere are the options available for individual navigation items:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nhref\nLink to file contained with the project or external URL.\n\n\ntext\nText to display for navigation item (defaults to the document title if not provided).\n\n\nicon\nName of one of the standard Bootstrap 5 icons (e.g. “github,” “twitter,” “share,” etc.).\n\n\naria-label\nAccessible label for the navigation item.\n\n\nmenu\nList of navigation items to populate a drop-down menu."
  },
  {
    "href": "docs\\websites\\website-navigation.html#side-navigation",
    "title": "Website Navigation",
    "section": "Side Navigation",
    "text": "If your site consists of more than a handful of documents, you might prefer to use side navigation, which enables you to display an arbitrarily deep hierarchy of articles.\nIf you are reading this page on a desktop device then you will see the default side navigation display on the left (otherwise you’ll see a title bar at the top which you can click or touch to reveal the navigation).\nTo add side navigation to a website, add a sidebar entry to the site section of _quarto.yml. For example:\nsite:\n  sidebar:\n    style: \"docked\"\n    search: true\n    contents:\n      - section: \"Basics\"\n        contents:\n          - index.qmd\n          - basics-knitr.qmd\n          - basics-jupyter.qmd\n      - section: \"Layout\"\n        contents:\n          - layout.qmd\n          - layout-knitr.qmd\n          - layout-jupyter.qmd\nThere are two styles of side navigation available: “docked” which shows the navigation in a sidebar with a distinct background color, and “floating” which places it closer to the main body text. Here’s what the “docked” and “floating” styles look like (respectively):\n\n\n\n\n\n\n\n\nHere are all of the options available for side navigation:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nid\nOptional identifier (used only for hybrid navigation, described below).\n\n\ntitle\nSidebar title (uses the project title if none is specified).\n\n\nsubtitle\nOptional subtitle\n\n\nlogo\nOptional logo image\n\n\nsearch\nInclude a search box (true or false). Note that if there is already a search box on the top navigation bar it won’t be displayed on the sidebar.\n\n\ntools\nList of sidebar tools (e.g. link to github or twitter, etc.). See the next section for details.\n\n\nitems\nList of navigation items to display (typically top level items will in turn have a list of sub-items).\n\n\nstyle\n“docked” or “floating”\n\n\ntype\n“dark” or “light” (hint to make sure the text color is the inverse of the background)\n\n\nbackground\nBackground color (“none,” “primary,” “secondary,” “success,” “danger,” “warning,” “info,” “light,” “dark,” or “white”). Defaults to “light.”\n\n\nalignment\nAlignment (“left,” “right,” or “center”).\n\n\ncollapse-level\nWhether to show sidebar navigation collapsed by default. The default is 2, which shows the top and next level fully expanded (but leaves the 3rd and subsequent levels collapsed).\n\n\npinned\nAlways show a title bar that expands to show the sidebar at narrower screen widths (true or false). Defaults to false, and uses headroom.js to automatically show the navigation bar when the user scrolls up on the page.\n\n\n\n\nSidebar Tools\nIn addition to traditional navigation, the sidebar can also display a set of tools (e.g. social actions, github view or edit actions, etc.) A tool definition consists of an icon name and an href to follow when clicked. For icon, use the icon name of any of the 1,300+ Bootstrap Icons.\nFor example:\n\n\n\nsite:\n  sidebar:\n    tools:\n      - icon: twitter\n        href: https://twitter.com\n      - icon: github\n        menu:\n          - text: Source Code\n          - url:  https://code.com\n          - text: Report a Bug\n          - url:  https://bugs.com"
  },
  {
    "href": "docs\\websites\\website-navigation.html#hybrid-navigation",
    "title": "Website Navigation",
    "section": "Hybrid Navigation",
    "text": "If you have a website with dozens or even hundreds of pages you will likely want to use top and side navigation together (where the top navigation links to various sections, each with their own side navigation).\nTo do this, provide a list of sidebar entries and give them each an id, which you then use to reference them from the navbar. For example, if you are using the Diátaxis Framework for documentation, you might have separate sections for tutorials, how-to guides, explanations, and reference documents:\n\nYour site configuration might look something like this:\nsite:\n  navbar:\n    search: true\n    left:\n      - text: \"Home\"\n        file: index.qmd\n      - sidebar:tutorials\n      - sidebar:howto\n      - sidebar:fundamentals\n      - sidebar:reference\n\n  sidebar:\n    - id: tutorials\n      title: \"Tutorials\"\n      style: \"docked\"\n      background: light\n      collapse-level: 2\n      contents: \n        # navigation items\n        \n    - id: howto\n      title: \"How-To\"\n      contents:\n        # navigation items\n        \n    - id: fundamentals\n      title: \"Fundamentals\"\n      contents: :\n        # navigation items\n        \n    - id: reference\n      title: \"Reference\"\n      contents: \n        # navigation items\n    \nNote that the first sidebar definition contains a few options (e.g. style and background). These options are automatically inherited by the other sidebars."
  },
  {
    "href": "docs\\websites\\website-navigation.html#page-navigation",
    "title": "Website Navigation",
    "section": "Page Navigation",
    "text": "If you have a site with several pages in a section or subsection, it is often convenient to offer the user the ability to navigate to the next page (or previous page) at the bottom of the page that they’ve just finished reading. You can enable this using:\nsite:\n  page-navigation: true\nWhen enabled, page navigation will be displayed at the bottom of the page whenever there is a next or previous page (including in the next or previous section). This option is enabled by default for books but not for websites.\n\nSeparators\nIf you include a page separator in the sidebar (either between sections or items), page navigation controls will not appear to continue pagination across the separator. For example, in the following sidebar:\nsite:\n  sidebar:\n    contents:\n      - section: \"First Section\"\n        - contents:\n          - href: document1.qmd\n          - href: document2.qmd\n          - href: document3.qmd\n      - section: \"---\"\n      - section: \"Second Section\"\n        contents:\n          - href: document4.qmd\n          - href: document5.qmd\n          - href: document6.qmd\nWhen the user reaches the bottom of document3.qmd, they will see previous navigation to go back to document2.qmd, but they will not see next navigation to continue onto document 4. This behavior is useful when you have sections of contents that don’t naturally flow together in sequential order. Use the separator to denote this in the sidebar and break up pagination"
  },
  {
    "href": "docs\\websites\\website-navigation.html#page-footer",
    "title": "Website Navigation",
    "section": "Page Footer",
    "text": "Use the footer option to provide a common footer for all of the pages in a site. The simplest footer just provides text that will be centered and displayed in a lighter typeface:\nsite:\n  footer: \"Copyright 2021, Norah Jones\" \nYou can alternatively target the left, right, and center regions of the footer individually:\nsite:\n  footer: \n    left: \"Copyright 2021, Norah Jones\" \n    right: \n      - icon: github\n        href: https://github.com/\n      - icon: twitter \n        href: https://twitter.com/ \nNote for the right region of the footer we included navigational items for GitHub and Twitter rather than text. You can include navigational items in any region of the footer.\nYou can use the background and border options to further control the appearance of the footer. By default, the footer has no background color and a top border. To eliminate the border you would do this:\nsite:\n  border: false\nTo use a light background (e.g. to match a navigation bar) you would do this:\nsite:\n  background: light"
  },
  {
    "href": "docs\\websites\\website-navigation.html#hiding-navigation",
    "title": "Website Navigation",
    "section": "Hiding Navigation",
    "text": "For some pages (especially those with a completely custom layout) you can hide navigation altogether (navbar, sidebar, or both). In these case, add the following to the page front matter:\n# Hides the sidebar on this page\nsidebar: false\n\n# Hides the navbar on this page\nnavbar: false"
  },
  {
    "href": "docs\\websites\\website-navigation.html#site-search",
    "title": "Website Navigation",
    "section": "Site Search",
    "text": "You can add site search by including search: true in either your site-navbar or site-sidebar configuration. For example:\nsite:\n  sidebar:\n    style: \"docked\"\n    search: true\n    items:\n      - text: \"Basics\"\n        contents:\n          - index.qmd\n          - basics-jupyter.md\n        # etc"
  },
  {
    "href": "docs\\websites\\website-navigation.html#github-links",
    "title": "Website Navigation",
    "section": "GitHub Links",
    "text": "You can add various links (e.g. to edit pages, report issues, etc.) to the GitHub repository where your site source code is hosted. To do this, add a repo-url along with one or more actions in repo-actions. For example:\nsite:\n  repo-url: https://github.com/quarto-dev/quarto-demo\n  repo-actions: [edit, issue]\nThe links will be displayed immediately below the page table of contents:\n\nBy default, the main branch will be used for generating links. You can specify an alternate branch using the repo-branch option."
  },
  {
    "href": "docs\\websites\\website-navigation.html#redirects",
    "title": "Website Navigation",
    "section": "Redirects",
    "text": "If you rename or move a page on your site, you may want to create redirects from the old URLs so that existing links don’t break. You can do this by adding aliases from old pages to renamed pages.\nFor example, let’s say you renamed page.qmd to renamed-page.qmd. You would add the following aliases entry to renamed-page.qmd to create the redirect:\n---\ntitle: \"Renamed Page\"\naliases:\n  - page.html\n---\nThis can also be useful for situations where you re-organize content on your site into a different directory hierarchy or break one large article into smaller ones. For this case, you may want to add the URL hash of the section that you have broken into a new page. For example:\n---\ntitle: \"Learning More\"\naliases:\n  - overview.html#learning-more\n---\n\n\n\n\n\n\nTip\n\n\n\nDepending on where you are deploying your site there may be more powerful tools available for defining redirects based on patterns. For example, Netlify _redirects files or .htaccess files. Search your web host’s documentation for “redirects” to see if any of these tools are available."
  },
  {
    "href": "docs\\websites\\website-navigation.html#pages-404",
    "title": "Website Navigation",
    "section": "404 Pages",
    "text": "When a browser can’t find a requested web page, it displays a 404 error indicating that the file can’t be found. Browser default 404 pages can be pretty stark, so you may want to create a custom page with a more friendly message and perhaps pointers on how users might find what they are looking for.\nMost web serving platforms (e.g. Netlify, GitHub Pages, etc.) will use a file named 404.html in the root of your website as a custom error page if you provide it. You can include a custom 404 page in a Quarto website by creating a markdown file named 404.md in the root of your project. For example:\n---\ntitle: Page Not Found\n---\n\nThe page you requested cannot be found (perhaps it was moved or renamed).\n\nYou may want to try searching to find the page's new location.\nNote that you can use HTML alongside markdown within your 404.md file in order to get exactly the appearance and layout you want.\nYour 404 page will appear within the chrome of your site (e.g. fonts, css, layout, navigation, etc.). This is so that users don’t feel that they’ve irrecoverably “left” your site when they get a 404 error. If you don’t want this behavior, then provide a 404.html rather than 404.md.\nHere are some examples of how various popular websites handle custom 404 pages: https://blog.fluidui.com/top-404-error-page-examples/.\n\nNon-Root Site Paths\nIf your website is served from the root of a domain (e.g. https://example.com/) then simply providing a 404.md file as described above is all that’s required to create a custom 404 page.\nHowever, if your website is not served from the root of a domain then you need to provide one additional bit of configuration to make sure that resources (e.g. your site’s CSS) are resolved correctly within 404 pages.\nFor example, if your site is served from https://example.com/mysite/ then you’d add the following to your project site configuration within _quarto.yml:\nsite:\n  title: \"My Site\"\n  site-path: \"/mysite/\"\nNote that if you are already providing a site-url (which is required for generation of sitemaps and social metadata preview images) then it’s enough to simply include the path within the site-url:\nsite:\n  title: \"My Site\"\n  site-url: \"https://example.com/mysite/\""
  },
  {
    "href": "docs\\websites\\website-tools.html#social-metadata",
    "title": "Website Tools",
    "section": "Social Metadata",
    "text": "You can enhance your website and the content that you publish to it by including additional types of metadata, including:\n\nTwitter Cards\nOpen Graph\n\n\nTwitter Cards\nTwitter Cards provide an enhanced appearance when someone links to your site on Twitter. When a link to your site is included in a Tweet, Twitter automatically crawls your site and fetches any Twitter Card metadata. To enable the automatic generation of Twitter Card metadata for your site, you can add the following to your _quarto.yml configuration file:\nsite:\n  twitter-card: true\nIn this case, Quarto will automatically generate a title, description, and preview image for the content. For more information about how Quarto finds preview images, see Preview Images.\nYou may also provide additional metadata to be used when generating the Twitter Card, including:\n\n\n\n\n\n\n\nKey\nDescription\n\n\n\n\ntitle\nThe title of the page. Quarto will automatically use the title metadata from the page metadata. If you’d like you can override this just for the Twitter Card by including a title in the twitter-card metadata.\n\n\ndescription\nA short description of the content. Quarto will automatically use the description metadata from the page metadata. If you’d like you can override this just for the Twitter Card by including a description in the twitter-card metadata.\n\n\nimage\nThe path to a preview image for this content. By default, Quarto will use the image value from the site: metadata. If you provide an image, you may also optionally provide an image-width and image-height to improve the appearance of your Twitter Card.\nIf image is not provided, Quarto will automatically attempt to locate a preview image. For more information, see Preview Images.\n\n\ncard-style\nEither summary or summary_large_image. If this is not provided, the best style will automatically selected based upon other metadata. You can learn more about Twitter Card styles here.\n\n\ncreator\n@username of the website. Note that strings with special characters such as @ must be quoted in yaml.\n\n\nsite\n@username of content creator. Note that strings with special characters such as @ must be quoted in yaml.\n\n\n\nHere is a more comprehensive example of specifying Twitter Card metadata in a quarto.yml file:\nsite:\n  twitter-card:\n    creator: \"@dragsonstyle\"\n    site: \"@rstudio\"\nQuarto will automatically merge global metadata found in the site: twitter-card key with any metadata provided in the document itself in the twitter-card key. This is useful when you need to specify a mix of global options (for example, site) with per document options such as title or image.\n\n\nOpen Graph\nThe Open Graph protocol is a specification that enables richer sharing of links to articles on the web. It will improve the previews of your content when a link to it is pasted into applications like Slack, Discord, Facebook, Linkedin, and more. To enable the automatic generation of Open Graph metadata for your content, include the following in your _quarto.yml configuration file:\nsite:\n  open-graph: true\nIn this case, Quarto will automatically generate a title, description, and preview image for the content. For more information about how Quarto finds preview images, see Preview Images.\nYou may also provide additional metadata to be used when generating the Open Graph metadata, including:\n\n\n\n\n\n\n\nKey\nDescription\n\n\n\n\ntitle\nThe title of the page. Quarto will automatically use the title metadata from the page metadata. If you’d like you can override this just for the Open Graph metadata by including a title in the open-graph metadata.\n\n\ndescription\nA short description of the content. Quarto will automatically use the description metadata from the page metadata. If you’d like you can override this just for the Open Graph metadata by including a description in the open-graph metadata.\n\n\nimage\nThe path to a preview image for this content. By default, Quarto will use the image value from the site: metadata. If you provide an image, you may also optionally provide an image-width and image-height.\nIf image is not provided, Quarto will automatically attempt to locate a preview image. For more information, see Preview Images.\n\n\nlocale\nThe locale that the Open Graph metadata is marked up in.\n\n\nsite_name\nThe name which should be displayed for the overall site. If not explicitly provided in the open-graph metadata, Quarto will use the site:title value.\n\n\n\nHere is a more comprehensive example of specifying Open Graph metadata in a quarto.yml file:\nsite:\n  open-graph:\n    locale: es_ES\n    site_name: Quarto\nQuarto will automatically merge global metadata found in the site: open-graph key with any metadata provided in the document itself in the open-graph key. This is useful when you need to specify a mix of global options (for example, site) with per document options such as title or image.\n\n\nPreview Images\nYou can specify a preview image for your article in several different ways:\n\nYou can explicitly provide a full url to the preview image using the image field in the appropriate metadata. For example:\ntitle: \"My Document\"\ntwitter-card:\n  image: \"https://quarto.org/images/preview-code.png\"\nYou may provide a document relative path to an image (such as images/preview-code.png) or a project relative path to an image (such as /images/preview-code.png). If you provide a relative path such as this, you must also provide a site-url in your site’s metadata. For example in your _quarto.yml configuration file:\nsite:\n  site-url: \"https://www.quarto.org\"\nand in your document front matter:\ntitle: \"My Document\"\ntwitter-card:\n  image: \"/images/preview-code.png\"\nAny image that is being rendered in the page may also be used as a preview image by giving it the class name preview-image. Quarto will select the first image it finds with this class. For example, the following image will be used as the preview image when included on a page:\n![](images/preview-code.png){.preview-image}\nIf you label an image with this class, you must also provide a site-url in your site’s metadata.\nIf none of the above ways of specifying a preview image have been used, Quarto will attempt to find a preview image by looking for an image included in the rendered document with one of the following names: preview.png, feature.png, cover.png, or thumbail.png."
  },
  {
    "href": "docs\\websites\\website-tools.html#google-analytics",
    "title": "Website Tools",
    "section": "Google Analytics",
    "text": "You can add Google Analytics to your website by adding adding a google-analytics key to your _quarto.yml file. In its simplest form, you can just pass your Google Analytics tracking Id (e.g. UA-xxxxxxx) or Google Tag measurement Id (e.g. G-xxxxxxx) like:\nsite:\n  google-analytics: \"UA-XXXXXXXX\"\nQuarto will use the key itself to determine whether to embed Google Analytics (analytics.js) or Google Tags (gtag) as appropriate.\nIn addition to this basic configuration, you can exercise more fine grained control of your site analytics using the following keys.\n\n\n\n\n\n\n\nKey\nDescription\n\n\n\n\ntracking-id\nThe Google tracking Id or measurement Id of this website.\n\n\nstorage\ncookies - Use cookies to store unique user and session identification (default).\nnone - Do not use cookies to store unique user and session identification.\nFor more about choosing storage options see Storage.\n\n\nanonymize-ip\nAnonymize the user ip address. For more about this feature, see IP Anonymization (or IP masking) in Google Analytics.\n\n\nversion\nThe version number of Google Analytics to use. Currently supports either 3 (for analytics.js) or 4 (for gtag). This is automatically detected based upon the tracking-id, but you may specify it.\n\n\n\n\nStorage\nGoogle Analytics uses cookies to distinguish unique users and sessions. If you choose to use cookies to store this user data, you should consider whether you need to enable Cookie Consent in order to permit the viewer to control any tracking that you enable.\nIf you choose none for storage, this will have the following effects:\n\nFor Google Analytics v3 (analytics.js)\nNo tracking cookies will be used. Individual page hits will be properly tracked, enabling you to see which pages are viewed and how often they are viewed. Unique user and session tracking will not report data correctly since the tracking cookies they rely upon are not set.\nFor Google Tags (gtag)\nUser consent for ad and analytics tracking cookies will be withheld. In this mode, Google Analytics will still collect user data without the user identification, but that data is currently not displayed in the Google Analytics reports."
  },
  {
    "href": "docs\\websites\\website-tools.html#cookie-consent",
    "title": "Website Tools",
    "section": "Cookie Consent",
    "text": "Quarto includes the ability to request cookie consent before enabling scripts that set cookies, using Cookie Consent.\nThe user’s cookie preferences will automatically control Google Analytics (if enabled) and can be used to control custom scripts you add as well (see Custom Scripts and Cookie Consent. You can enable the default request for cookie consent using the following:\nsite:\n  cookie-consent: true\nYou can further customize the appearance and behavior of the consent using the following:\n\n\n\n\n\n\n\nKey\nDescription\n\n\n\n\ntype\nThe type of consent that should be requested, using one of these two values:\nimplied - (default) This will notify the user that the site uses cookies and permit them to change preferences, but not block cookies unless the user changes their preferences.\nexpress - This will block cookies until the user expressly agrees to allow them (or continue blocking them if the user doesn’t agree).\n\n\nstyle\nThe style of the consent banner that is displayed:\nsimple - (default) A simple dialog in the lower right corner of the website.\nheadline - A full width banner across the top of the website.\ninterstitial - An semi-transparent overlay of the entire website.\nstandalone - An opaque overlay of the entire website.\n\n\npalette\nWhether to use a dark or light appearance for the consent banner:\nlight - A light colored banner.\ndark - A dark colored banner.\n\n\npolicy-url\nThe url to the website’s cookie or privacy policy.\n\n\nprefs-text\nThe text to display for the cookie preferences link in the website footer.\n\n\n\nA custom example might look more like:\nsite:\n  cookie-consent:\n    type: express\n    style: headline\n    palette: dark\n  google-analytics:\n    tracking-id: \"G-XXXXXXX\"\n    anonymize-ip: true\n\nCookie Preferences\nIn addition to requesting consent when a new user visits your website, Cookie Consent will also add a cookie preferences link to the footer of the website. You can control the text of this link using prefs-text. If you would rather position this link yourself, just add a link with the id #open_preferences_center to the website and Cookie Consent will not add the preferences link to the footer. For example:\nChange [cookie preferences](#open_preferences_center)\n\n\nCustom Scripts and Cookie Consent\nCookie Consent works by preventing the execution of scripts unless the user has expressed their consent. To control your custom scripts using Cookie Consent:\n\nInsert script tags as type='text/plain' (when the user consents, the type will be switched to text/javascript and the script will be executed).\n\n\n\nAdd a cookie-consent attribute to your script tag, setting it one of the following 4 levels:\n\n\n\n\n\n\n\nLevel\nDescription\n\n\n\n\nstrictly-necessary\nStrictly scripts are loaded automatically and cannot be disabled by the user.\n\n\nfunctionality\nScripts that are required for basic functionality of the website, for example, remembering a user language preference.\n\n\ntracking\nScripts that are used to track users, for example Google Analytics.\n\n\ntargeting\nScripts that are used for the purposed of advertising to ad targeting, for example Google AdSense remarketing.\n\n\n\n\nAn example script that is used for user tracking would look like:\n<script type=\"text/plain\" cookie-consent=\"tracking\">\n\n// My tracking JS code here\n\n</script>"
  },
  {
    "href": "docs\\websites\\website-tools.html#site-resources",
    "title": "Website Tools",
    "section": "Site Resources",
    "text": "Besides input and configuration files, your site likely also includes a variety of resources (e.g. images) that you will want to publish along with your site. Quarto will automatically detect any files that you reference within your site and copy them to the output directory (e.g. _site).\nIf this auto-detection fails for any reason, or if you want to publish a file not explicitly linked to from within your site, you can add a resources entry to your configuration. For example, here we specify that we want to include all Excel spreadsheets within the project directory as part of the website:\nproject:\n  type: site\n  resources: \n    - \"*.xlsx\"\nNote that the *.xslx value is quoted: this is because YAML requires that strings that begin with non-alphanumeric characters be quoted.\nYou can also add a resources metadata value to individual files. For example:\ntitle: \"My Page\"\nresources:\n  - \"sheet.xlsx\"\nImages are the most commonly used type of resource file. If you have global images (e.g. a logo) that you want to reference from various pages within your site, you can use a site-absolute path to refer to the images, and it will be automatically converted to a relative path during publishing. For example:\n![](/images/logo.png)"
  },
  {
    "href": "docs\\websites\\website-tools.html#dark-mode",
    "title": "Website Tools",
    "section": "Dark Mode",
    "text": "Quarto websites can support both a light and dark mode. For example, you may use the flatly and darkly themes (which are designed to be used in tandem as dark and light appearances) as:\ntheme:\n  light: flatly\n  dark: darkly\nFor more about selecting the dark and light themes for your website, see Dark Mode.\n\n\n\nLight\nDark\n\n\n\n\n\n\n\n\n\nWhen enabled, a toggle that allows your reader to control the appearance of the website will appear. The toggle will automatically be added to the website navigation as follows:\n\nIf a navbar has been specified, the toggle will appear in the top right corner of the nav bar.\nIf there is no navbar present, but a sidebar has been specified, the toggle will appear in the same location that the sidebar tools appears (adjacent to the title or logo in the sidebar).\nIf there is no navbar or sidebar present, the toggle will appear in the top right corner of the page."
  },
  {
    "href": "index.html#introduction",
    "title": "Welcome to Quarto",
    "section": "Introduction",
    "text": "Quarto is an open-source scientific and technical publishing system built on Pandoc. Quarto documents are authored using markdown, an easy to write plain text format.\nIn addition to the core capabilities of Pandoc, Quarto includes:\n\nEmbedding code and output from Python, R, and JavaScript via integration with Jupyter, Knitr, and Observable.\nA variety of extensions to Pandoc markdown useful for technical writing including cross-references, sub-figures, layout panels, hoverable citations and footnotes, callouts, and more.\nA project system for rendering groups of documents at once, sharing options across documents, and producing aggregate output like websites and books.\nAuthoring using a wide variety of editors and notebooks including JupyterLab, RStudio, and VS Code.\nA visual markdown editor that provides a productive writing interface for composing long-form documents.\n\nTo get a quick flavor of what you can create with Quarto, check out the Gallery of examples.\nThe overall design of Quarto is influenced heavily by R Markdown, however unlike R Markdown the architecture is language agnostic. In its current iteration, Quarto can render plain markdown, Jupyter Notebooks, and Knitr documents."
  },
  {
    "href": "index.html#hello-quarto",
    "title": "Welcome to Quarto",
    "section": "Hello, Quarto",
    "text": "Here’s a simple example of a markdown document that includes a cross-referenced figure generated by Matplotlib:\n---\ntitle: \"Matplotlib Demo\"\nauthor: \"Norah Smith\"\ndate: \"May 22nd, 2021\"\nformat: \n  html:\n    code-fold: true\njupyter: python3\n---\n\n## Polar Axis\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n```{python}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\nHere’s what the document looks like when rendered by Quarto:\n\nYou can render documents using the quarto command line tool:\nquarto render matplotlib-demo.qmd\nEmbedded code blocks (in this case some Python code that generates a plot) are run by Quarto, and their output is included in the final document generated by Pandoc.\nNote that we use the file extension .qmd to indicate that this isn’t a plain markdown file but rather one with embedded computations to be run by Quarto.\nDon’t worry if all the mechanics of this example aren’t obvious, the main takeaway is that Quarto enables you to enhance Pandoc markdown documents with features useful for scientific and technical communication including executable code, cross-references, and much more.\n\n\n\n\n\n\nNote\n\n\n\nWhile this example demonstrates rendering a .qmd markdown file, Quarto can also directly render existing computational document formats like Jupyter Notebooks (.ipynb) and R Markdown (.Rmd)."
  },
  {
    "href": "index.html#getting-started",
    "title": "Welcome to Quarto",
    "section": "Getting Started",
    "text": "Installation will get you up and running with Quarto (including additional dependencies required for computational documents).\nQuarto Basics will help you learn the core mechanics of rendering markdown as well as how to specify document formats and options.\nRunning Code explains how to work with Jupyter and Knitr based computational documents in more depth.\nJupyterLab, RStudio, and VS Code help you create an optimal workflow in your code editing tool(s) of choice.\nVisual Editor describes how to use Quarto’s visual interface for composing long-form markdown documents.\nGallery provides examples of articles, reports, presentations, interactive documents, websites, and books using various formats."
  }
]